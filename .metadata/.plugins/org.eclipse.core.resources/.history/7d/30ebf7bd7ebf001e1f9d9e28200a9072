/*
 * task_handler.c
 *

*/

#include "main.h"

/* Function declarations */
void process_cmd(command_t *cmd);
int extract_command(command_t *cmd);


void menu_handler(void *parameters)
{
	const char *menu_msg = "----------------------------------\n"
			"---------------Menu---------------"
			"----------------------------------"
			"Blink LED in pattern    -----> 0\n"
			"Configure date & time   -----> 1\n"
			"Exit                    -----> 2\n"
			"Enter your choice here : ";

}
void cmd_handler(void *parameters)
{
	BaseType_t ret;
	command_t cmd;

	ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);

	if(ret==pdPASS){
		process_cmd(&cmd);
	}




}
void process_cmd(command_t *cmd)
{
	extract_command(cmd);

	switch(curr_state)
	{
	case sMainMenu:
		xTaskNotify(menu_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	case sLedEffect:
		xTaskNotify(led_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	case sRtcMenu:
	case sRtcTimeConfig:
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(rtc_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;

	}

}

int extract_command(command_t *cmd)
{
	uint8_t val,ind;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
	if(!status)
	{
		return -1;
	}
	ind=0;
	do
	{
		status = xQueueReceive(q_data,&val,0);
		if(status==pdPASS)
		{
			cmd->data[ind++]=val;
		}
	} while(val != '\n');

	cmd->data[ind-1]='\0';
	cmd->length=ind-1;
	return 0;
}


void rtc_handler(void *parameters)
{

}
void led_handler(void *parameters)
{

}
void print_handler(void *parameters)
{

}
