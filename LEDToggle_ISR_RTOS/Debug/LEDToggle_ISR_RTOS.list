
LEDToggle_ISR_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006374  08006374  00016374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006464  08006464  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800646c  0800646c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001348c  20000014  08006488  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200134a0  08006488  000234a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014687  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df5  00000000  00000000  000346cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  000374c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  000387a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f04  00000000  00000000  00039918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141a6  00000000  00000000  0005181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099263  00000000  00000000  000659c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fec25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f54  00000000  00000000  000fec78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800635c 	.word	0x0800635c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800635c 	.word	0x0800635c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ed4 	.word	0x20012ed4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	next_task_handle = NULL;
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <main+0xbc>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fb16 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f868 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8d2 	bl	8000734 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  ret = xTaskCreate(led_green_handler,"Blink_LED_green_Task",200,NULL,3, &led_green_handle);
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <main+0xc0>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2303      	movs	r3, #3
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4927      	ldr	r1, [pc, #156]	; (800063c <main+0xc4>)
 800059e:	4828      	ldr	r0, [pc, #160]	; (8000640 <main+0xc8>)
 80005a0:	f002 f922 	bl	80027e8 <xTaskCreate>
 80005a4:	60f8      	str	r0, [r7, #12]
  configASSERT(ret==pdPASS);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x48>
  next_task_handle = led_green_handle;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <main+0xc0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <main+0xbc>)
 80005c8:	6013      	str	r3, [r2, #0]

  ret = xTaskCreate(led_yellow_handler,"Blink_LED_yellow_Task",200,NULL,2, &led_yellow_handle);
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <main+0xcc>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	491c      	ldr	r1, [pc, #112]	; (8000648 <main+0xd0>)
 80005d8:	481c      	ldr	r0, [pc, #112]	; (800064c <main+0xd4>)
 80005da:	f002 f905 	bl	80027e8 <xTaskCreate>
 80005de:	60f8      	str	r0, [r7, #12]
  configASSERT(ret==pdPASS);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x84>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	607b      	str	r3, [r7, #4]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x82>

  ret = xTaskCreate(led_red_handler,"Blink_LED_red_Task",200,NULL,1, &led_red_handle);
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <main+0xd8>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2301      	movs	r3, #1
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	4912      	ldr	r1, [pc, #72]	; (8000654 <main+0xdc>)
 800060a:	4813      	ldr	r0, [pc, #76]	; (8000658 <main+0xe0>)
 800060c:	f002 f8ec 	bl	80027e8 <xTaskCreate>
 8000610:	60f8      	str	r0, [r7, #12]
  configASSERT(ret==pdPASS);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d00a      	beq.n	800062e <main+0xb6>
        __asm volatile
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	603b      	str	r3, [r7, #0]
    }
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <main+0xb4>


  vTaskStartScheduler();
 800062e:	f002 fb11 	bl	8002c54 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	e7fe      	b.n	8000632 <main+0xba>
 8000634:	2000003c 	.word	0x2000003c
 8000638:	20000030 	.word	0x20000030
 800063c:	08006374 	.word	0x08006374
 8000640:	08000841 	.word	0x08000841
 8000644:	20000034 	.word	0x20000034
 8000648:	0800638c 	.word	0x0800638c
 800064c:	08000899 	.word	0x08000899
 8000650:	20000038 	.word	0x20000038
 8000654:	080063a4 	.word	0x080063a4
 8000658:	080008f1 	.word	0x080008f1

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fe6e 	bl	800634c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a28      	ldr	r2, [pc, #160]	; (800072c <SystemClock_Config+0xd0>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd4>)
 80006aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d0:	2310      	movs	r3, #16
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006da:	2304      	movs	r3, #4
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006de:	2307      	movs	r3, #7
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fd64 	bl	80011b4 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006f2:	f000 f94f 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f000 ffc6 	bl	80016a4 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071e:	f000 f939 	bl	8000994 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <MX_GPIO_Init+0x100>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a38      	ldr	r2, [pc, #224]	; (8000834 <MX_GPIO_Init+0x100>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <MX_GPIO_Init+0x100>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b32      	ldr	r3, [pc, #200]	; (8000834 <MX_GPIO_Init+0x100>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a31      	ldr	r2, [pc, #196]	; (8000834 <MX_GPIO_Init+0x100>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <MX_GPIO_Init+0x100>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <MX_GPIO_Init+0x100>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <MX_GPIO_Init+0x100>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_GPIO_Init+0x100>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_GPIO_Init+0x100>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a23      	ldr	r2, [pc, #140]	; (8000834 <MX_GPIO_Init+0x100>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_GPIO_Init+0x100>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_Y_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	21e0      	movs	r1, #224	; 0xe0
 80007be:	481e      	ldr	r0, [pc, #120]	; (8000838 <MX_GPIO_Init+0x104>)
 80007c0:	f000 fca0 	bl	8001104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_GPIO_Init+0x108>)
 80007dc:	f000 fb0e 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e0:	230c      	movs	r3, #12
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f0:	2307      	movs	r3, #7
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MX_GPIO_Init+0x104>)
 80007fc:	f000 fafe 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_Y_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_Y_Pin|LED_R_Pin;
 8000800:	23e0      	movs	r3, #224	; 0xe0
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4808      	ldr	r0, [pc, #32]	; (8000838 <MX_GPIO_Init+0x104>)
 8000818:	f000 faf0 	bl	8000dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2106      	movs	r1, #6
 8000820:	2028      	movs	r0, #40	; 0x28
 8000822:	f000 fac1 	bl	8000da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000826:	2028      	movs	r0, #40	; 0x28
 8000828:	f000 fada 	bl	8000de0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020800 	.word	0x40020800

08000840 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void *parameters){
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
	BaseType_t notificationStatus;

	while (1){
		HAL_GPIO_TogglePin(GPIOA,LED_G_Pin);
 8000848:	2120      	movs	r1, #32
 800084a:	4810      	ldr	r0, [pc, #64]	; (800088c <led_green_handler+0x4c>)
 800084c:	f000 fc73 	bl	8001136 <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		notificationStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2300      	movs	r3, #0
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	2000      	movs	r0, #0
 800085e:	f002 ff99 	bl	8003794 <xTaskGenericNotifyWait>
 8000862:	60f8      	str	r0, [r7, #12]
		if(notificationStatus==pdPASS){
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d1ee      	bne.n	8000848 <led_green_handler+0x8>
			portENTER_CRITICAL();
 800086a:	f003 fe3b 	bl	80044e4 <vPortEnterCritical>
			next_task_handle = led_yellow_handle;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <led_green_handler+0x50>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <led_green_handler+0x54>)
 8000874:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA,LED_G_Pin,GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2120      	movs	r1, #32
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <led_green_handler+0x4c>)
 800087c:	f000 fc42 	bl	8001104 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000880:	f003 fe60 	bl	8004544 <vPortExitCritical>
			vTaskDelete(NULL);
 8000884:	2000      	movs	r0, #0
 8000886:	f002 f937 	bl	8002af8 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA,LED_G_Pin);
 800088a:	e7dd      	b.n	8000848 <led_green_handler+0x8>
 800088c:	40020000 	.word	0x40020000
 8000890:	20000034 	.word	0x20000034
 8000894:	2000003c 	.word	0x2000003c

08000898 <led_yellow_handler>:
		}

	}
}

static void led_yellow_handler(void *parameters){
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
	BaseType_t notificationStatus;
		while (1){
			HAL_GPIO_TogglePin(GPIOA,LED_Y_Pin);
 80008a0:	2140      	movs	r1, #64	; 0x40
 80008a2:	4810      	ldr	r0, [pc, #64]	; (80008e4 <led_yellow_handler+0x4c>)
 80008a4:	f000 fc47 	bl	8001136 <HAL_GPIO_TogglePin>
			//HAL_Delay(1000);
			notificationStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80008a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2300      	movs	r3, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2000      	movs	r0, #0
 80008b6:	f002 ff6d 	bl	8003794 <xTaskGenericNotifyWait>
 80008ba:	60f8      	str	r0, [r7, #12]
			if(notificationStatus==pdPASS){
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d1ee      	bne.n	80008a0 <led_yellow_handler+0x8>
				portENTER_CRITICAL();
 80008c2:	f003 fe0f 	bl	80044e4 <vPortEnterCritical>
				next_task_handle = led_red_handle;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <led_yellow_handler+0x50>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <led_yellow_handler+0x54>)
 80008cc:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOA,LED_Y_Pin,GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <led_yellow_handler+0x4c>)
 80008d4:	f000 fc16 	bl	8001104 <HAL_GPIO_WritePin>
				portEXIT_CRITICAL();
 80008d8:	f003 fe34 	bl	8004544 <vPortExitCritical>
				vTaskDelete(NULL);
 80008dc:	2000      	movs	r0, #0
 80008de:	f002 f90b 	bl	8002af8 <vTaskDelete>
			HAL_GPIO_TogglePin(GPIOA,LED_Y_Pin);
 80008e2:	e7dd      	b.n	80008a0 <led_yellow_handler+0x8>
 80008e4:	40020000 	.word	0x40020000
 80008e8:	20000038 	.word	0x20000038
 80008ec:	2000003c 	.word	0x2000003c

080008f0 <led_red_handler>:
			}
		}
}

static void led_red_handler(void *parameters){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	6078      	str	r0, [r7, #4]
	BaseType_t notificationStatus;
		while (1){
			HAL_GPIO_TogglePin(GPIOA,LED_R_Pin);
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	4810      	ldr	r0, [pc, #64]	; (800093c <led_red_handler+0x4c>)
 80008fc:	f000 fc1b 	bl	8001136 <HAL_GPIO_TogglePin>
			//HAL_Delay(1000);
			notificationStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2000      	movs	r0, #0
 800090e:	f002 ff41 	bl	8003794 <xTaskGenericNotifyWait>
 8000912:	60f8      	str	r0, [r7, #12]
			if(notificationStatus==pdPASS){
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d1ee      	bne.n	80008f8 <led_red_handler+0x8>
				portENTER_CRITICAL();
 800091a:	f003 fde3 	bl	80044e4 <vPortEnterCritical>
				next_task_handle = NULL;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <led_red_handler+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOA,LED_R_Pin,GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <led_red_handler+0x4c>)
 800092a:	f000 fbeb 	bl	8001104 <HAL_GPIO_WritePin>
				portEXIT_CRITICAL();
 800092e:	f003 fe09 	bl	8004544 <vPortExitCritical>
				vTaskDelete(NULL);
 8000932:	2000      	movs	r0, #0
 8000934:	f002 f8e0 	bl	8002af8 <vTaskDelete>
			HAL_GPIO_TogglePin(GPIOA,LED_R_Pin);
 8000938:	e7de      	b.n	80008f8 <led_red_handler+0x8>
 800093a:	bf00      	nop
 800093c:	40020000 	.word	0x40020000
 8000940:	2000003c 	.word	0x2000003c

08000944 <button_interrupt_handler>:
			}
		}
}
void button_interrupt_handler(void *parameters){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af02      	add	r7, sp, #8
 800094a:	6078      	str	r0, [r7, #4]

	xTaskNotifyFromISR(next_task_handle,0,eNoAction,NULL);
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <button_interrupt_handler+0x28>)
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	2300      	movs	r3, #0
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	2300      	movs	r3, #0
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	f002 ffa1 	bl	80038a4 <xTaskGenericNotifyFromISR>


}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000003c 	.word	0x2000003c

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 f939 	bl	8000bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40000c00 	.word	0x40000c00

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009de:	f003 fd03 	bl	80043e8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a32      	ldr	r2, [pc, #200]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1c:	f107 0210 	add.w	r2, r7, #16
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f848 	bl	8001abc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a36:	f001 f82d 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8000a3a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a3c:	e004      	b.n	8000a48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a3e:	f001 f829 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8000a42:	4603      	mov	r3, r0
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	0c9b      	lsrs	r3, r3, #18
 8000a52:	3b01      	subs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <HAL_InitTick+0xec>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <HAL_InitTick+0xf0>)
 8000a5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_InitTick+0xec>)
 8000a5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a62:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_InitTick+0xec>)
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_InitTick+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_InitTick+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <HAL_InitTick+0xec>)
 8000a7e:	f001 f84f 	bl	8001b20 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <HAL_InitTick+0xec>)
 8000a92:	f001 f89f 	bl	8001bd4 <HAL_TIM_Base_Start_IT>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d111      	bne.n	8000ac8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000aa4:	2032      	movs	r0, #50	; 0x32
 8000aa6:	f000 f99b 	bl	8000de0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d808      	bhi.n	8000ac2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2032      	movs	r0, #50	; 0x32
 8000ab6:	f000 f977 	bl	8000da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_InitTick+0xf4>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e002      	b.n	8000ac8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3738      	adds	r7, #56	; 0x38
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	20000040 	.word	0x20000040
 8000ae0:	40000c00 	.word	0x40000c00
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  button_interrupt_handler();
 8000b18:	f7ff ff14 	bl	8000944 <button_interrupt_handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b20:	f000 fb24 	bl	800116c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM5_IRQHandler+0x10>)
 8000b2e:	f001 f8b3 	bl	8001c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000040 	.word	0x20000040

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ffd7 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f005 fb9b 	bl	80062c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fcf1 	bl	8000578 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ba4:	08006474 	.word	0x08006474
  ldr r2, =_sbss
 8000ba8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000bac:	200134a0 	.word	0x200134a0

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f8d8 	bl	8000d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f7ff ff04 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff feda 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000088 	.word	0x20000088

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000088 	.word	0x20000088

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff4c 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dba:	f7ff ff61 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f7ff ffb1 	bl	8000d2c <NVIC_EncodePriority>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff80 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff54 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e159      	b.n	80010cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 8148 	bne.w	80010c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d005      	beq.n	8000e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d130      	bne.n	8000eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 0201 	and.w	r2, r3, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d017      	beq.n	8000eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d123      	bne.n	8000f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	69b9      	ldr	r1, [r7, #24]
 8000f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0203 	and.w	r2, r3, #3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80a2 	beq.w	80010c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b57      	ldr	r3, [pc, #348]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a56      	ldr	r2, [pc, #344]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b54      	ldr	r3, [pc, #336]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9e:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a49      	ldr	r2, [pc, #292]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d019      	beq.n	8000ffe <HAL_GPIO_Init+0x202>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_GPIO_Init+0x2f4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0x1fe>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a47      	ldr	r2, [pc, #284]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_GPIO_Init+0x1fa>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x1f6>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a45      	ldr	r2, [pc, #276]	; (80010fc <HAL_GPIO_Init+0x300>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_GPIO_Init+0x1f2>
 8000fea:	2304      	movs	r3, #4
 8000fec:	e008      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000fee:	2307      	movs	r3, #7
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e004      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000ffe:	2300      	movs	r3, #0
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	f002 0203 	and.w	r2, r2, #3
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	4093      	lsls	r3, r2
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001010:	4935      	ldr	r1, [pc, #212]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101e:	4b38      	ldr	r3, [pc, #224]	; (8001100 <HAL_GPIO_Init+0x304>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001042:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <HAL_GPIO_Init+0x304>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_GPIO_Init+0x304>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800106c:	4a24      	ldr	r2, [pc, #144]	; (8001100 <HAL_GPIO_Init+0x304>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_GPIO_Init+0x304>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001096:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <HAL_GPIO_Init+0x304>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_GPIO_Init+0x304>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_GPIO_Init+0x304>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	f67f aea2 	bls.w	8000e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40013800 	.word	0x40013800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	40013c00 	.word	0x40013c00

08001104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	4613      	mov	r3, r2
 8001112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001120:	e003      	b.n	800112a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	041a      	lsls	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	619a      	str	r2, [r3, #24]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001136:	b480      	push	{r7}
 8001138:	b085      	sub	sp, #20
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	041a      	lsls	r2, r3, #16
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43d9      	mvns	r1, r3
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	400b      	ands	r3, r1
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	619a      	str	r2, [r3, #24]
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f806 	bl	800119c <HAL_GPIO_EXTI_Callback>
  }
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e267      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d075      	beq.n	80012be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d2:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d00c      	beq.n	80011f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011de:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d112      	bne.n	8001210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ea:	4b82      	ldr	r3, [pc, #520]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011f6:	d10b      	bne.n	8001210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	4b7e      	ldr	r3, [pc, #504]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d05b      	beq.n	80012bc <HAL_RCC_OscConfig+0x108>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d157      	bne.n	80012bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e242      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001218:	d106      	bne.n	8001228 <HAL_RCC_OscConfig+0x74>
 800121a:	4b76      	ldr	r3, [pc, #472]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a75      	ldr	r2, [pc, #468]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e01d      	b.n	8001264 <HAL_RCC_OscConfig+0xb0>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x98>
 8001232:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6f      	ldr	r2, [pc, #444]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0xb0>
 800124c:	4b69      	ldr	r3, [pc, #420]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a68      	ldr	r2, [pc, #416]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800125e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fcd8 	bl	8000c20 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fcd4 	bl	8000c20 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e207      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0xc0>
 8001292:	e014      	b.n	80012be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fcc4 	bl	8000c20 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fcc0 	bl	8000c20 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e1f3      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0xe8>
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d063      	beq.n	8001392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00b      	beq.n	80012ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d6:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d11c      	bne.n	800131c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d116      	bne.n	800131c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_RCC_OscConfig+0x152>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e1c7      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	e03a      	b.n	8001392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d020      	beq.n	8001366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001324:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <HAL_RCC_OscConfig+0x244>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132a:	f7ff fc79 	bl	8000c20 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001332:	f7ff fc75 	bl	8000c20 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e1a8      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4925      	ldr	r1, [pc, #148]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
 8001364:	e015      	b.n	8001392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_RCC_OscConfig+0x244>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fc58 	bl	8000c20 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001374:	f7ff fc54 	bl	8000c20 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e187      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d036      	beq.n	800140c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d016      	beq.n	80013d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_RCC_OscConfig+0x248>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ac:	f7ff fc38 	bl	8000c20 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc34 	bl	8000c20 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e167      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x200>
 80013d2:	e01b      	b.n	800140c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_RCC_OscConfig+0x248>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fc21 	bl	8000c20 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	e00e      	b.n	8001400 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc1d 	bl	8000c20 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d907      	bls.n	8001400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e150      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	42470000 	.word	0x42470000
 80013fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ea      	bne.n	80013e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8097 	beq.w	8001548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141e:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a7c      	ldr	r2, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	4b77      	ldr	r3, [pc, #476]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d118      	bne.n	8001488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001456:	4b74      	ldr	r3, [pc, #464]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a73      	ldr	r2, [pc, #460]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff fbdd 	bl	8000c20 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146a:	f7ff fbd9 	bl	8000c20 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e10c      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x2ea>
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a63      	ldr	r2, [pc, #396]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	e01c      	b.n	80014d8 <HAL_RCC_OscConfig+0x324>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x30c>
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a5b      	ldr	r2, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0x324>
 80014c0:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
 80014cc:	4b55      	ldr	r3, [pc, #340]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a54      	ldr	r2, [pc, #336]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f023 0304 	bic.w	r3, r3, #4
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d015      	beq.n	800150c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fb9e 	bl	8000c20 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff fb9a 	bl	8000c20 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0cb      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fe:	4b49      	ldr	r3, [pc, #292]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0ee      	beq.n	80014e8 <HAL_RCC_OscConfig+0x334>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150c:	f7ff fb88 	bl	8000c20 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001512:	e00a      	b.n	800152a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff fb84 	bl	8000c20 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0b5      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ee      	bne.n	8001514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a38      	ldr	r2, [pc, #224]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a1 	beq.w	8001694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b08      	cmp	r3, #8
 800155c:	d05c      	beq.n	8001618 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d141      	bne.n	80015ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <HAL_RCC_OscConfig+0x478>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fb58 	bl	8000c20 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fb54 	bl	8000c20 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e087      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69da      	ldr	r2, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	3b01      	subs	r3, #1
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x478>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb2d 	bl	8000c20 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fb29 	bl	8000c20 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e05c      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x416>
 80015e8:	e054      	b.n	8001694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb16 	bl	8000c20 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb12 	bl	8000c20 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e045      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x444>
 8001616:	e03d      	b.n	8001694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e038      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
 8001624:	40023800 	.word	0x40023800
 8001628:	40007000 	.word	0x40007000
 800162c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x4ec>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d028      	beq.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d121      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d11a      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001668:	4293      	cmp	r3, r2
 800166a:	d111      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	3b01      	subs	r3, #1
 800167a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d107      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0cc      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d90c      	bls.n	80016e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0b8      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f8:	4b59      	ldr	r3, [pc, #356]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4a58      	ldr	r2, [pc, #352]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001710:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800171a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	494d      	ldr	r1, [pc, #308]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d044      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d119      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e07f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d003      	beq.n	8001762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175e:	2b03      	cmp	r3, #3
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e06f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e067      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4934      	ldr	r1, [pc, #208]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff fa44 	bl	8000c20 <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff fa40 	bl	8000c20 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e04f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d20c      	bcs.n	80017ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e032      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4916      	ldr	r1, [pc, #88]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	490e      	ldr	r1, [pc, #56]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800182a:	f000 f821 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 800182e:	4602      	mov	r2, r0
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	490a      	ldr	r1, [pc, #40]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 800183c:	5ccb      	ldrb	r3, [r1, r3]
 800183e:	fa22 f303 	lsr.w	r3, r2, r3
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f8d0 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00
 8001860:	40023800 	.word	0x40023800
 8001864:	08006440 	.word	0x08006440
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001874:	b094      	sub	sp, #80	; 0x50
 8001876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
 800187c:	2300      	movs	r3, #0
 800187e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001880:	2300      	movs	r3, #0
 8001882:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001888:	4b79      	ldr	r3, [pc, #484]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d00d      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001894:	2b08      	cmp	r3, #8
 8001896:	f200 80e1 	bhi.w	8001a5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x34>
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x3a>
 80018a2:	e0db      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80018a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018a8:	e0db      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018aa:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x208>)
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ae:	e0d8      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b0:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ba:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d063      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c6:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	099b      	lsrs	r3, r3, #6
 80018cc:	2200      	movs	r2, #0
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80018d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
 80018da:	2300      	movs	r3, #0
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
 80018de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018e2:	4622      	mov	r2, r4
 80018e4:	462b      	mov	r3, r5
 80018e6:	f04f 0000 	mov.w	r0, #0
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	0159      	lsls	r1, r3, #5
 80018f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f4:	0150      	lsls	r0, r2, #5
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4621      	mov	r1, r4
 80018fc:	1a51      	subs	r1, r2, r1
 80018fe:	6139      	str	r1, [r7, #16]
 8001900:	4629      	mov	r1, r5
 8001902:	eb63 0301 	sbc.w	r3, r3, r1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001914:	4659      	mov	r1, fp
 8001916:	018b      	lsls	r3, r1, #6
 8001918:	4651      	mov	r1, sl
 800191a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800191e:	4651      	mov	r1, sl
 8001920:	018a      	lsls	r2, r1, #6
 8001922:	4651      	mov	r1, sl
 8001924:	ebb2 0801 	subs.w	r8, r2, r1
 8001928:	4659      	mov	r1, fp
 800192a:	eb63 0901 	sbc.w	r9, r3, r1
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800193a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800193e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001942:	4690      	mov	r8, r2
 8001944:	4699      	mov	r9, r3
 8001946:	4623      	mov	r3, r4
 8001948:	eb18 0303 	adds.w	r3, r8, r3
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	462b      	mov	r3, r5
 8001950:	eb49 0303 	adc.w	r3, r9, r3
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001962:	4629      	mov	r1, r5
 8001964:	024b      	lsls	r3, r1, #9
 8001966:	4621      	mov	r1, r4
 8001968:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800196c:	4621      	mov	r1, r4
 800196e:	024a      	lsls	r2, r1, #9
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001976:	2200      	movs	r2, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
 800197a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800197c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001980:	f7fe fc78 	bl	8000274 <__aeabi_uldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4613      	mov	r3, r2
 800198a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800198c:	e058      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	2200      	movs	r2, #0
 8001996:	4618      	mov	r0, r3
 8001998:	4611      	mov	r1, r2
 800199a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800199e:	623b      	str	r3, [r7, #32]
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019a8:	4642      	mov	r2, r8
 80019aa:	464b      	mov	r3, r9
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	0159      	lsls	r1, r3, #5
 80019b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ba:	0150      	lsls	r0, r2, #5
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4641      	mov	r1, r8
 80019c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019c6:	4649      	mov	r1, r9
 80019c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019e0:	ebb2 040a 	subs.w	r4, r2, sl
 80019e4:	eb63 050b 	sbc.w	r5, r3, fp
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	00eb      	lsls	r3, r5, #3
 80019f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f6:	00e2      	lsls	r2, r4, #3
 80019f8:	4614      	mov	r4, r2
 80019fa:	461d      	mov	r5, r3
 80019fc:	4643      	mov	r3, r8
 80019fe:	18e3      	adds	r3, r4, r3
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	464b      	mov	r3, r9
 8001a04:	eb45 0303 	adc.w	r3, r5, r3
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a16:	4629      	mov	r1, r5
 8001a18:	028b      	lsls	r3, r1, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a20:	4621      	mov	r1, r4
 8001a22:	028a      	lsls	r2, r1, #10
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	61fa      	str	r2, [r7, #28]
 8001a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a34:	f7fe fc1e 	bl	8000274 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3750      	adds	r7, #80	; 0x50
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	007a1200 	.word	0x007a1200

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	08006450 	.word	0x08006450

08001abc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	220f      	movs	r2, #15
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_RCC_GetClockConfig+0x60>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0207 	and.w	r2, r3, #7
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e041      	b.n	8001bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f839 	bl	8001bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f000 f9ca 	bl	8001ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d001      	beq.n	8001bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e044      	b.n	8001c76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d018      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x6c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c16:	d013      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x6c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00e      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x6c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_TIM_Base_Start_IT+0xb8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x6c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x6c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d111      	bne.n	8001c64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d010      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c62:	e007      	b.n	8001c74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40010000 	.word	0x40010000
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	40000800 	.word	0x40000800
 8001c90:	40000c00 	.word	0x40000c00
 8001c94:	40014000 	.word	0x40014000

08001c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d122      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d11b      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0202 	mvn.w	r2, #2
 8001cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8ee 	bl	8001ebc <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8e0 	bl	8001ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8f1 	bl	8001ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d122      	bne.n	8001d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0204 	mvn.w	r2, #4
 8001d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8c4 	bl	8001ebc <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8b6 	bl	8001ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f8c7 	bl	8001ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0208 	mvn.w	r2, #8
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2204      	movs	r2, #4
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f89a 	bl	8001ebc <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f88c 	bl	8001ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f89d 	bl	8001ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d122      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b10      	cmp	r3, #16
 8001db6:	d11b      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0210 	mvn.w	r2, #16
 8001dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f870 	bl	8001ebc <HAL_TIM_IC_CaptureCallback>
 8001ddc:	e005      	b.n	8001dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f862 	bl	8001ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f873 	bl	8001ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0201 	mvn.w	r2, #1
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fdaa 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	2b80      	cmp	r3, #128	; 0x80
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e34:	2b80      	cmp	r3, #128	; 0x80
 8001e36:	d107      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8e2 	bl	800200c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	2b40      	cmp	r3, #64	; 0x40
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d107      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f838 	bl	8001ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0220 	mvn.w	r2, #32
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8ac 	bl	8001ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a34      	ldr	r2, [pc, #208]	; (8001fdc <TIM_Base_SetConfig+0xe4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00f      	beq.n	8001f30 <TIM_Base_SetConfig+0x38>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d00b      	beq.n	8001f30 <TIM_Base_SetConfig+0x38>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a31      	ldr	r2, [pc, #196]	; (8001fe0 <TIM_Base_SetConfig+0xe8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <TIM_Base_SetConfig+0x38>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a30      	ldr	r2, [pc, #192]	; (8001fe4 <TIM_Base_SetConfig+0xec>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d003      	beq.n	8001f30 <TIM_Base_SetConfig+0x38>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a2f      	ldr	r2, [pc, #188]	; (8001fe8 <TIM_Base_SetConfig+0xf0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d108      	bne.n	8001f42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <TIM_Base_SetConfig+0xe4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01b      	beq.n	8001f82 <TIM_Base_SetConfig+0x8a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f50:	d017      	beq.n	8001f82 <TIM_Base_SetConfig+0x8a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <TIM_Base_SetConfig+0xe8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <TIM_Base_SetConfig+0x8a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <TIM_Base_SetConfig+0xec>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00f      	beq.n	8001f82 <TIM_Base_SetConfig+0x8a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <TIM_Base_SetConfig+0xf0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00b      	beq.n	8001f82 <TIM_Base_SetConfig+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <TIM_Base_SetConfig+0xf4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d007      	beq.n	8001f82 <TIM_Base_SetConfig+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <TIM_Base_SetConfig+0xf8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d003      	beq.n	8001f82 <TIM_Base_SetConfig+0x8a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <TIM_Base_SetConfig+0xfc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <TIM_Base_SetConfig+0xe4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d103      	bne.n	8001fc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	615a      	str	r2, [r3, #20]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40014000 	.word	0x40014000
 8001ff0:	40014400 	.word	0x40014400
 8001ff4:	40014800 	.word	0x40014800

08001ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 0208 	add.w	r2, r3, #8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f103 0208 	add.w	r2, r3, #8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f103 0208 	add.w	r2, r3, #8
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d103      	bne.n	80020e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e00c      	b.n	80020fc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3308      	adds	r3, #8
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e002      	b.n	80020f0 <vListInsert+0x2e>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d2f6      	bcs.n	80020ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6852      	ldr	r2, [r2, #4]
 8002154:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	d103      	bne.n	8002168 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	1e5a      	subs	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002192:	2301      	movs	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <xQueueGenericReset+0x2e>
        __asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	60fb      	str	r3, [r7, #12]
    }
 80021b2:	bf00      	nop
 80021b4:	e7fe      	b.n	80021b4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d05d      	beq.n	8002278 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d059      	beq.n	8002278 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021cc:	2100      	movs	r1, #0
 80021ce:	fba3 2302 	umull	r2, r3, r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d000      	beq.n	80021d8 <xQueueGenericReset+0x50>
 80021d6:	2101      	movs	r1, #1
 80021d8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d14c      	bne.n	8002278 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80021de:	f002 f981 	bl	80044e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	6939      	ldr	r1, [r7, #16]
 80021ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	441a      	add	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	2200      	movs	r2, #0
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	3b01      	subs	r3, #1
 8002210:	6939      	ldr	r1, [r7, #16]
 8002212:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	441a      	add	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	22ff      	movs	r2, #255	; 0xff
 8002222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	22ff      	movs	r2, #255	; 0xff
 800222a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d114      	bne.n	800225e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01a      	beq.n	8002272 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	3310      	adds	r3, #16
 8002240:	4618      	mov	r0, r3
 8002242:	f001 f877 	bl	8003334 <xTaskRemoveFromEventList>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <xQueueGenericReset+0x11c>)
 800224e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	e009      	b.n	8002272 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	3310      	adds	r3, #16
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fedc 	bl	8002020 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	3324      	adds	r3, #36	; 0x24
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fed7 	bl	8002020 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002272:	f002 f967 	bl	8004544 <vPortExitCritical>
 8002276:	e001      	b.n	800227c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <xQueueGenericReset+0x110>
        __asm volatile
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	60bb      	str	r3, [r7, #8]
    }
 8002294:	bf00      	nop
 8002296:	e7fe      	b.n	8002296 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002298:	697b      	ldr	r3, [r7, #20]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000ed04 	.word	0xe000ed04

080022a8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d02e      	beq.n	800231e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022c0:	2100      	movs	r1, #0
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	fba3 2302 	umull	r2, r3, r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d000      	beq.n	80022d0 <xQueueGenericCreate+0x28>
 80022ce:	2101      	movs	r1, #1
 80022d0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d123      	bne.n	800231e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022de:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022e2:	d81c      	bhi.n	800231e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	3350      	adds	r3, #80	; 0x50
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fa22 	bl	800473c <pvPortMalloc>
 80022f8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01c      	beq.n	800233a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3350      	adds	r3, #80	; 0x50
 8002308:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800230a:	79fa      	ldrb	r2, [r7, #7]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f814 	bl	8002344 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800231c:	e00d      	b.n	800233a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <xQueueGenericCreate+0x92>
        __asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	613b      	str	r3, [r7, #16]
    }
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800233a:	69fb      	ldr	r3, [r7, #28]
    }
 800233c:	4618      	mov	r0, r3
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d103      	bne.n	8002360 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e002      	b.n	8002366 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002372:	2101      	movs	r1, #1
 8002374:	69b8      	ldr	r0, [r7, #24]
 8002376:	f7ff ff07 	bl	8002188 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	2073      	movs	r0, #115	; 0x73
 800238a:	f003 f89f 	bl	80054cc <SEGGER_SYSVIEW_RecordU32x3>
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b08f      	sub	sp, #60	; 0x3c
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <xQueueReceive+0x30>
        __asm volatile
 80023b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b6:	f383 8811 	msr	BASEPRI, r3
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	623b      	str	r3, [r7, #32]
    }
 80023c4:	bf00      	nop
 80023c6:	e7fe      	b.n	80023c6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <xQueueReceive+0x3e>
 80023ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <xQueueReceive+0x42>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <xQueueReceive+0x44>
 80023da:	2300      	movs	r3, #0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <xQueueReceive+0x5e>
        __asm volatile
 80023e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e4:	f383 8811 	msr	BASEPRI, r3
 80023e8:	f3bf 8f6f 	isb	sy
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	61fb      	str	r3, [r7, #28]
    }
 80023f2:	bf00      	nop
 80023f4:	e7fe      	b.n	80023f4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023f6:	f001 f9af 	bl	8003758 <xTaskGetSchedulerState>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <xQueueReceive+0x6e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <xQueueReceive+0x72>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <xQueueReceive+0x74>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <xQueueReceive+0x8e>
        __asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	61bb      	str	r3, [r7, #24]
    }
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002426:	f002 f85d 	bl	80044e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d02f      	beq.n	8002496 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800243a:	f000 f8bd 	bl	80025b8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	4618      	mov	r0, r3
 8002442:	f003 fdf9 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 8002446:	4604      	mov	r4, r0
 8002448:	2000      	movs	r0, #0
 800244a:	f003 fdf5 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 800244e:	4602      	mov	r2, r0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2101      	movs	r1, #1
 8002454:	9100      	str	r1, [sp, #0]
 8002456:	4621      	mov	r1, r4
 8002458:	205c      	movs	r0, #92	; 0x5c
 800245a:	f003 f8ad 	bl	80055b8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	1e5a      	subs	r2, r3, #1
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00f      	beq.n	800248e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	3310      	adds	r3, #16
 8002472:	4618      	mov	r0, r3
 8002474:	f000 ff5e 	bl	8003334 <xTaskRemoveFromEventList>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800247e:	4b4d      	ldr	r3, [pc, #308]	; (80025b4 <xQueueReceive+0x21c>)
 8002480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800248e:	f002 f859 	bl	8004544 <vPortExitCritical>
                return pdPASS;
 8002492:	2301      	movs	r3, #1
 8002494:	e08a      	b.n	80025ac <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d113      	bne.n	80024c4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800249c:	f002 f852 	bl	8004544 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fdc8 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 80024a8:	4604      	mov	r4, r0
 80024aa:	2000      	movs	r0, #0
 80024ac:	f003 fdc4 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 80024b0:	4602      	mov	r2, r0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2101      	movs	r1, #1
 80024b6:	9100      	str	r1, [sp, #0]
 80024b8:	4621      	mov	r1, r4
 80024ba:	205c      	movs	r0, #92	; 0x5c
 80024bc:	f003 f87c 	bl	80055b8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e073      	b.n	80025ac <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f001 f808 	bl	80034e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024d8:	f002 f834 	bl	8004544 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024dc:	f000 fc1c 	bl	8002d18 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024e0:	f002 f800 	bl	80044e4 <vPortEnterCritical>
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d103      	bne.n	80024fa <xQueueReceive+0x162>
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002500:	b25b      	sxtb	r3, r3
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002506:	d103      	bne.n	8002510 <xQueueReceive+0x178>
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002510:	f002 f818 	bl	8004544 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002514:	1d3a      	adds	r2, r7, #4
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fff7 	bl	8003510 <xTaskCheckForTimeOut>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d124      	bne.n	8002572 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800252a:	f000 f8bd 	bl	80026a8 <prvIsQueueEmpty>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d018      	beq.n	8002566 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	3324      	adds	r3, #36	; 0x24
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fe8d 	bl	800325c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002544:	f000 f85e 	bl	8002604 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002548:	f000 fbf4 	bl	8002d34 <xTaskResumeAll>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f47f af69 	bne.w	8002426 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <xQueueReceive+0x21c>)
 8002556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	e75f      	b.n	8002426 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002568:	f000 f84c 	bl	8002604 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800256c:	f000 fbe2 	bl	8002d34 <xTaskResumeAll>
 8002570:	e759      	b.n	8002426 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002574:	f000 f846 	bl	8002604 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002578:	f000 fbdc 	bl	8002d34 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800257c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800257e:	f000 f893 	bl	80026a8 <prvIsQueueEmpty>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	f43f af4e 	beq.w	8002426 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fd53 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 8002592:	4604      	mov	r4, r0
 8002594:	2000      	movs	r0, #0
 8002596:	f003 fd4f 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 800259a:	4602      	mov	r2, r0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2101      	movs	r1, #1
 80025a0:	9100      	str	r1, [sp, #0]
 80025a2:	4621      	mov	r1, r4
 80025a4:	205c      	movs	r0, #92	; 0x5c
 80025a6:	f003 f807 	bl	80055b8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80025aa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3734      	adds	r7, #52	; 0x34
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}
 80025b4:	e000ed04 	.word	0xe000ed04

080025b8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d018      	beq.n	80025fc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	441a      	add	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d303      	bcc.n	80025ec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68d9      	ldr	r1, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	461a      	mov	r2, r3
 80025f6:	6838      	ldr	r0, [r7, #0]
 80025f8:	f003 fe9a 	bl	8006330 <memcpy>
    }
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800260c:	f001 ff6a 	bl	80044e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002616:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002618:	e011      	b.n	800263e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2b00      	cmp	r3, #0
 8002620:	d012      	beq.n	8002648 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3324      	adds	r3, #36	; 0x24
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fe84 	bl	8003334 <xTaskRemoveFromEventList>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002632:	f000 ffd3 	bl	80035dc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	3b01      	subs	r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	dce9      	bgt.n	800261a <prvUnlockQueue+0x16>
 8002646:	e000      	b.n	800264a <prvUnlockQueue+0x46>
                    break;
 8002648:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	22ff      	movs	r2, #255	; 0xff
 800264e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002652:	f001 ff77 	bl	8004544 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002656:	f001 ff45 	bl	80044e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002660:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002662:	e011      	b.n	8002688 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d012      	beq.n	8002692 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3310      	adds	r3, #16
 8002670:	4618      	mov	r0, r3
 8002672:	f000 fe5f 	bl	8003334 <xTaskRemoveFromEventList>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800267c:	f000 ffae 	bl	80035dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002680:	7bbb      	ldrb	r3, [r7, #14]
 8002682:	3b01      	subs	r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800268c:	2b00      	cmp	r3, #0
 800268e:	dce9      	bgt.n	8002664 <prvUnlockQueue+0x60>
 8002690:	e000      	b.n	8002694 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002692:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	22ff      	movs	r2, #255	; 0xff
 8002698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800269c:	f001 ff52 	bl	8004544 <vPortExitCritical>
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026b0:	f001 ff18 	bl	80044e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026bc:	2301      	movs	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e001      	b.n	80026c6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026c6:	f001 ff3d 	bl	8004544 <vPortExitCritical>

    return xReturn;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <vQueueAddToRegistry+0x2a>
        __asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	60fb      	str	r3, [r7, #12]
    }
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d024      	beq.n	800274e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e01e      	b.n	8002748 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <vQueueAddToRegistry+0xa8>)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d105      	bne.n	8002726 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4a17      	ldr	r2, [pc, #92]	; (800277c <vQueueAddToRegistry+0xa8>)
 8002720:	4413      	add	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
                    break;
 8002724:	e013      	b.n	800274e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <vQueueAddToRegistry+0x6e>
 800272c:	4a13      	ldr	r2, [pc, #76]	; (800277c <vQueueAddToRegistry+0xa8>)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4a0f      	ldr	r2, [pc, #60]	; (800277c <vQueueAddToRegistry+0xa8>)
 800273e:	4413      	add	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3301      	adds	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b07      	cmp	r3, #7
 800274c:	d9dd      	bls.n	800270a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00f      	beq.n	8002774 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fc68 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 8002768:	4601      	mov	r1, r0
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	2071      	movs	r0, #113	; 0x71
 8002770:	f002 fe52 	bl	8005418 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000008c 	.word	0x2000008c

08002780 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002790:	f001 fea8 	bl	80044e4 <vPortEnterCritical>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800279a:	b25b      	sxtb	r3, r3
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d103      	bne.n	80027aa <vQueueWaitForMessageRestricted+0x2a>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d103      	bne.n	80027c0 <vQueueWaitForMessageRestricted+0x40>
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027c0:	f001 fec0 	bl	8004544 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3324      	adds	r3, #36	; 0x24
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fd65 	bl	80032a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff12 	bl	8002604 <prvUnlockQueue>
    }
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 ff9d 	bl	800473c <pvPortMalloc>
 8002802:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800280a:	2058      	movs	r0, #88	; 0x58
 800280c:	f001 ff96 	bl	800473c <pvPortMalloc>
 8002810:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002818:	2258      	movs	r2, #88	; 0x58
 800281a:	2100      	movs	r1, #0
 800281c:	69f8      	ldr	r0, [r7, #28]
 800281e:	f003 fd95 	bl	800634c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
 8002828:	e005      	b.n	8002836 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f002 f840 	bl	80048b0 <vPortFree>
 8002830:	e001      	b.n	8002836 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800283c:	88fa      	ldrh	r2, [r7, #6]
 800283e:	2300      	movs	r3, #0
 8002840:	9303      	str	r3, [sp, #12]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f80e 	bl	8002874 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002858:	69f8      	ldr	r0, [r7, #28]
 800285a:	f000 f899 	bl	8002990 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800285e:	2301      	movs	r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	e002      	b.n	800286a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800286a:	69bb      	ldr	r3, [r7, #24]
    }
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	461a      	mov	r2, r3
 800288c:	21a5      	movs	r1, #165	; 0xa5
 800288e:	f003 fd5d 	bl	800634c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800289c:	3b01      	subs	r3, #1
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <prvInitialiseNewTask+0x58>
        __asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	617b      	str	r3, [r7, #20]
    }
 80028c8:	bf00      	nop
 80028ca:	e7fe      	b.n	80028ca <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01e      	beq.n	8002910 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	e012      	b.n	80028fe <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	7819      	ldrb	r1, [r3, #0]
 80028e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	3334      	adds	r3, #52	; 0x34
 80028e8:	460a      	mov	r2, r1
 80028ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3301      	adds	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	2b09      	cmp	r3, #9
 8002902:	d9e9      	bls.n	80028d8 <prvInitialiseNewTask+0x64>
 8002904:	e000      	b.n	8002908 <prvInitialiseNewTask+0x94>
            {
                break;
 8002906:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	2b04      	cmp	r3, #4
 8002914:	d90a      	bls.n	800292c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	613b      	str	r3, [r7, #16]
    }
 8002928:	bf00      	nop
 800292a:	e7fe      	b.n	800292a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	2b04      	cmp	r3, #4
 8002930:	d901      	bls.n	8002936 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002932:	2304      	movs	r3, #4
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002940:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	3304      	adds	r3, #4
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fb8a 	bl	8002060 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	3318      	adds	r3, #24
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fb85 	bl	8002060 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800295a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	f1c3 0205 	rsb	r2, r3, #5
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	68f9      	ldr	r1, [r7, #12]
 8002970:	69b8      	ldr	r0, [r7, #24]
 8002972:	f001 fc09 	bl	8004188 <pxPortInitialiseStack>
 8002976:	4602      	mov	r2, r0
 8002978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002986:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002988:	bf00      	nop
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af02      	add	r7, sp, #8
 8002996:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002998:	f001 fda4 	bl	80044e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800299c:	4b4f      	ldr	r3, [pc, #316]	; (8002adc <prvAddNewTaskToReadyList+0x14c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a4e      	ldr	r2, [pc, #312]	; (8002adc <prvAddNewTaskToReadyList+0x14c>)
 80029a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029a6:	4b4e      	ldr	r3, [pc, #312]	; (8002ae0 <prvAddNewTaskToReadyList+0x150>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029ae:	4a4c      	ldr	r2, [pc, #304]	; (8002ae0 <prvAddNewTaskToReadyList+0x150>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029b4:	4b49      	ldr	r3, [pc, #292]	; (8002adc <prvAddNewTaskToReadyList+0x14c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d110      	bne.n	80029de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029bc:	f000 fe32 	bl	8003624 <prvInitialiseTaskLists>
 80029c0:	e00d      	b.n	80029de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029c2:	4b48      	ldr	r3, [pc, #288]	; (8002ae4 <prvAddNewTaskToReadyList+0x154>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029ca:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <prvAddNewTaskToReadyList+0x150>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d802      	bhi.n	80029de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029d8:	4a41      	ldr	r2, [pc, #260]	; (8002ae0 <prvAddNewTaskToReadyList+0x150>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029de:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <prvAddNewTaskToReadyList+0x158>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	4a40      	ldr	r2, [pc, #256]	; (8002ae8 <prvAddNewTaskToReadyList+0x158>)
 80029e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029e8:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <prvAddNewTaskToReadyList+0x158>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <prvAddNewTaskToReadyList+0x94>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fa57 	bl	8005eac <SEGGER_SYSVIEW_OnTaskCreate>
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	461d      	mov	r5, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461c      	mov	r4, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	1ae3      	subs	r3, r4, r3
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	462b      	mov	r3, r5
 8002a20:	f002 f858 	bl	8004ad4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fac4 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	2201      	movs	r2, #1
 8002a32:	409a      	lsls	r2, r3
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <prvAddNewTaskToReadyList+0x15c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <prvAddNewTaskToReadyList+0x15c>)
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a42:	492b      	ldr	r1, [pc, #172]	; (8002af0 <prvAddNewTaskToReadyList+0x160>)
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3304      	adds	r3, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	3204      	adds	r2, #4
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <prvAddNewTaskToReadyList+0x160>)
 8002a82:	441a      	add	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	615a      	str	r2, [r3, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8c:	4918      	ldr	r1, [pc, #96]	; (8002af0 <prvAddNewTaskToReadyList+0x160>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	4814      	ldr	r0, [pc, #80]	; (8002af0 <prvAddNewTaskToReadyList+0x160>)
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4403      	add	r3, r0
 8002aa8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002aaa:	f001 fd4b 	bl	8004544 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <prvAddNewTaskToReadyList+0x154>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00e      	beq.n	8002ad4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <prvAddNewTaskToReadyList+0x150>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d207      	bcs.n	8002ad4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <prvAddNewTaskToReadyList+0x164>)
 8002ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bdb0      	pop	{r4, r5, r7, pc}
 8002adc:	200001a4 	.word	0x200001a4
 8002ae0:	200000cc 	.word	0x200000cc
 8002ae4:	200001b0 	.word	0x200001b0
 8002ae8:	200001c0 	.word	0x200001c0
 8002aec:	200001ac 	.word	0x200001ac
 8002af0:	200000d0 	.word	0x200000d0
 8002af4:	e000ed04 	.word	0xe000ed04

08002af8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002b00:	f001 fcf0 	bl	80044e4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <vTaskDelete+0x18>
 8002b0a:	4b48      	ldr	r3, [pc, #288]	; (8002c2c <vTaskDelete+0x134>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e000      	b.n	8002b12 <vTaskDelete+0x1a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fb0b 	bl	8002134 <uxListRemove>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d115      	bne.n	8002b50 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	4941      	ldr	r1, [pc, #260]	; (8002c30 <vTaskDelete+0x138>)
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <vTaskDelete+0x58>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	2201      	movs	r2, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43da      	mvns	r2, r3
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <vTaskDelete+0x13c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	4a39      	ldr	r2, [pc, #228]	; (8002c34 <vTaskDelete+0x13c>)
 8002b4e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fae9 	bl	8002134 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002b62:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <vTaskDelete+0x140>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	4a33      	ldr	r2, [pc, #204]	; (8002c38 <vTaskDelete+0x140>)
 8002b6a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <vTaskDelete+0x134>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d118      	bne.n	8002ba8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	482f      	ldr	r0, [pc, #188]	; (8002c3c <vTaskDelete+0x144>)
 8002b7e:	f7ff fa7c 	bl	800207a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <vTaskDelete+0x148>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	4a2d      	ldr	r2, [pc, #180]	; (8002c40 <vTaskDelete+0x148>)
 8002b8a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 fa52 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4619      	mov	r1, r3
 8002b98:	2022      	movs	r0, #34	; 0x22
 8002b9a:	f002 fc01 	bl	80053a0 <SEGGER_SYSVIEW_RecordU32>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 ffff 	bl	8004ba4 <SYSVIEW_DeleteTask>
 8002ba6:	e013      	b.n	8002bd0 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002ba8:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <vTaskDelete+0x14c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	4a25      	ldr	r2, [pc, #148]	; (8002c44 <vTaskDelete+0x14c>)
 8002bb0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 fa3f 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	2022      	movs	r0, #34	; 0x22
 8002bc0:	f002 fbee 	bl	80053a0 <SEGGER_SYSVIEW_RecordU32>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 ffec 	bl	8004ba4 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002bcc:	f000 fda8 	bl	8003720 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002bd0:	f001 fcb8 	bl	8004544 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <vTaskDelete+0x134>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d002      	beq.n	8002be4 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fd8e 	bl	8003700 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <vTaskDelete+0x150>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01b      	beq.n	8002c24 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <vTaskDelete+0x134>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d116      	bne.n	8002c24 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <vTaskDelete+0x154>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <vTaskDelete+0x11c>
        __asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	60bb      	str	r3, [r7, #8]
    }
 8002c10:	bf00      	nop
 8002c12:	e7fe      	b.n	8002c12 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <vTaskDelete+0x158>)
 8002c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	200000cc 	.word	0x200000cc
 8002c30:	200000d0 	.word	0x200000d0
 8002c34:	200001ac 	.word	0x200001ac
 8002c38:	200001c0 	.word	0x200001c0
 8002c3c:	20000178 	.word	0x20000178
 8002c40:	2000018c 	.word	0x2000018c
 8002c44:	200001a4 	.word	0x200001a4
 8002c48:	200001b0 	.word	0x200001b0
 8002c4c:	200001cc 	.word	0x200001cc
 8002c50:	e000ed04 	.word	0xe000ed04

08002c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002c5a:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <vTaskStartScheduler+0xa4>)
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2300      	movs	r3, #0
 8002c64:	2282      	movs	r2, #130	; 0x82
 8002c66:	4925      	ldr	r1, [pc, #148]	; (8002cfc <vTaskStartScheduler+0xa8>)
 8002c68:	4825      	ldr	r0, [pc, #148]	; (8002d00 <vTaskStartScheduler+0xac>)
 8002c6a:	f7ff fdbd 	bl	80027e8 <xTaskCreate>
 8002c6e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002c76:	f001 f803 	bl	8003c80 <xTimerCreateTimerTask>
 8002c7a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d124      	bne.n	8002ccc <vTaskStartScheduler+0x78>
        __asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60bb      	str	r3, [r7, #8]
    }
 8002c94:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <vTaskStartScheduler+0xb0>)
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <vTaskStartScheduler+0xb4>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <vTaskStartScheduler+0xb8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <vTaskStartScheduler+0xbc>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <vTaskStartScheduler+0xa4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d102      	bne.n	8002cbc <vTaskStartScheduler+0x68>
 8002cb6:	f003 f8dd 	bl	8005e74 <SEGGER_SYSVIEW_OnIdle>
 8002cba:	e004      	b.n	8002cc6 <vTaskStartScheduler+0x72>
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <vTaskStartScheduler+0xbc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 f935 	bl	8005f30 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002cc6:	f001 faed 	bl	80042a4 <xPortStartScheduler>
 8002cca:	e00e      	b.n	8002cea <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d10a      	bne.n	8002cea <vTaskStartScheduler+0x96>
        __asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	607b      	str	r3, [r7, #4]
    }
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <vTaskStartScheduler+0xc0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200001c8 	.word	0x200001c8
 8002cfc:	080063b8 	.word	0x080063b8
 8002d00:	080035f5 	.word	0x080035f5
 8002d04:	200001c4 	.word	0x200001c4
 8002d08:	200001b0 	.word	0x200001b0
 8002d0c:	200001a8 	.word	0x200001a8
 8002d10:	200000cc 	.word	0x200000cc
 8002d14:	2000000c 	.word	0x2000000c

08002d18 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <vTaskSuspendAll+0x18>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	4a03      	ldr	r2, [pc, #12]	; (8002d30 <vTaskSuspendAll+0x18>)
 8002d24:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	200001cc 	.word	0x200001cc

08002d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d42:	4b73      	ldr	r3, [pc, #460]	; (8002f10 <xTaskResumeAll+0x1dc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	607b      	str	r3, [r7, #4]
    }
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d60:	f001 fbc0 	bl	80044e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d64:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <xTaskResumeAll+0x1dc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	4a69      	ldr	r2, [pc, #420]	; (8002f10 <xTaskResumeAll+0x1dc>)
 8002d6c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6e:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <xTaskResumeAll+0x1dc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 80c4 	bne.w	8002f00 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d78:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <xTaskResumeAll+0x1e0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80bf 	beq.w	8002f00 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d82:	e08e      	b.n	8002ea2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d84:	4b64      	ldr	r3, [pc, #400]	; (8002f18 <xTaskResumeAll+0x1e4>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	6a12      	ldr	r2, [r2, #32]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	69d2      	ldr	r2, [r2, #28]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3318      	adds	r3, #24
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d103      	bne.n	8002dba <xTaskResumeAll+0x86>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	6a1a      	ldr	r2, [r3, #32]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	1e5a      	subs	r2, r3, #1
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	68d2      	ldr	r2, [r2, #12]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	6892      	ldr	r2, [r2, #8]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3304      	adds	r3, #4
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d103      	bne.n	8002df8 <xTaskResumeAll+0xc4>
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	615a      	str	r2, [r3, #20]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	1e5a      	subs	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f003 f8d2 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	2201      	movs	r2, #1
 8002e16:	409a      	lsls	r2, r3
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <xTaskResumeAll+0x1e8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <xTaskResumeAll+0x1e8>)
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e26:	493e      	ldr	r1, [pc, #248]	; (8002f20 <xTaskResumeAll+0x1ec>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3304      	adds	r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	3204      	adds	r2, #4
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	1d1a      	adds	r2, r3, #4
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4a2e      	ldr	r2, [pc, #184]	; (8002f20 <xTaskResumeAll+0x1ec>)
 8002e66:	441a      	add	r2, r3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	615a      	str	r2, [r3, #20]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	492b      	ldr	r1, [pc, #172]	; (8002f20 <xTaskResumeAll+0x1ec>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1c59      	adds	r1, r3, #1
 8002e80:	4827      	ldr	r0, [pc, #156]	; (8002f20 <xTaskResumeAll+0x1ec>)
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4403      	add	r3, r0
 8002e8c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <xTaskResumeAll+0x1f0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d302      	bcc.n	8002ea2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <xTaskResumeAll+0x1f4>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <xTaskResumeAll+0x1e4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f47f af6c 	bne.w	8002d84 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002eb2:	f000 fc35 	bl	8003720 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <xTaskResumeAll+0x1f8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d010      	beq.n	8002ee4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ec2:	f000 f847 	bl	8002f54 <xTaskIncrementTick>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <xTaskResumeAll+0x1f4>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f1      	bne.n	8002ec2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <xTaskResumeAll+0x1f8>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <xTaskResumeAll+0x1f4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002eec:	2301      	movs	r3, #1
 8002eee:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <xTaskResumeAll+0x1fc>)
 8002ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f00:	f001 fb20 	bl	8004544 <vPortExitCritical>

    return xAlreadyYielded;
 8002f04:	69bb      	ldr	r3, [r7, #24]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200001cc 	.word	0x200001cc
 8002f14:	200001a4 	.word	0x200001a4
 8002f18:	20000164 	.word	0x20000164
 8002f1c:	200001ac 	.word	0x200001ac
 8002f20:	200000d0 	.word	0x200000d0
 8002f24:	200000cc 	.word	0x200000cc
 8002f28:	200001b8 	.word	0x200001b8
 8002f2c:	200001b4 	.word	0x200001b4
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <xTaskGetTickCount+0x1c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f40:	687b      	ldr	r3, [r7, #4]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200001a8 	.word	0x200001a8

08002f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f5e:	4b7f      	ldr	r3, [pc, #508]	; (800315c <xTaskIncrementTick+0x208>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 80f0 	bne.w	8003148 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f68:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <xTaskIncrementTick+0x20c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f70:	4a7b      	ldr	r2, [pc, #492]	; (8003160 <xTaskIncrementTick+0x20c>)
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d120      	bne.n	8002fbe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f7c:	4b79      	ldr	r3, [pc, #484]	; (8003164 <xTaskIncrementTick+0x210>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <xTaskIncrementTick+0x48>
        __asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	607b      	str	r3, [r7, #4]
    }
 8002f98:	bf00      	nop
 8002f9a:	e7fe      	b.n	8002f9a <xTaskIncrementTick+0x46>
 8002f9c:	4b71      	ldr	r3, [pc, #452]	; (8003164 <xTaskIncrementTick+0x210>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	4b71      	ldr	r3, [pc, #452]	; (8003168 <xTaskIncrementTick+0x214>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6f      	ldr	r2, [pc, #444]	; (8003164 <xTaskIncrementTick+0x210>)
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4a6f      	ldr	r2, [pc, #444]	; (8003168 <xTaskIncrementTick+0x214>)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b6e      	ldr	r3, [pc, #440]	; (800316c <xTaskIncrementTick+0x218>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	4a6d      	ldr	r2, [pc, #436]	; (800316c <xTaskIncrementTick+0x218>)
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	f000 fbb1 	bl	8003720 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fbe:	4b6c      	ldr	r3, [pc, #432]	; (8003170 <xTaskIncrementTick+0x21c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a3a      	ldr	r2, [r7, #32]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	f0c0 80aa 	bcc.w	800311e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fca:	4b66      	ldr	r3, [pc, #408]	; (8003164 <xTaskIncrementTick+0x210>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd4:	4b66      	ldr	r3, [pc, #408]	; (8003170 <xTaskIncrementTick+0x21c>)
 8002fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fda:	601a      	str	r2, [r3, #0]
                    break;
 8002fdc:	e09f      	b.n	800311e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fde:	4b61      	ldr	r3, [pc, #388]	; (8003164 <xTaskIncrementTick+0x210>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002fee:	6a3a      	ldr	r2, [r7, #32]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d203      	bcs.n	8002ffe <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ff6:	4a5e      	ldr	r2, [pc, #376]	; (8003170 <xTaskIncrementTick+0x21c>)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002ffc:	e08f      	b.n	800311e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	68d2      	ldr	r2, [r2, #12]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	6892      	ldr	r2, [r2, #8]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	3304      	adds	r3, #4
 8003020:	429a      	cmp	r2, r3
 8003022:	d103      	bne.n	800302c <xTaskIncrementTick+0xd8>
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2200      	movs	r2, #0
 8003030:	615a      	str	r2, [r3, #20]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01e      	beq.n	8003082 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	6a12      	ldr	r2, [r2, #32]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	69d2      	ldr	r2, [r2, #28]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	3318      	adds	r3, #24
 8003066:	429a      	cmp	r2, r3
 8003068:	d103      	bne.n	8003072 <xTaskIncrementTick+0x11e>
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2200      	movs	r2, #0
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	1e5a      	subs	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4618      	mov	r0, r3
 8003086:	f002 ff95 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	2201      	movs	r2, #1
 8003090:	409a      	lsls	r2, r3
 8003092:	4b38      	ldr	r3, [pc, #224]	; (8003174 <xTaskIncrementTick+0x220>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	4a36      	ldr	r2, [pc, #216]	; (8003174 <xTaskIncrementTick+0x220>)
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	4935      	ldr	r1, [pc, #212]	; (8003178 <xTaskIncrementTick+0x224>)
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3304      	adds	r3, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	3204      	adds	r2, #4
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	1d1a      	adds	r2, r3, #4
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4a26      	ldr	r2, [pc, #152]	; (8003178 <xTaskIncrementTick+0x224>)
 80030e0:	441a      	add	r2, r3
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	615a      	str	r2, [r3, #20]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ea:	4923      	ldr	r1, [pc, #140]	; (8003178 <xTaskIncrementTick+0x224>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	1c59      	adds	r1, r3, #1
 80030fa:	481f      	ldr	r0, [pc, #124]	; (8003178 <xTaskIncrementTick+0x224>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4403      	add	r3, r0
 8003106:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <xTaskIncrementTick+0x228>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	429a      	cmp	r2, r3
 8003114:	f67f af59 	bls.w	8002fca <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003118:	2301      	movs	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800311c:	e755      	b.n	8002fca <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <xTaskIncrementTick+0x228>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003124:	4914      	ldr	r1, [pc, #80]	; (8003178 <xTaskIncrementTick+0x224>)
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d901      	bls.n	800313a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003136:	2301      	movs	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <xTaskIncrementTick+0x22c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003142:	2301      	movs	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	e004      	b.n	8003152 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003148:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <xTaskIncrementTick+0x230>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <xTaskIncrementTick+0x230>)
 8003150:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003154:	4618      	mov	r0, r3
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	200001cc 	.word	0x200001cc
 8003160:	200001a8 	.word	0x200001a8
 8003164:	2000015c 	.word	0x2000015c
 8003168:	20000160 	.word	0x20000160
 800316c:	200001bc 	.word	0x200001bc
 8003170:	200001c4 	.word	0x200001c4
 8003174:	200001ac 	.word	0x200001ac
 8003178:	200000d0 	.word	0x200000d0
 800317c:	200000cc 	.word	0x200000cc
 8003180:	200001b8 	.word	0x200001b8
 8003184:	200001b4 	.word	0x200001b4

08003188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <vTaskSwitchContext+0xbc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <vTaskSwitchContext+0xc0>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800319c:	e04d      	b.n	800323a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <vTaskSwitchContext+0xc0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a4:	4b29      	ldr	r3, [pc, #164]	; (800324c <vTaskSwitchContext+0xc4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031b2:	7afb      	ldrb	r3, [r7, #11]
 80031b4:	f1c3 031f 	rsb	r3, r3, #31
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	4925      	ldr	r1, [pc, #148]	; (8003250 <vTaskSwitchContext+0xc8>)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	607b      	str	r3, [r7, #4]
    }
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <vTaskSwitchContext+0x5a>
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a18      	ldr	r2, [pc, #96]	; (8003250 <vTaskSwitchContext+0xc8>)
 80031f0:	4413      	add	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3308      	adds	r3, #8
 8003206:	429a      	cmp	r2, r3
 8003208:	d104      	bne.n	8003214 <vTaskSwitchContext+0x8c>
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <vTaskSwitchContext+0xcc>)
 800321c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <vTaskSwitchContext+0xcc>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <vTaskSwitchContext+0xd0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d102      	bne.n	8003230 <vTaskSwitchContext+0xa8>
 800322a:	f002 fe23 	bl	8005e74 <SEGGER_SYSVIEW_OnIdle>
}
 800322e:	e004      	b.n	800323a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <vTaskSwitchContext+0xcc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f002 fe7b 	bl	8005f30 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200001cc 	.word	0x200001cc
 8003248:	200001b8 	.word	0x200001b8
 800324c:	200001ac 	.word	0x200001ac
 8003250:	200000d0 	.word	0x200000d0
 8003254:	200000cc 	.word	0x200000cc
 8003258:	200001c8 	.word	0x200001c8

0800325c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	60fb      	str	r3, [r7, #12]
    }
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <vTaskPlaceOnEventList+0x44>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3318      	adds	r3, #24
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe ff19 	bl	80020c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003290:	2101      	movs	r1, #1
 8003292:	6838      	ldr	r0, [r7, #0]
 8003294:	f000 fc74 	bl	8003b80 <prvAddCurrentTaskToDelayedList>
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200000cc 	.word	0x200000cc

080032a4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	613b      	str	r3, [r7, #16]
    }
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	61da      	str	r2, [r3, #28]
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	621a      	str	r2, [r3, #32]
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	3218      	adds	r2, #24
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f103 0218 	add.w	r2, r3, #24
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
 8003318:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800331a:	2024      	movs	r0, #36	; 0x24
 800331c:	f002 f822 	bl	8005364 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	68b8      	ldr	r0, [r7, #8]
 8003324:	f000 fc2c 	bl	8003b80 <prvAddCurrentTaskToDelayedList>
    }
 8003328:	bf00      	nop
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200000cc 	.word	0x200000cc

08003334 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	60fb      	str	r3, [r7, #12]
    }
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	6a3a      	ldr	r2, [r7, #32]
 800336c:	6a12      	ldr	r2, [r2, #32]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	69d2      	ldr	r2, [r2, #28]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	3318      	adds	r3, #24
 8003382:	429a      	cmp	r2, r3
 8003384:	d103      	bne.n	800338e <xTaskRemoveFromEventList+0x5a>
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	6a1a      	ldr	r2, [r3, #32]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	2200      	movs	r2, #0
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800339e:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <xTaskRemoveFromEventList+0x198>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d162      	bne.n	800346c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	68d2      	ldr	r2, [r2, #12]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	6a3a      	ldr	r2, [r7, #32]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	3304      	adds	r3, #4
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d103      	bne.n	80033d4 <xTaskRemoveFromEventList+0xa0>
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2200      	movs	r2, #0
 80033d8:	615a      	str	r2, [r3, #20]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	1e5a      	subs	r2, r3, #1
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f002 fde4 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	2201      	movs	r2, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <xTaskRemoveFromEventList+0x19c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	4a35      	ldr	r2, [pc, #212]	; (80034d0 <xTaskRemoveFromEventList+0x19c>)
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	4934      	ldr	r1, [pc, #208]	; (80034d4 <xTaskRemoveFromEventList+0x1a0>)
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3304      	adds	r3, #4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	6a3a      	ldr	r2, [r7, #32]
 8003428:	3204      	adds	r2, #4
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4a24      	ldr	r2, [pc, #144]	; (80034d4 <xTaskRemoveFromEventList+0x1a0>)
 8003442:	441a      	add	r2, r3
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	615a      	str	r2, [r3, #20]
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	4921      	ldr	r1, [pc, #132]	; (80034d4 <xTaskRemoveFromEventList+0x1a0>)
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	481d      	ldr	r0, [pc, #116]	; (80034d4 <xTaskRemoveFromEventList+0x1a0>)
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4403      	add	r3, r0
 8003468:	6019      	str	r1, [r3, #0]
 800346a:	e01b      	b.n	80034a4 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <xTaskRemoveFromEventList+0x1a4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	61da      	str	r2, [r3, #28]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	621a      	str	r2, [r3, #32]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	6a3a      	ldr	r2, [r7, #32]
 8003486:	3218      	adds	r2, #24
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f103 0218 	add.w	r2, r3, #24
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <xTaskRemoveFromEventList+0x1a4>)
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <xTaskRemoveFromEventList+0x1a4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <xTaskRemoveFromEventList+0x1a4>)
 80034a2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <xTaskRemoveFromEventList+0x1a8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d905      	bls.n	80034be <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80034b2:	2301      	movs	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <xTaskRemoveFromEventList+0x1ac>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e001      	b.n	80034c2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3728      	adds	r7, #40	; 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200001cc 	.word	0x200001cc
 80034d0:	200001ac 	.word	0x200001ac
 80034d4:	200000d0 	.word	0x200000d0
 80034d8:	20000164 	.word	0x20000164
 80034dc:	200000cc 	.word	0x200000cc
 80034e0:	200001b8 	.word	0x200001b8

080034e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <vTaskInternalSetTimeOutState+0x24>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <vTaskInternalSetTimeOutState+0x28>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	605a      	str	r2, [r3, #4]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	200001bc 	.word	0x200001bc
 800350c:	200001a8 	.word	0x200001a8

08003510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	613b      	str	r3, [r7, #16]
    }
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	60fb      	str	r3, [r7, #12]
    }
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003552:	f000 ffc7 	bl	80044e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003556:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <xTaskCheckForTimeOut+0xc4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d102      	bne.n	8003576 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	e026      	b.n	80035c4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <xTaskCheckForTimeOut+0xc8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d00a      	beq.n	8003598 <xTaskCheckForTimeOut+0x88>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	429a      	cmp	r2, r3
 800358a:	d305      	bcc.n	8003598 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e015      	b.n	80035c4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d20b      	bcs.n	80035ba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ff98 	bl	80034e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	e004      	b.n	80035c4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80035c4:	f000 ffbe 	bl	8004544 <vPortExitCritical>

    return xReturn;
 80035c8:	69fb      	ldr	r3, [r7, #28]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200001a8 	.word	0x200001a8
 80035d8:	200001bc 	.word	0x200001bc

080035dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <vTaskMissedYield+0x14>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	200001b8 	.word	0x200001b8

080035f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80035fc:	f000 f852 	bl	80036a4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <prvIdleTask+0x28>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d9f9      	bls.n	80035fc <prvIdleTask+0x8>
            {
                taskYIELD();
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <prvIdleTask+0x2c>)
 800360a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003618:	e7f0      	b.n	80035fc <prvIdleTask+0x8>
 800361a:	bf00      	nop
 800361c:	200000d0 	.word	0x200000d0
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800362a:	2300      	movs	r3, #0
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	e00c      	b.n	800364a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <prvInitialiseTaskLists+0x60>)
 800363c:	4413      	add	r3, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe fcee 	bl	8002020 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3301      	adds	r3, #1
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d9ef      	bls.n	8003630 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003650:	480d      	ldr	r0, [pc, #52]	; (8003688 <prvInitialiseTaskLists+0x64>)
 8003652:	f7fe fce5 	bl	8002020 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003656:	480d      	ldr	r0, [pc, #52]	; (800368c <prvInitialiseTaskLists+0x68>)
 8003658:	f7fe fce2 	bl	8002020 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800365c:	480c      	ldr	r0, [pc, #48]	; (8003690 <prvInitialiseTaskLists+0x6c>)
 800365e:	f7fe fcdf 	bl	8002020 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003662:	480c      	ldr	r0, [pc, #48]	; (8003694 <prvInitialiseTaskLists+0x70>)
 8003664:	f7fe fcdc 	bl	8002020 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003668:	480b      	ldr	r0, [pc, #44]	; (8003698 <prvInitialiseTaskLists+0x74>)
 800366a:	f7fe fcd9 	bl	8002020 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <prvInitialiseTaskLists+0x78>)
 8003670:	4a05      	ldr	r2, [pc, #20]	; (8003688 <prvInitialiseTaskLists+0x64>)
 8003672:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <prvInitialiseTaskLists+0x7c>)
 8003676:	4a05      	ldr	r2, [pc, #20]	; (800368c <prvInitialiseTaskLists+0x68>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200000d0 	.word	0x200000d0
 8003688:	20000134 	.word	0x20000134
 800368c:	20000148 	.word	0x20000148
 8003690:	20000164 	.word	0x20000164
 8003694:	20000178 	.word	0x20000178
 8003698:	20000190 	.word	0x20000190
 800369c:	2000015c 	.word	0x2000015c
 80036a0:	20000160 	.word	0x20000160

080036a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036aa:	e019      	b.n	80036e0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80036ac:	f000 ff1a 	bl	80044e4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <prvCheckTasksWaitingTermination+0x50>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fd39 	bl	8002134 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <prvCheckTasksWaitingTermination+0x54>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <prvCheckTasksWaitingTermination+0x54>)
 80036ca:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <prvCheckTasksWaitingTermination+0x58>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <prvCheckTasksWaitingTermination+0x58>)
 80036d4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80036d6:	f000 ff35 	bl	8004544 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f810 	bl	8003700 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <prvCheckTasksWaitingTermination+0x58>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e1      	bne.n	80036ac <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000178 	.word	0x20000178
 80036f8:	200001a4 	.word	0x200001a4
 80036fc:	2000018c 	.word	0x2000018c

08003700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	4618      	mov	r0, r3
 800370e:	f001 f8cf 	bl	80048b0 <vPortFree>
            vPortFree( pxTCB );
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f001 f8cc 	bl	80048b0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003724:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <prvResetNextTaskUnblockTime+0x30>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <prvResetNextTaskUnblockTime+0x34>)
 8003730:	f04f 32ff 	mov.w	r2, #4294967295
 8003734:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003736:	e005      	b.n	8003744 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <prvResetNextTaskUnblockTime+0x30>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <prvResetNextTaskUnblockTime+0x34>)
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	2000015c 	.word	0x2000015c
 8003754:	200001c4 	.word	0x200001c4

08003758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <xTaskGetSchedulerState+0x34>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003766:	2301      	movs	r3, #1
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	e008      	b.n	800377e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <xTaskGetSchedulerState+0x38>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003774:	2302      	movs	r3, #2
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	e001      	b.n	800377e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800377e:	687b      	ldr	r3, [r7, #4]
    }
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	200001b0 	.word	0x200001b0
 8003790:	200001cc 	.word	0x200001cc

08003794 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	613b      	str	r3, [r7, #16]
    }
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80037be:	f000 fe91 	bl	80044e4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80037c2:	4b36      	ldr	r3, [pc, #216]	; (800389c <xTaskGenericNotifyWait+0x108>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	3354      	adds	r3, #84	; 0x54
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d022      	beq.n	800381a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80037d4:	4b31      	ldr	r3, [pc, #196]	; (800389c <xTaskGenericNotifyWait+0x108>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	3214      	adds	r2, #20
 80037dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	43d2      	mvns	r2, r2
 80037e4:	4011      	ands	r1, r2
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	3214      	adds	r2, #20
 80037ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80037ee:	4b2b      	ldr	r3, [pc, #172]	; (800389c <xTaskGenericNotifyWait+0x108>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	3354      	adds	r3, #84	; 0x54
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003802:	2101      	movs	r1, #1
 8003804:	6a38      	ldr	r0, [r7, #32]
 8003806:	f000 f9bb 	bl	8003b80 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <xTaskGenericNotifyWait+0x10c>)
 800380c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800381a:	f000 fe93 	bl	8004544 <vPortExitCritical>

        taskENTER_CRITICAL();
 800381e:	f000 fe61 	bl	80044e4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	2040      	movs	r0, #64	; 0x40
 8003830:	f001 fec2 	bl	80055b8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <xTaskGenericNotifyWait+0x108>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	3214      	adds	r2, #20
 8003842:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800384a:	4b14      	ldr	r3, [pc, #80]	; (800389c <xTaskGenericNotifyWait+0x108>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	3354      	adds	r3, #84	; 0x54
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d002      	beq.n	8003862 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e00e      	b.n	8003880 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <xTaskGenericNotifyWait+0x108>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	3214      	adds	r2, #20
 800386a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	43d2      	mvns	r2, r2
 8003872:	4011      	ands	r1, r2
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	3214      	adds	r2, #20
 8003878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800387c:	2301      	movs	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <xTaskGenericNotifyWait+0x108>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4413      	add	r3, r2
 8003888:	3354      	adds	r3, #84	; 0x54
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800388e:	f000 fe59 	bl	8004544 <vPortExitCritical>

        return xReturn;
 8003892:	697b      	ldr	r3, [r7, #20]
    }
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	200000cc 	.word	0x200000cc
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b094      	sub	sp, #80	; 0x50
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80038b2:	2301      	movs	r3, #1
 80038b4:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ee:	f000 fee5 	bl	80046bc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80038f6:	f3ef 8211 	mrs	r2, BASEPRI
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	623a      	str	r2, [r7, #32]
 800390c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800390e:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003914:	2b00      	cmp	r3, #0
 8003916:	d006      	beq.n	8003926 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	3214      	adds	r2, #20
 800391e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003924:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003926:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4413      	add	r3, r2
 800392c:	3354      	adds	r3, #84	; 0x54
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4413      	add	r3, r2
 800393a:	3354      	adds	r3, #84	; 0x54
 800393c:	2202      	movs	r2, #2
 800393e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d83b      	bhi.n	80039be <xTaskGenericNotifyFromISR+0x11a>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <xTaskGenericNotifyFromISR+0xa8>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	080039dd 	.word	0x080039dd
 8003950:	08003961 	.word	0x08003961
 8003954:	0800397d 	.word	0x0800397d
 8003958:	08003995 	.word	0x08003995
 800395c:	080039a3 	.word	0x080039a3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	3214      	adds	r2, #20
 8003966:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	ea42 0103 	orr.w	r1, r2, r3
 8003970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	3214      	adds	r2, #20
 8003976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800397a:	e032      	b.n	80039e2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800397c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	3214      	adds	r2, #20
 8003982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003986:	1c59      	adds	r1, r3, #1
 8003988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	3214      	adds	r2, #20
 800398e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003992:	e026      	b.n	80039e2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	3214      	adds	r2, #20
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039a0:	e01f      	b.n	80039e2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80039a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d006      	beq.n	80039b8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80039aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	3214      	adds	r2, #20
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80039b6:	e014      	b.n	80039e2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80039bc:	e011      	b.n	80039e2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80039be:	4b69      	ldr	r3, [pc, #420]	; (8003b64 <xTaskGenericNotifyFromISR+0x2c0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	61bb      	str	r3, [r7, #24]
    }
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <xTaskGenericNotifyFromISR+0x136>
                    break;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80039e0:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80039e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e4:	4618      	mov	r0, r3
 80039e6:	f002 fb27 	bl	8006038 <SEGGER_SYSVIEW_ShrinkId>
 80039ea:	78f9      	ldrb	r1, [r7, #3]
 80039ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039f0:	9201      	str	r2, [sp, #4]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	460b      	mov	r3, r1
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4601      	mov	r1, r0
 80039fa:	203f      	movs	r0, #63	; 0x3f
 80039fc:	f001 fe6e 	bl	80056dc <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003a00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 80a2 	bne.w	8003b4e <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	617b      	str	r3, [r7, #20]
    }
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a28:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <xTaskGenericNotifyFromISR+0x2c4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d162      	bne.n	8003af6 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 8003a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a3c:	68d2      	ldr	r2, [r2, #12]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a46:	6892      	ldr	r2, [r2, #8]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a50:	3304      	adds	r3, #4
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d103      	bne.n	8003a5e <xTaskGenericNotifyFromISR+0x1ba>
 8003a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a60:	2200      	movs	r2, #0
 8003a62:	615a      	str	r2, [r3, #20]
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a70:	4618      	mov	r0, r3
 8003a72:	f002 fa9f 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <xTaskGenericNotifyFromISR+0x2c8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	4a39      	ldr	r2, [pc, #228]	; (8003b6c <xTaskGenericNotifyFromISR+0x2c8>)
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	4938      	ldr	r1, [pc, #224]	; (8003b70 <xTaskGenericNotifyFromISR+0x2cc>)
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3304      	adds	r3, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aaa:	60da      	str	r2, [r3, #12]
 8003aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ab2:	3204      	adds	r2, #4
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab8:	1d1a      	adds	r2, r3, #4
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <xTaskGenericNotifyFromISR+0x2cc>)
 8003acc:	441a      	add	r2, r3
 8003ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad0:	615a      	str	r2, [r3, #20]
 8003ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad6:	4926      	ldr	r1, [pc, #152]	; (8003b70 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1c59      	adds	r1, r3, #1
 8003ae6:	4822      	ldr	r0, [pc, #136]	; (8003b70 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4403      	add	r3, r0
 8003af2:	6019      	str	r1, [r3, #0]
 8003af4:	e01b      	b.n	8003b2e <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003af6:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <xTaskGenericNotifyFromISR+0x2d0>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
 8003afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b00:	61da      	str	r2, [r3, #28]
 8003b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b08:	621a      	str	r2, [r3, #32]
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b10:	3218      	adds	r2, #24
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b16:	f103 0218 	add.w	r2, r3, #24
 8003b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <xTaskGenericNotifyFromISR+0x2d0>)
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
 8003b24:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <xTaskGenericNotifyFromISR+0x2d0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <xTaskGenericNotifyFromISR+0x2d0>)
 8003b2c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <xTaskGenericNotifyFromISR+0x2d4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d908      	bls.n	8003b4e <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <xTaskGenericNotifyFromISR+0x2d8>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b50:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003b58:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3748      	adds	r7, #72	; 0x48
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200001a8 	.word	0x200001a8
 8003b68:	200001cc 	.word	0x200001cc
 8003b6c:	200001ac 	.word	0x200001ac
 8003b70:	200000d0 	.word	0x200000d0
 8003b74:	20000164 	.word	0x20000164
 8003b78:	200000cc 	.word	0x200000cc
 8003b7c:	200001b8 	.word	0x200001b8

08003b80 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b8a:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b90:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe facc 	bl	8002134 <uxListRemove>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10b      	bne.n	8003bba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	2201      	movs	r2, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	4a2d      	ldr	r2, [pc, #180]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003bb8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d124      	bne.n	8003c0c <prvAddCurrentTaskToDelayedList+0x8c>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d021      	beq.n	8003c0c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	6892      	ldr	r2, [r2, #8]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	3204      	adds	r2, #4
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1d1a      	adds	r2, r3, #4
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	609a      	str	r2, [r3, #8]
 8003bf6:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bfc:	615a      	str	r2, [r3, #20]
 8003bfe:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3301      	adds	r3, #1
 8003c04:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c0a:	e026      	b.n	8003c5a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4413      	add	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d209      	bcs.n	8003c38 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7fe fa46 	bl	80020c2 <vListInsert>
}
 8003c36:	e010      	b.n	8003c5a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f7fe fa3c 	bl	80020c2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d202      	bcs.n	8003c5a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003c54:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6013      	str	r3, [r2, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200001a8 	.word	0x200001a8
 8003c68:	200000cc 	.word	0x200000cc
 8003c6c:	200001ac 	.word	0x200001ac
 8003c70:	20000190 	.word	0x20000190
 8003c74:	20000160 	.word	0x20000160
 8003c78:	2000015c 	.word	0x2000015c
 8003c7c:	200001c4 	.word	0x200001c4

08003c80 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c8a:	f000 fa47 	bl	800411c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <xTimerCreateTimerTask+0x54>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <xTimerCreateTimerTask+0x58>)
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ca4:	490d      	ldr	r1, [pc, #52]	; (8003cdc <xTimerCreateTimerTask+0x5c>)
 8003ca6:	480e      	ldr	r0, [pc, #56]	; (8003ce0 <xTimerCreateTimerTask+0x60>)
 8003ca8:	f7fe fd9e 	bl	80027e8 <xTaskCreate>
 8003cac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	603b      	str	r3, [r7, #0]
    }
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003cca:	687b      	ldr	r3, [r7, #4]
    }
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000200 	.word	0x20000200
 8003cd8:	20000204 	.word	0x20000204
 8003cdc:	080063c0 	.word	0x080063c0
 8003ce0:	08003d89 	.word	0x08003d89

08003ce4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003cf0:	e008      	b.n	8003d04 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	699a      	ldr	r2, [r3, #24]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	18d1      	adds	r1, r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f8dd 	bl	8003ed0 <prvInsertTimerInActiveList>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ea      	bne.n	8003cf2 <prvReloadTimer+0xe>
        }
    }
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d32:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <prvProcessExpiredTimer+0x5c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe f9f7 	bl	8002134 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff ffc3 	bl	8003ce4 <prvReloadTimer>
 8003d5e:	e008      	b.n	8003d72 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	4798      	blx	r3
    }
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200001f8 	.word	0x200001f8

08003d88 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 f857 	bl	8003e48 <prvGetNextExpireTime>
 8003d9a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f803 	bl	8003dac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003da6:	f000 f8d5 	bl	8003f54 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003daa:	e7f1      	b.n	8003d90 <prvTimerTask+0x8>

08003dac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003db6:	f7fe ffaf 	bl	8002d18 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dba:	f107 0308 	add.w	r3, r7, #8
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f866 	bl	8003e90 <prvSampleTimeNow>
 8003dc4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d130      	bne.n	8003e2e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <prvProcessTimerOrBlockTask+0x3c>
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d806      	bhi.n	8003de8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dda:	f7fe ffab 	bl	8002d34 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ffa1 	bl	8003d28 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003de6:	e024      	b.n	8003e32 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <prvProcessTimerOrBlockTask+0x90>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <prvProcessTimerOrBlockTask+0x50>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <prvProcessTimerOrBlockTask+0x52>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <prvProcessTimerOrBlockTask+0x94>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f7fe fcb7 	bl	8002780 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e12:	f7fe ff8f 	bl	8002d34 <xTaskResumeAll>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <prvProcessTimerOrBlockTask+0x98>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
    }
 8003e2c:	e001      	b.n	8003e32 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e2e:	f7fe ff81 	bl	8002d34 <xTaskResumeAll>
    }
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	200001fc 	.word	0x200001fc
 8003e40:	20000200 	.word	0x20000200
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e50:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <prvGetNextExpireTime+0x44>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <prvGetNextExpireTime+0x16>
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	e000      	b.n	8003e60 <prvGetNextExpireTime+0x18>
 8003e5e:	2200      	movs	r2, #0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <prvGetNextExpireTime+0x44>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e001      	b.n	8003e7c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	200001f8 	.word	0x200001f8

08003e90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e98:	f7ff f84c 	bl	8002f34 <xTaskGetTickCount>
 8003e9c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <prvSampleTimeNow+0x3c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d205      	bcs.n	8003eb4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ea8:	f000 f912 	bl	80040d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e002      	b.n	8003eba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <prvSampleTimeNow+0x3c>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000208 	.word	0x20000208

08003ed0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d812      	bhi.n	8003f1c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	1ad2      	subs	r2, r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e01b      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <prvInsertTimerInActiveList+0x7c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7fe f8d4 	bl	80020c2 <vListInsert>
 8003f1a:	e012      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d206      	bcs.n	8003f32 <prvInsertTimerInActiveList+0x62>
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e007      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <prvInsertTimerInActiveList+0x80>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f7fe f8c0 	bl	80020c2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f42:	697b      	ldr	r3, [r7, #20]
    }
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200001fc 	.word	0x200001fc
 8003f50:	200001f8 	.word	0x200001f8

08003f54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f5a:	e0a6      	b.n	80040aa <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f2c0 80a2 	blt.w	80040a8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe f8dd 	bl	8002134 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff87 	bl	8003e90 <prvSampleTimeNow>
 8003f82:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	f200 808e 	bhi.w	80040aa <prvProcessReceivedCommands+0x156>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <prvProcessReceivedCommands+0x40>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fb9 	.word	0x08003fb9
 8003f9c:	08004021 	.word	0x08004021
 8003fa0:	08004035 	.word	0x08004035
 8003fa4:	0800407f 	.word	0x0800407f
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fb9 	.word	0x08003fb9
 8003fb0:	08004021 	.word	0x08004021
 8003fb4:	08004035 	.word	0x08004035
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	18d1      	adds	r1, r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	69f8      	ldr	r0, [r7, #28]
 8003fd8:	f7ff ff7a 	bl	8003ed0 <prvInsertTimerInActiveList>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d063      	beq.n	80040aa <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	69f8      	ldr	r0, [r7, #28]
 8003ffe:	f7ff fe71 	bl	8003ce4 <prvReloadTimer>
 8004002:	e008      	b.n	8004016 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	69f8      	ldr	r0, [r7, #28]
 800401c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800401e:	e044      	b.n	80040aa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	b2da      	uxtb	r2, r3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004032:	e03a      	b.n	80040aa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	617b      	str	r3, [r7, #20]
    }
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	18d1      	adds	r1, r2, r3
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	69f8      	ldr	r0, [r7, #28]
 8004078:	f7ff ff2a 	bl	8003ed0 <prvInsertTimerInActiveList>
                        break;
 800407c:	e015      	b.n	80040aa <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800408c:	69f8      	ldr	r0, [r7, #28]
 800408e:	f000 fc0f 	bl	80048b0 <vPortFree>
 8004092:	e00a      	b.n	80040aa <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040a6:	e000      	b.n	80040aa <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040a8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <prvProcessReceivedCommands+0x178>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f107 0108 	add.w	r1, r7, #8
 80040b2:	2200      	movs	r2, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe f96f 	bl	8002398 <xQueueReceive>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f47f af4d 	bne.w	8003f5c <prvProcessReceivedCommands+0x8>
        }
    }
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000200 	.word	0x20000200

080040d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040d6:	e009      	b.n	80040ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <prvSwitchTimerLists+0x44>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80040e2:	f04f 31ff 	mov.w	r1, #4294967295
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f7ff fe1e 	bl	8003d28 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <prvSwitchTimerLists+0x44>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80040f6:	4b07      	ldr	r3, [pc, #28]	; (8004114 <prvSwitchTimerLists+0x44>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <prvSwitchTimerLists+0x48>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <prvSwitchTimerLists+0x44>)
 8004102:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <prvSwitchTimerLists+0x48>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6013      	str	r3, [r2, #0]
    }
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200001f8 	.word	0x200001f8
 8004118:	200001fc 	.word	0x200001fc

0800411c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004120:	f000 f9e0 	bl	80044e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <prvCheckForValidListAndQueue+0x54>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11d      	bne.n	8004168 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800412c:	4811      	ldr	r0, [pc, #68]	; (8004174 <prvCheckForValidListAndQueue+0x58>)
 800412e:	f7fd ff77 	bl	8002020 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004132:	4811      	ldr	r0, [pc, #68]	; (8004178 <prvCheckForValidListAndQueue+0x5c>)
 8004134:	f7fd ff74 	bl	8002020 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <prvCheckForValidListAndQueue+0x60>)
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <prvCheckForValidListAndQueue+0x58>)
 800413c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <prvCheckForValidListAndQueue+0x64>)
 8004140:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <prvCheckForValidListAndQueue+0x5c>)
 8004142:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004144:	2200      	movs	r2, #0
 8004146:	210c      	movs	r1, #12
 8004148:	200a      	movs	r0, #10
 800414a:	f7fe f8ad 	bl	80022a8 <xQueueGenericCreate>
 800414e:	4603      	mov	r3, r0
 8004150:	4a07      	ldr	r2, [pc, #28]	; (8004170 <prvCheckForValidListAndQueue+0x54>)
 8004152:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <prvCheckForValidListAndQueue+0x54>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <prvCheckForValidListAndQueue+0x54>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4908      	ldr	r1, [pc, #32]	; (8004184 <prvCheckForValidListAndQueue+0x68>)
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fab6 	bl	80026d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004168:	f000 f9ec 	bl	8004544 <vPortExitCritical>
    }
 800416c:	bf00      	nop
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000200 	.word	0x20000200
 8004174:	200001d0 	.word	0x200001d0
 8004178:	200001e4 	.word	0x200001e4
 800417c:	200001f8 	.word	0x200001f8
 8004180:	200001fc 	.word	0x200001fc
 8004184:	080063c8 	.word	0x080063c8

08004188 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3b04      	subs	r3, #4
 8004198:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3b04      	subs	r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b04      	subs	r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041b8:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <pxPortInitialiseStack+0x64>)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b14      	subs	r3, #20
 80041c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3b04      	subs	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f06f 0202 	mvn.w	r2, #2
 80041d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3b20      	subs	r3, #32
 80041dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041de:	68fb      	ldr	r3, [r7, #12]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	080041f1 	.word	0x080041f1

080041f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <prvTaskExitError+0x54>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d00a      	beq.n	800421a <prvTaskExitError+0x2a>
        __asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
    }
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <prvTaskExitError+0x28>
        __asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60bb      	str	r3, [r7, #8]
    }
 800422c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800422e:	bf00      	nop
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0fc      	beq.n	8004230 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	20000010 	.word	0x20000010
	...

08004250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <pxCurrentTCBConst2>)
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	6808      	ldr	r0, [r1, #0]
 8004256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425a:	f380 8809 	msr	PSP, r0
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f380 8811 	msr	BASEPRI, r0
 800426a:	4770      	bx	lr
 800426c:	f3af 8000 	nop.w

08004270 <pxCurrentTCBConst2>:
 8004270:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004278:	4808      	ldr	r0, [pc, #32]	; (800429c <prvPortStartFirstTask+0x24>)
 800427a:	6800      	ldr	r0, [r0, #0]
 800427c:	6800      	ldr	r0, [r0, #0]
 800427e:	f380 8808 	msr	MSP, r0
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8814 	msr	CONTROL, r0
 800428a:	b662      	cpsie	i
 800428c:	b661      	cpsie	f
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	df00      	svc	0
 8004298:	bf00      	nop
 800429a:	0000      	.short	0x0000
 800429c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop

080042a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042aa:	4b46      	ldr	r3, [pc, #280]	; (80043c4 <xPortStartScheduler+0x120>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a46      	ldr	r2, [pc, #280]	; (80043c8 <xPortStartScheduler+0x124>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10a      	bne.n	80042ca <xPortStartScheduler+0x26>
        __asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	613b      	str	r3, [r7, #16]
    }
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ca:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <xPortStartScheduler+0x120>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a3f      	ldr	r2, [pc, #252]	; (80043cc <xPortStartScheduler+0x128>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d10a      	bne.n	80042ea <xPortStartScheduler+0x46>
        __asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60fb      	str	r3, [r7, #12]
    }
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ea:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <xPortStartScheduler+0x12c>)
 80042ec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <xPortStartScheduler+0x130>)
 8004310:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004312:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <xPortStartScheduler+0x134>)
 8004314:	2207      	movs	r2, #7
 8004316:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004318:	e009      	b.n	800432e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <xPortStartScheduler+0x134>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	4a2d      	ldr	r2, [pc, #180]	; (80043d8 <xPortStartScheduler+0x134>)
 8004322:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	b2db      	uxtb	r3, r3
 800432c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b80      	cmp	r3, #128	; 0x80
 8004338:	d0ef      	beq.n	800431a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <xPortStartScheduler+0x134>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1c3 0307 	rsb	r3, r3, #7
 8004342:	2b04      	cmp	r3, #4
 8004344:	d00a      	beq.n	800435c <xPortStartScheduler+0xb8>
        __asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60bb      	str	r3, [r7, #8]
    }
 8004358:	bf00      	nop
 800435a:	e7fe      	b.n	800435a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <xPortStartScheduler+0x134>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <xPortStartScheduler+0x134>)
 8004364:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004366:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <xPortStartScheduler+0x134>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800436e:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <xPortStartScheduler+0x134>)
 8004370:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800437a:	4b18      	ldr	r3, [pc, #96]	; (80043dc <xPortStartScheduler+0x138>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a17      	ldr	r2, [pc, #92]	; (80043dc <xPortStartScheduler+0x138>)
 8004380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004384:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <xPortStartScheduler+0x138>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a14      	ldr	r2, [pc, #80]	; (80043dc <xPortStartScheduler+0x138>)
 800438c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004390:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004392:	f000 f963 	bl	800465c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <xPortStartScheduler+0x13c>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800439c:	f000 f982 	bl	80046a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <xPortStartScheduler+0x140>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a0f      	ldr	r2, [pc, #60]	; (80043e4 <xPortStartScheduler+0x140>)
 80043a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043ac:	f7ff ff64 	bl	8004278 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043b0:	f7fe feea 	bl	8003188 <vTaskSwitchContext>
    prvTaskExitError();
 80043b4:	f7ff ff1c 	bl	80041f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000ed00 	.word	0xe000ed00
 80043c8:	410fc271 	.word	0x410fc271
 80043cc:	410fc270 	.word	0x410fc270
 80043d0:	e000e400 	.word	0xe000e400
 80043d4:	2000020c 	.word	0x2000020c
 80043d8:	20000210 	.word	0x20000210
 80043dc:	e000ed20 	.word	0xe000ed20
 80043e0:	20000010 	.word	0x20000010
 80043e4:	e000ef34 	.word	0xe000ef34

080043e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043ee:	4b37      	ldr	r3, [pc, #220]	; (80044cc <vInitPrioGroupValue+0xe4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a37      	ldr	r2, [pc, #220]	; (80044d0 <vInitPrioGroupValue+0xe8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10a      	bne.n	800440e <vInitPrioGroupValue+0x26>
        __asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	613b      	str	r3, [r7, #16]
    }
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800440e:	4b2f      	ldr	r3, [pc, #188]	; (80044cc <vInitPrioGroupValue+0xe4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <vInitPrioGroupValue+0xec>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d10a      	bne.n	800442e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	60fb      	str	r3, [r7, #12]
    }
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800442e:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <vInitPrioGroupValue+0xf0>)
 8004430:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	22ff      	movs	r2, #255	; 0xff
 800443e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004450:	b2da      	uxtb	r2, r3
 8004452:	4b22      	ldr	r3, [pc, #136]	; (80044dc <vInitPrioGroupValue+0xf4>)
 8004454:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <vInitPrioGroupValue+0xf8>)
 8004458:	2207      	movs	r2, #7
 800445a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800445c:	e009      	b.n	8004472 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <vInitPrioGroupValue+0xf8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3b01      	subs	r3, #1
 8004464:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <vInitPrioGroupValue+0xf8>)
 8004466:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b80      	cmp	r3, #128	; 0x80
 800447c:	d0ef      	beq.n	800445e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800447e:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <vInitPrioGroupValue+0xf8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f1c3 0307 	rsb	r3, r3, #7
 8004486:	2b04      	cmp	r3, #4
 8004488:	d00a      	beq.n	80044a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60bb      	str	r3, [r7, #8]
    }
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <vInitPrioGroupValue+0xf8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <vInitPrioGroupValue+0xf8>)
 80044a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <vInitPrioGroupValue+0xf8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044b2:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <vInitPrioGroupValue+0xf8>)
 80044b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	e000ed00 	.word	0xe000ed00
 80044d0:	410fc271 	.word	0x410fc271
 80044d4:	410fc270 	.word	0x410fc270
 80044d8:	e000e400 	.word	0xe000e400
 80044dc:	2000020c 	.word	0x2000020c
 80044e0:	20000210 	.word	0x20000210

080044e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
        __asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	607b      	str	r3, [r7, #4]
    }
 80044fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <vPortEnterCritical+0x58>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3301      	adds	r3, #1
 8004504:	4a0d      	ldr	r2, [pc, #52]	; (800453c <vPortEnterCritical+0x58>)
 8004506:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <vPortEnterCritical+0x58>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10f      	bne.n	8004530 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <vPortEnterCritical+0x5c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <vPortEnterCritical+0x4c>
        __asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	603b      	str	r3, [r7, #0]
    }
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <vPortEnterCritical+0x4a>
    }
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	20000010 	.word	0x20000010
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <vPortExitCritical+0x50>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <vPortExitCritical+0x24>
        __asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	607b      	str	r3, [r7, #4]
    }
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <vPortExitCritical+0x50>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3b01      	subs	r3, #1
 800456e:	4a09      	ldr	r2, [pc, #36]	; (8004594 <vPortExitCritical+0x50>)
 8004570:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <vPortExitCritical+0x50>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <vPortExitCritical+0x42>
 800457a:	2300      	movs	r3, #0
 800457c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	f383 8811 	msr	BASEPRI, r3
    }
 8004584:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000010 	.word	0x20000010
	...

080045a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045a0:	f3ef 8009 	mrs	r0, PSP
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <pxCurrentTCBConst>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	f01e 0f10 	tst.w	lr, #16
 80045b0:	bf08      	it	eq
 80045b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	6010      	str	r0, [r2, #0]
 80045bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045c4:	f380 8811 	msr	BASEPRI, r0
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f7fe fdda 	bl	8003188 <vTaskSwitchContext>
 80045d4:	f04f 0000 	mov.w	r0, #0
 80045d8:	f380 8811 	msr	BASEPRI, r0
 80045dc:	bc09      	pop	{r0, r3}
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	6808      	ldr	r0, [r1, #0]
 80045e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e6:	f01e 0f10 	tst.w	lr, #16
 80045ea:	bf08      	it	eq
 80045ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045f0:	f380 8809 	msr	PSP, r0
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	f3af 8000 	nop.w

08004600 <pxCurrentTCBConst>:
 8004600:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop

08004608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
        __asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	607b      	str	r3, [r7, #4]
    }
 8004620:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004622:	f001 fbad 	bl	8005d80 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004626:	f7fe fc95 	bl	8002f54 <xTaskIncrementTick>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d006      	beq.n	800463e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004630:	f001 fc04 	bl	8005e3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004634:	4b08      	ldr	r3, [pc, #32]	; (8004658 <SysTick_Handler+0x50>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e001      	b.n	8004642 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800463e:	f001 fbe1 	bl	8005e04 <SEGGER_SYSVIEW_RecordExitISR>
 8004642:	2300      	movs	r3, #0
 8004644:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f383 8811 	msr	BASEPRI, r3
    }
 800464c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	e000ed04 	.word	0xe000ed04

0800465c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <vPortSetupTimerInterrupt+0x34>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <vPortSetupTimerInterrupt+0x38>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <vPortSetupTimerInterrupt+0x3c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0a      	ldr	r2, [pc, #40]	; (800469c <vPortSetupTimerInterrupt+0x40>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <vPortSetupTimerInterrupt+0x44>)
 800467a:	3b01      	subs	r3, #1
 800467c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800467e:	4b04      	ldr	r3, [pc, #16]	; (8004690 <vPortSetupTimerInterrupt+0x34>)
 8004680:	2207      	movs	r2, #7
 8004682:	601a      	str	r2, [r3, #0]
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000e010 	.word	0xe000e010
 8004694:	e000e018 	.word	0xe000e018
 8004698:	20000000 	.word	0x20000000
 800469c:	10624dd3 	.word	0x10624dd3
 80046a0:	e000e014 	.word	0xe000e014

080046a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046b4 <vPortEnableVFP+0x10>
 80046a8:	6801      	ldr	r1, [r0, #0]
 80046aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ae:	6001      	str	r1, [r0, #0]
 80046b0:	4770      	bx	lr
 80046b2:	0000      	.short	0x0000
 80046b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop

080046bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80046c2:	f3ef 8305 	mrs	r3, IPSR
 80046c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b0f      	cmp	r3, #15
 80046cc:	d914      	bls.n	80046f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046ce:	4a17      	ldr	r2, [pc, #92]	; (800472c <vPortValidateInterruptPriority+0x70>)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <vPortValidateInterruptPriority+0x74>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	7afa      	ldrb	r2, [r7, #11]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d20a      	bcs.n	80046f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	607b      	str	r3, [r7, #4]
    }
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <vPortValidateInterruptPriority+0x78>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <vPortValidateInterruptPriority+0x7c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d90a      	bls.n	800471e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	603b      	str	r3, [r7, #0]
    }
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <vPortValidateInterruptPriority+0x60>
    }
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	e000e3f0 	.word	0xe000e3f0
 8004730:	2000020c 	.word	0x2000020c
 8004734:	e000ed0c 	.word	0xe000ed0c
 8004738:	20000210 	.word	0x20000210

0800473c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004748:	f7fe fae6 	bl	8002d18 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800474c:	4b53      	ldr	r3, [pc, #332]	; (800489c <pvPortMalloc+0x160>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004754:	f000 f908 	bl	8004968 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d012      	beq.n	8004784 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800475e:	2208      	movs	r2, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	3308      	adds	r3, #8
 800476a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	43db      	mvns	r3, r3
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	d804      	bhi.n	8004780 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	4413      	add	r3, r2
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	e001      	b.n	8004784 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	db70      	blt.n	800486c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d06d      	beq.n	800486c <pvPortMalloc+0x130>
 8004790:	4b43      	ldr	r3, [pc, #268]	; (80048a0 <pvPortMalloc+0x164>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d868      	bhi.n	800486c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800479a:	4b42      	ldr	r3, [pc, #264]	; (80048a4 <pvPortMalloc+0x168>)
 800479c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800479e:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <pvPortMalloc+0x168>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047a4:	e004      	b.n	80047b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d903      	bls.n	80047c2 <pvPortMalloc+0x86>
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f1      	bne.n	80047a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047c2:	4b36      	ldr	r3, [pc, #216]	; (800489c <pvPortMalloc+0x160>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d04f      	beq.n	800486c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2208      	movs	r2, #8
 80047d2:	4413      	add	r3, r2
 80047d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	1ad2      	subs	r2, r2, r3
 80047e6:	2308      	movs	r3, #8
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d91f      	bls.n	800482e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <pvPortMalloc+0xda>
        __asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	613b      	str	r3, [r7, #16]
    }
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	1ad2      	subs	r2, r2, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004828:	6978      	ldr	r0, [r7, #20]
 800482a:	f000 f8f9 	bl	8004a20 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800482e:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <pvPortMalloc+0x164>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	4a19      	ldr	r2, [pc, #100]	; (80048a0 <pvPortMalloc+0x164>)
 800483a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800483c:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <pvPortMalloc+0x164>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <pvPortMalloc+0x16c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d203      	bcs.n	8004850 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <pvPortMalloc+0x164>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <pvPortMalloc+0x16c>)
 800484e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <pvPortMalloc+0x170>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	4a10      	ldr	r2, [pc, #64]	; (80048ac <pvPortMalloc+0x170>)
 800486a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800486c:	f7fe fa62 	bl	8002d34 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <pvPortMalloc+0x154>
        __asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	60fb      	str	r3, [r7, #12]
    }
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <pvPortMalloc+0x152>
    return pvReturn;
 8004890:	69fb      	ldr	r3, [r7, #28]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3728      	adds	r7, #40	; 0x28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20012e1c 	.word	0x20012e1c
 80048a0:	20012e20 	.word	0x20012e20
 80048a4:	20012e14 	.word	0x20012e14
 80048a8:	20012e24 	.word	0x20012e24
 80048ac:	20012e28 	.word	0x20012e28

080048b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d049      	beq.n	8004956 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048c2:	2308      	movs	r3, #8
 80048c4:	425b      	negs	r3, r3
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4413      	add	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	db0a      	blt.n	80048ee <vPortFree+0x3e>
        __asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	60fb      	str	r3, [r7, #12]
    }
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <vPortFree+0x5c>
        __asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	60bb      	str	r3, [r7, #8]
    }
 8004908:	bf00      	nop
 800490a:	e7fe      	b.n	800490a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0fdb      	lsrs	r3, r3, #31
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01c      	beq.n	8004956 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d118      	bne.n	8004956 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004930:	f7fe f9f2 	bl	8002d18 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <vPortFree+0xb0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4413      	add	r3, r2
 800493e:	4a08      	ldr	r2, [pc, #32]	; (8004960 <vPortFree+0xb0>)
 8004940:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004942:	6938      	ldr	r0, [r7, #16]
 8004944:	f000 f86c 	bl	8004a20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <vPortFree+0xb4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	4a05      	ldr	r2, [pc, #20]	; (8004964 <vPortFree+0xb4>)
 8004950:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004952:	f7fe f9ef 	bl	8002d34 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004956:	bf00      	nop
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20012e20 	.word	0x20012e20
 8004964:	20012e2c 	.word	0x20012e2c

08004968 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800496e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004972:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <prvHeapInit+0xa4>)
 8004976:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00c      	beq.n	800499c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3307      	adds	r3, #7
 8004986:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0307 	bic.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <prvHeapInit+0xa4>)
 8004998:	4413      	add	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049a0:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <prvHeapInit+0xa8>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80049a6:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <prvHeapInit+0xa8>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4413      	add	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80049b4:	2208      	movs	r2, #8
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0307 	bic.w	r3, r3, #7
 80049c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <prvHeapInit+0xac>)
 80049c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <prvHeapInit+0xac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2200      	movs	r2, #0
 80049d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <prvHeapInit+0xac>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	1ad2      	subs	r2, r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <prvHeapInit+0xac>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <prvHeapInit+0xb0>)
 80049f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <prvHeapInit+0xb4>)
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	20000214 	.word	0x20000214
 8004a10:	20012e14 	.word	0x20012e14
 8004a14:	20012e1c 	.word	0x20012e1c
 8004a18:	20012e24 	.word	0x20012e24
 8004a1c:	20012e20 	.word	0x20012e20

08004a20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a28:	4b28      	ldr	r3, [pc, #160]	; (8004acc <prvInsertBlockIntoFreeList+0xac>)
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e002      	b.n	8004a34 <prvInsertBlockIntoFreeList+0x14>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d8f7      	bhi.n	8004a2e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d108      	bne.n	8004a62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	441a      	add	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	441a      	add	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d118      	bne.n	8004aa8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <prvInsertBlockIntoFreeList+0xb0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d00d      	beq.n	8004a9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	441a      	add	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e008      	b.n	8004ab0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <prvInsertBlockIntoFreeList+0xb0>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e003      	b.n	8004ab0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d002      	beq.n	8004abe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20012e14 	.word	0x20012e14
 8004ad0:	20012e1c 	.word	0x20012e1c

08004ad4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ae2:	2205      	movs	r2, #5
 8004ae4:	492b      	ldr	r1, [pc, #172]	; (8004b94 <SYSVIEW_AddTask+0xc0>)
 8004ae6:	68b8      	ldr	r0, [r7, #8]
 8004ae8:	f001 fc12 	bl	8006310 <memcmp>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d04b      	beq.n	8004b8a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004af2:	4b29      	ldr	r3, [pc, #164]	; (8004b98 <SYSVIEW_AddTask+0xc4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b07      	cmp	r3, #7
 8004af8:	d903      	bls.n	8004b02 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004afa:	4828      	ldr	r0, [pc, #160]	; (8004b9c <SYSVIEW_AddTask+0xc8>)
 8004afc:	f001 fb88 	bl	8006210 <SEGGER_SYSVIEW_Warn>
    return;
 8004b00:	e044      	b.n	8004b8c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b02:	4b25      	ldr	r3, [pc, #148]	; (8004b98 <SYSVIEW_AddTask+0xc4>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4926      	ldr	r1, [pc, #152]	; (8004ba0 <SYSVIEW_AddTask+0xcc>)
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b16:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <SYSVIEW_AddTask+0xc4>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4921      	ldr	r1, [pc, #132]	; (8004ba0 <SYSVIEW_AddTask+0xcc>)
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	3304      	adds	r3, #4
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <SYSVIEW_AddTask+0xc4>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	491b      	ldr	r1, [pc, #108]	; (8004ba0 <SYSVIEW_AddTask+0xcc>)
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b42:	4b15      	ldr	r3, [pc, #84]	; (8004b98 <SYSVIEW_AddTask+0xc4>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4916      	ldr	r1, [pc, #88]	; (8004ba0 <SYSVIEW_AddTask+0xcc>)
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	330c      	adds	r3, #12
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <SYSVIEW_AddTask+0xc4>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4910      	ldr	r1, [pc, #64]	; (8004ba0 <SYSVIEW_AddTask+0xcc>)
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	3310      	adds	r3, #16
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <SYSVIEW_AddTask+0xc4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	4a08      	ldr	r2, [pc, #32]	; (8004b98 <SYSVIEW_AddTask+0xc4>)
 8004b76:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f8ca 	bl	8004d1c <SYSVIEW_SendTaskInfo>
 8004b88:	e000      	b.n	8004b8c <SYSVIEW_AddTask+0xb8>
    return;
 8004b8a:	bf00      	nop

}
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	080063d0 	.word	0x080063d0
 8004b98:	20012ed0 	.word	0x20012ed0
 8004b9c:	080063d8 	.word	0x080063d8
 8004ba0:	20012e30 	.word	0x20012e30

08004ba4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004bac:	4b59      	ldr	r3, [pc, #356]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80ab 	beq.w	8004d0c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	e00d      	b.n	8004bd8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004bbc:	4956      	ldr	r1, [pc, #344]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d008      	beq.n	8004be4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	4b4e      	ldr	r3, [pc, #312]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d3ec      	bcc.n	8004bbc <SYSVIEW_DeleteTask+0x18>
 8004be2:	e000      	b.n	8004be6 <SYSVIEW_DeleteTask+0x42>
      break;
 8004be4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004be6:	4b4b      	ldr	r3, [pc, #300]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d111      	bne.n	8004c16 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4a46      	ldr	r2, [pc, #280]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004bfe:	4413      	add	r3, r2
 8004c00:	2214      	movs	r2, #20
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 fba1 	bl	800634c <memset>
    _NumTasks--;
 8004c0a:	4b42      	ldr	r3, [pc, #264]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	4a40      	ldr	r2, [pc, #256]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e07b      	b.n	8004d0e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004c16:	4b3f      	ldr	r3, [pc, #252]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d276      	bcs.n	8004d0e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004c20:	4b3c      	ldr	r3, [pc, #240]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	1e5a      	subs	r2, r3, #1
 8004c26:	493c      	ldr	r1, [pc, #240]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	4838      	ldr	r0, [pc, #224]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4403      	add	r3, r0
 8004c42:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004c44:	4b33      	ldr	r3, [pc, #204]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	4933      	ldr	r1, [pc, #204]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	3304      	adds	r3, #4
 8004c58:	6819      	ldr	r1, [r3, #0]
 8004c5a:	482f      	ldr	r0, [pc, #188]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4403      	add	r3, r0
 8004c68:	3304      	adds	r3, #4
 8004c6a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004c6c:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	4929      	ldr	r1, [pc, #164]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3308      	adds	r3, #8
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	4825      	ldr	r0, [pc, #148]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4403      	add	r3, r0
 8004c90:	3308      	adds	r3, #8
 8004c92:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004c94:	4b1f      	ldr	r3, [pc, #124]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	1e5a      	subs	r2, r3, #1
 8004c9a:	491f      	ldr	r1, [pc, #124]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	481b      	ldr	r0, [pc, #108]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4403      	add	r3, r0
 8004cb8:	330c      	adds	r3, #12
 8004cba:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004cbc:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	1e5a      	subs	r2, r3, #1
 8004cc2:	4915      	ldr	r1, [pc, #84]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	3310      	adds	r3, #16
 8004cd0:	6819      	ldr	r1, [r3, #0]
 8004cd2:	4811      	ldr	r0, [pc, #68]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4403      	add	r3, r0
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	1e5a      	subs	r2, r3, #1
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <SYSVIEW_DeleteTask+0x174>)
 8004cf4:	4413      	add	r3, r2
 8004cf6:	2214      	movs	r2, #20
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fb26 	bl	800634c <memset>
    _NumTasks--;
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	4a03      	ldr	r2, [pc, #12]	; (8004d14 <SYSVIEW_DeleteTask+0x170>)
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e000      	b.n	8004d0e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004d0c:	bf00      	nop
  }
}
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20012ed0 	.word	0x20012ed0
 8004d18:	20012e30 	.word	0x20012e30

08004d1c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d2a:	f107 0314 	add.w	r3, r7, #20
 8004d2e:	2214      	movs	r2, #20
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 fb0a 	bl	800634c <memset>
  TaskInfo.TaskID     = TaskID;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 feeb 	bl	8005b2c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d56:	bf00      	nop
 8004d58:	3728      	adds	r7, #40	; 0x28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <_DoInit+0x98>)
 8004d68:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2203      	movs	r2, #3
 8004d74:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <_DoInit+0x9c>)
 8004d7a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <_DoInit+0xa0>)
 8004d80:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d88:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <_DoInit+0x9c>)
 8004da0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <_DoInit+0xa4>)
 8004da6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2210      	movs	r2, #16
 8004dac:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3307      	adds	r3, #7
 8004dc4:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <_DoInit+0xa8>)
 8004dc6:	6810      	ldr	r0, [r2, #0]
 8004dc8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004dca:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <_DoInit+0xac>)
 8004dd2:	6810      	ldr	r0, [r2, #0]
 8004dd4:	6018      	str	r0, [r3, #0]
 8004dd6:	8891      	ldrh	r1, [r2, #4]
 8004dd8:	7992      	ldrb	r2, [r2, #6]
 8004dda:	8099      	strh	r1, [r3, #4]
 8004ddc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004dde:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004de8:	f3bf 8f5f 	dmb	sy
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	20012ed4 	.word	0x20012ed4
 8004dfc:	08006428 	.word	0x08006428
 8004e00:	20012f7c 	.word	0x20012f7c
 8004e04:	2001337c 	.word	0x2001337c
 8004e08:	08006434 	.word	0x08006434
 8004e0c:	08006438 	.word	0x08006438

08004e10 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08c      	sub	sp, #48	; 0x30
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e1c:	4b3e      	ldr	r3, [pc, #248]	; (8004f18 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e1e:	623b      	str	r3, [r7, #32]
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <SEGGER_RTT_ReadNoLock+0x1e>
 8004e2a:	f7ff ff99 	bl	8004d60 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4613      	mov	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4413      	add	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	3360      	adds	r3, #96	; 0x60
 8004e3a:	4a37      	ldr	r2, [pc, #220]	; (8004f18 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e3c:	4413      	add	r3, r2
 8004e3e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e50:	2300      	movs	r3, #0
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d92b      	bls.n	8004eb4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	bf28      	it	cs
 8004e6e:	4613      	movcs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	4413      	add	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	6939      	ldr	r1, [r7, #16]
 8004e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e82:	f001 fa55 	bl	8006330 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	4413      	add	r3, r2
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d101      	bne.n	8004eb4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	bf28      	it	cs
 8004ec4:	4613      	movcs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d019      	beq.n	8004f02 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed4:	4413      	add	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	6939      	ldr	r1, [r7, #16]
 8004edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ede:	f001 fa27 	bl	8006330 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4413      	add	r3, r2
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f0c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3730      	adds	r7, #48	; 0x30
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20012ed4 	.word	0x20012ed4

08004f1c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f2c:	e002      	b.n	8004f34 <_EncodeStr+0x18>
    Len++;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3301      	adds	r3, #1
 8004f32:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f6      	bne.n	8004f2e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d901      	bls.n	8004f4c <_EncodeStr+0x30>
    Len = Limit;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2bfe      	cmp	r3, #254	; 0xfe
 8004f50:	d806      	bhi.n	8004f60 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	60fa      	str	r2, [r7, #12]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e011      	b.n	8004f84 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	60fa      	str	r2, [r7, #12]
 8004f66:	22ff      	movs	r2, #255	; 0xff
 8004f68:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	60fa      	str	r2, [r7, #12]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	0a19      	lsrs	r1, r3, #8
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	60fa      	str	r2, [r7, #12]
 8004f80:	b2ca      	uxtb	r2, r1
 8004f82:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f88:	e00a      	b.n	8004fa0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	1c53      	adds	r3, r2, #1
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1c59      	adds	r1, r3, #1
 8004f94:	60f9      	str	r1, [r7, #12]
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	701a      	strb	r2, [r3, #0]
    n++;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d3f0      	bcc.n	8004f8a <_EncodeStr+0x6e>
  }
  return pPayload;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004fd6:	4b36      	ldr	r3, [pc, #216]	; (80050b0 <_HandleIncomingPacket+0xe0>)
 8004fd8:	7e1b      	ldrb	r3, [r3, #24]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	1cfb      	adds	r3, r7, #3
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f7ff ff15 	bl	8004e10 <SEGGER_RTT_ReadNoLock>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	dd54      	ble.n	800509a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	2b80      	cmp	r3, #128	; 0x80
 8004ff4:	d032      	beq.n	800505c <_HandleIncomingPacket+0x8c>
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	dc42      	bgt.n	8005080 <_HandleIncomingPacket+0xb0>
 8004ffa:	2b07      	cmp	r3, #7
 8004ffc:	dc16      	bgt.n	800502c <_HandleIncomingPacket+0x5c>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	dd3e      	ble.n	8005080 <_HandleIncomingPacket+0xb0>
 8005002:	3b01      	subs	r3, #1
 8005004:	2b06      	cmp	r3, #6
 8005006:	d83b      	bhi.n	8005080 <_HandleIncomingPacket+0xb0>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <_HandleIncomingPacket+0x40>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005033 	.word	0x08005033
 8005014:	08005039 	.word	0x08005039
 8005018:	0800503f 	.word	0x0800503f
 800501c:	08005045 	.word	0x08005045
 8005020:	0800504b 	.word	0x0800504b
 8005024:	08005051 	.word	0x08005051
 8005028:	08005057 	.word	0x08005057
 800502c:	2b7f      	cmp	r3, #127	; 0x7f
 800502e:	d036      	beq.n	800509e <_HandleIncomingPacket+0xce>
 8005030:	e026      	b.n	8005080 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005032:	f000 fc01 	bl	8005838 <SEGGER_SYSVIEW_Start>
      break;
 8005036:	e037      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005038:	f000 fcb8 	bl	80059ac <SEGGER_SYSVIEW_Stop>
      break;
 800503c:	e034      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800503e:	f000 fe6d 	bl	8005d1c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005042:	e031      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005044:	f000 fe56 	bl	8005cf4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005048:	e02e      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800504a:	f000 fcd5 	bl	80059f8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800504e:	e02b      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005050:	f001 f8a0 	bl	8006194 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005054:	e028      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005056:	f001 f87f 	bl	8006158 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800505a:	e025      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800505c:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <_HandleIncomingPacket+0xe0>)
 800505e:	7e1b      	ldrb	r3, [r3, #24]
 8005060:	4618      	mov	r0, r3
 8005062:	1cfb      	adds	r3, r7, #3
 8005064:	2201      	movs	r2, #1
 8005066:	4619      	mov	r1, r3
 8005068:	f7ff fed2 	bl	8004e10 <SEGGER_RTT_ReadNoLock>
 800506c:	4603      	mov	r3, r0
 800506e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	dd15      	ble.n	80050a2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 ffed 	bl	8006058 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800507e:	e010      	b.n	80050a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	b25b      	sxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	da0e      	bge.n	80050a6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <_HandleIncomingPacket+0xe0>)
 800508a:	7e1b      	ldrb	r3, [r3, #24]
 800508c:	4618      	mov	r0, r3
 800508e:	1cfb      	adds	r3, r7, #3
 8005090:	2201      	movs	r2, #1
 8005092:	4619      	mov	r1, r3
 8005094:	f7ff febc 	bl	8004e10 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005098:	e005      	b.n	80050a6 <_HandleIncomingPacket+0xd6>
    }
  }
 800509a:	bf00      	nop
 800509c:	e004      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
      break;
 800509e:	bf00      	nop
 80050a0:	e002      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
      break;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <_HandleIncomingPacket+0xd8>
      break;
 80050a6:	bf00      	nop
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	2001338c 	.word	0x2001338c

080050b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08c      	sub	sp, #48	; 0x30
 80050b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80050ba:	2301      	movs	r3, #1
 80050bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80050be:	1d3b      	adds	r3, r7, #4
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c8:	4b31      	ldr	r3, [pc, #196]	; (8005190 <_TrySendOverflowPacket+0xdc>)
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ce:	e00b      	b.n	80050e8 <_TrySendOverflowPacket+0x34>
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	1c59      	adds	r1, r3, #1
 80050d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	09db      	lsrs	r3, r3, #7
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	2b7f      	cmp	r3, #127	; 0x7f
 80050ec:	d8f0      	bhi.n	80050d0 <_TrySendOverflowPacket+0x1c>
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050fe:	4b25      	ldr	r3, [pc, #148]	; (8005194 <_TrySendOverflowPacket+0xe0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005104:	4b22      	ldr	r3, [pc, #136]	; (8005190 <_TrySendOverflowPacket+0xdc>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	623b      	str	r3, [r7, #32]
 8005116:	e00b      	b.n	8005130 <_TrySendOverflowPacket+0x7c>
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	1c59      	adds	r1, r3, #1
 8005120:	6279      	str	r1, [r7, #36]	; 0x24
 8005122:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	09db      	lsrs	r3, r3, #7
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	2b7f      	cmp	r3, #127	; 0x7f
 8005134:	d8f0      	bhi.n	8005118 <_TrySendOverflowPacket+0x64>
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	627a      	str	r2, [r7, #36]	; 0x24
 800513c:	6a3a      	ldr	r2, [r7, #32]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <_TrySendOverflowPacket+0xdc>)
 8005148:	785b      	ldrb	r3, [r3, #1]
 800514a:	4618      	mov	r0, r3
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	461a      	mov	r2, r3
 8005154:	1d3b      	adds	r3, r7, #4
 8005156:	4619      	mov	r1, r3
 8005158:	f7fb f842 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800515c:	4603      	mov	r3, r0
 800515e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <_TrySendOverflowPacket+0xdc>)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800516c:	4b08      	ldr	r3, [pc, #32]	; (8005190 <_TrySendOverflowPacket+0xdc>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	3b01      	subs	r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	4b06      	ldr	r3, [pc, #24]	; (8005190 <_TrySendOverflowPacket+0xdc>)
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e004      	b.n	8005184 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <_TrySendOverflowPacket+0xdc>)
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	3301      	adds	r3, #1
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <_TrySendOverflowPacket+0xdc>)
 8005182:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005184:	693b      	ldr	r3, [r7, #16]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3730      	adds	r7, #48	; 0x30
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	2001338c 	.word	0x2001338c
 8005194:	e0001004 	.word	0xe0001004

08005198 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80051a4:	4b6c      	ldr	r3, [pc, #432]	; (8005358 <_SendPacket+0x1c0>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d010      	beq.n	80051ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80051ac:	4b6a      	ldr	r3, [pc, #424]	; (8005358 <_SendPacket+0x1c0>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80a3 	beq.w	80052fc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80051b6:	4b68      	ldr	r3, [pc, #416]	; (8005358 <_SendPacket+0x1c0>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d109      	bne.n	80051d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80051be:	f7ff ff79 	bl	80050b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80051c2:	4b65      	ldr	r3, [pc, #404]	; (8005358 <_SendPacket+0x1c0>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	f040 809a 	bne.w	8005300 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80051cc:	e001      	b.n	80051d2 <_SendPacket+0x3a>
    goto Send;
 80051ce:	bf00      	nop
 80051d0:	e000      	b.n	80051d4 <_SendPacket+0x3c>
Send:
 80051d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b1f      	cmp	r3, #31
 80051d8:	d809      	bhi.n	80051ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80051da:	4b5f      	ldr	r3, [pc, #380]	; (8005358 <_SendPacket+0x1c0>)
 80051dc:	69da      	ldr	r2, [r3, #28]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f040 808b 	bne.w	8005304 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b17      	cmp	r3, #23
 80051f2:	d807      	bhi.n	8005204 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e03d      	b.n	8005280 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b7f      	cmp	r3, #127	; 0x7f
 8005210:	d912      	bls.n	8005238 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	09da      	lsrs	r2, r3, #7
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b01      	subs	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	3a01      	subs	r2, #1
 800522a:	60fa      	str	r2, [r7, #12]
 800522c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e006      	b.n	8005246 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3b01      	subs	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b7f      	cmp	r3, #127	; 0x7f
 800524a:	d912      	bls.n	8005272 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	09da      	lsrs	r2, r3, #7
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3b01      	subs	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	3a01      	subs	r2, #1
 8005264:	60fa      	str	r2, [r7, #12]
 8005266:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e006      	b.n	8005280 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3b01      	subs	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005280:	4b36      	ldr	r3, [pc, #216]	; (800535c <_SendPacket+0x1c4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005286:	4b34      	ldr	r3, [pc, #208]	; (8005358 <_SendPacket+0x1c0>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	623b      	str	r3, [r7, #32]
 8005298:	e00b      	b.n	80052b2 <_SendPacket+0x11a>
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	1c59      	adds	r1, r3, #1
 80052a2:	6279      	str	r1, [r7, #36]	; 0x24
 80052a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	09db      	lsrs	r3, r3, #7
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	2b7f      	cmp	r3, #127	; 0x7f
 80052b6:	d8f0      	bhi.n	800529a <_SendPacket+0x102>
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	627a      	str	r2, [r7, #36]	; 0x24
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80052c8:	4b23      	ldr	r3, [pc, #140]	; (8005358 <_SendPacket+0x1c0>)
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	4618      	mov	r0, r3
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	f7fa ff82 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80052dc:	4603      	mov	r3, r0
 80052de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80052e6:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <_SendPacket+0x1c0>)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	60d3      	str	r3, [r2, #12]
 80052ec:	e00b      	b.n	8005306 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80052ee:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <_SendPacket+0x1c0>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	4b18      	ldr	r3, [pc, #96]	; (8005358 <_SendPacket+0x1c0>)
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e004      	b.n	8005306 <_SendPacket+0x16e>
    goto SendDone;
 80052fc:	bf00      	nop
 80052fe:	e002      	b.n	8005306 <_SendPacket+0x16e>
      goto SendDone;
 8005300:	bf00      	nop
 8005302:	e000      	b.n	8005306 <_SendPacket+0x16e>
      goto SendDone;
 8005304:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005306:	4b14      	ldr	r3, [pc, #80]	; (8005358 <_SendPacket+0x1c0>)
 8005308:	7e1b      	ldrb	r3, [r3, #24]
 800530a:	4619      	mov	r1, r3
 800530c:	4a14      	ldr	r2, [pc, #80]	; (8005360 <_SendPacket+0x1c8>)
 800530e:	460b      	mov	r3, r1
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	440b      	add	r3, r1
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	4413      	add	r3, r2
 8005318:	336c      	adds	r3, #108	; 0x6c
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <_SendPacket+0x1c0>)
 800531e:	7e1b      	ldrb	r3, [r3, #24]
 8005320:	4618      	mov	r0, r3
 8005322:	490f      	ldr	r1, [pc, #60]	; (8005360 <_SendPacket+0x1c8>)
 8005324:	4603      	mov	r3, r0
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4403      	add	r3, r0
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	440b      	add	r3, r1
 800532e:	3370      	adds	r3, #112	; 0x70
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d00b      	beq.n	800534e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <_SendPacket+0x1c0>)
 8005338:	789b      	ldrb	r3, [r3, #2]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d107      	bne.n	800534e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <_SendPacket+0x1c0>)
 8005340:	2201      	movs	r2, #1
 8005342:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005344:	f7ff fe44 	bl	8004fd0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <_SendPacket+0x1c0>)
 800534a:	2200      	movs	r2, #0
 800534c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800534e:	bf00      	nop
 8005350:	3728      	adds	r7, #40	; 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	2001338c 	.word	0x2001338c
 800535c:	e0001004 	.word	0xe0001004
 8005360:	20012ed4 	.word	0x20012ed4

08005364 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800536c:	f3ef 8311 	mrs	r3, BASEPRI
 8005370:	f04f 0120 	mov.w	r1, #32
 8005374:	f381 8811 	msr	BASEPRI, r1
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	4808      	ldr	r0, [pc, #32]	; (800539c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800537c:	f7ff fe1b 	bl	8004fb6 <_PreparePacket>
 8005380:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68b8      	ldr	r0, [r7, #8]
 8005388:	f7ff ff06 	bl	8005198 <_SendPacket>
  RECORD_END();
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f383 8811 	msr	BASEPRI, r3
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	200133bc 	.word	0x200133bc

080053a0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053aa:	f3ef 8311 	mrs	r3, BASEPRI
 80053ae:	f04f 0120 	mov.w	r1, #32
 80053b2:	f381 8811 	msr	BASEPRI, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	4816      	ldr	r0, [pc, #88]	; (8005414 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80053ba:	f7ff fdfc 	bl	8004fb6 <_PreparePacket>
 80053be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	e00b      	b.n	80053e6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	1c59      	adds	r1, r3, #1
 80053d6:	61f9      	str	r1, [r7, #28]
 80053d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	09db      	lsrs	r3, r3, #7
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ea:	d8f0      	bhi.n	80053ce <SEGGER_SYSVIEW_RecordU32+0x2e>
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	61fa      	str	r2, [r7, #28]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	6938      	ldr	r0, [r7, #16]
 8005402:	f7ff fec9 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f383 8811 	msr	BASEPRI, r3
}
 800540c:	bf00      	nop
 800540e:	3720      	adds	r7, #32
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	200133bc 	.word	0x200133bc

08005418 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005424:	f3ef 8311 	mrs	r3, BASEPRI
 8005428:	f04f 0120 	mov.w	r1, #32
 800542c:	f381 8811 	msr	BASEPRI, r1
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	4825      	ldr	r0, [pc, #148]	; (80054c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005434:	f7ff fdbf 	bl	8004fb6 <_PreparePacket>
 8005438:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
 8005446:	e00b      	b.n	8005460 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	b2da      	uxtb	r2, r3
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005452:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	09db      	lsrs	r3, r3, #7
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	2b7f      	cmp	r3, #127	; 0x7f
 8005464:	d8f0      	bhi.n	8005448 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800546c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	623b      	str	r3, [r7, #32]
 800547e:	e00b      	b.n	8005498 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	b2da      	uxtb	r2, r3
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	1c59      	adds	r1, r3, #1
 8005488:	6279      	str	r1, [r7, #36]	; 0x24
 800548a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	09db      	lsrs	r3, r3, #7
 8005496:	623b      	str	r3, [r7, #32]
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	2b7f      	cmp	r3, #127	; 0x7f
 800549c:	d8f0      	bhi.n	8005480 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	627a      	str	r2, [r7, #36]	; 0x24
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	69b8      	ldr	r0, [r7, #24]
 80054b4:	f7ff fe70 	bl	8005198 <_SendPacket>
  RECORD_END();
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f383 8811 	msr	BASEPRI, r3
}
 80054be:	bf00      	nop
 80054c0:	3730      	adds	r7, #48	; 0x30
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200133bc 	.word	0x200133bc

080054cc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	; 0x38
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80054da:	f3ef 8311 	mrs	r3, BASEPRI
 80054de:	f04f 0120 	mov.w	r1, #32
 80054e2:	f381 8811 	msr	BASEPRI, r1
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	4832      	ldr	r0, [pc, #200]	; (80055b4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80054ea:	f7ff fd64 	bl	8004fb6 <_PreparePacket>
 80054ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	633b      	str	r3, [r7, #48]	; 0x30
 80054fc:	e00b      	b.n	8005516 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	b2da      	uxtb	r2, r3
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	1c59      	adds	r1, r3, #1
 8005506:	6379      	str	r1, [r7, #52]	; 0x34
 8005508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	09db      	lsrs	r3, r3, #7
 8005514:	633b      	str	r3, [r7, #48]	; 0x30
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	2b7f      	cmp	r3, #127	; 0x7f
 800551a:	d8f0      	bhi.n	80054fe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800551c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	637a      	str	r2, [r7, #52]	; 0x34
 8005522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
 8005534:	e00b      	b.n	800554e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	b2da      	uxtb	r2, r3
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	1c59      	adds	r1, r3, #1
 800553e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005540:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	09db      	lsrs	r3, r3, #7
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	2b7f      	cmp	r3, #127	; 0x7f
 8005552:	d8f0      	bhi.n	8005536 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800555a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	623b      	str	r3, [r7, #32]
 800556c:	e00b      	b.n	8005586 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	1c59      	adds	r1, r3, #1
 8005576:	6279      	str	r1, [r7, #36]	; 0x24
 8005578:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	09db      	lsrs	r3, r3, #7
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	2b7f      	cmp	r3, #127	; 0x7f
 800558a:	d8f0      	bhi.n	800556e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	627a      	str	r2, [r7, #36]	; 0x24
 8005592:	6a3a      	ldr	r2, [r7, #32]
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	6979      	ldr	r1, [r7, #20]
 80055a0:	69b8      	ldr	r0, [r7, #24]
 80055a2:	f7ff fdf9 	bl	8005198 <_SendPacket>
  RECORD_END();
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f383 8811 	msr	BASEPRI, r3
}
 80055ac:	bf00      	nop
 80055ae:	3738      	adds	r7, #56	; 0x38
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	200133bc 	.word	0x200133bc

080055b8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b090      	sub	sp, #64	; 0x40
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80055c6:	f3ef 8311 	mrs	r3, BASEPRI
 80055ca:	f04f 0120 	mov.w	r1, #32
 80055ce:	f381 8811 	msr	BASEPRI, r1
 80055d2:	61fb      	str	r3, [r7, #28]
 80055d4:	4840      	ldr	r0, [pc, #256]	; (80056d8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80055d6:	f7ff fcee 	bl	8004fb6 <_PreparePacket>
 80055da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055e8:	e00b      	b.n	8005602 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	1c59      	adds	r1, r3, #1
 80055f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80055f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	09db      	lsrs	r3, r3, #7
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	2b7f      	cmp	r3, #127	; 0x7f
 8005606:	d8f0      	bhi.n	80055ea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800560e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005616:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	633b      	str	r3, [r7, #48]	; 0x30
 8005620:	e00b      	b.n	800563a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	b2da      	uxtb	r2, r3
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	1c59      	adds	r1, r3, #1
 800562a:	6379      	str	r1, [r7, #52]	; 0x34
 800562c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	09db      	lsrs	r3, r3, #7
 8005638:	633b      	str	r3, [r7, #48]	; 0x30
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	2b7f      	cmp	r3, #127	; 0x7f
 800563e:	d8f0      	bhi.n	8005622 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	637a      	str	r2, [r7, #52]	; 0x34
 8005646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
 8005658:	e00b      	b.n	8005672 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	b2da      	uxtb	r2, r3
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	1c59      	adds	r1, r3, #1
 8005662:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005664:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	09db      	lsrs	r3, r3, #7
 8005670:	62bb      	str	r3, [r7, #40]	; 0x28
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	2b7f      	cmp	r3, #127	; 0x7f
 8005676:	d8f0      	bhi.n	800565a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800567e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
 800568c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	e00b      	b.n	80056aa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	1c59      	adds	r1, r3, #1
 800569a:	6279      	str	r1, [r7, #36]	; 0x24
 800569c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	09db      	lsrs	r3, r3, #7
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	2b7f      	cmp	r3, #127	; 0x7f
 80056ae:	d8f0      	bhi.n	8005692 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	627a      	str	r2, [r7, #36]	; 0x24
 80056b6:	6a3a      	ldr	r2, [r7, #32]
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	6979      	ldr	r1, [r7, #20]
 80056c4:	69b8      	ldr	r0, [r7, #24]
 80056c6:	f7ff fd67 	bl	8005198 <_SendPacket>
  RECORD_END();
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f383 8811 	msr	BASEPRI, r3
}
 80056d0:	bf00      	nop
 80056d2:	3740      	adds	r7, #64	; 0x40
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	200133bc 	.word	0x200133bc

080056dc <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b092      	sub	sp, #72	; 0x48
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80056ea:	f3ef 8311 	mrs	r3, BASEPRI
 80056ee:	f04f 0120 	mov.w	r1, #32
 80056f2:	f381 8811 	msr	BASEPRI, r1
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	484e      	ldr	r0, [pc, #312]	; (8005834 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80056fa:	f7ff fc5c 	bl	8004fb6 <_PreparePacket>
 80056fe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	647b      	str	r3, [r7, #68]	; 0x44
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	643b      	str	r3, [r7, #64]	; 0x40
 800570c:	e00b      	b.n	8005726 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800570e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005710:	b2da      	uxtb	r2, r3
 8005712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005714:	1c59      	adds	r1, r3, #1
 8005716:	6479      	str	r1, [r7, #68]	; 0x44
 8005718:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005722:	09db      	lsrs	r3, r3, #7
 8005724:	643b      	str	r3, [r7, #64]	; 0x40
 8005726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005728:	2b7f      	cmp	r3, #127	; 0x7f
 800572a:	d8f0      	bhi.n	800570e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800572c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	647a      	str	r2, [r7, #68]	; 0x44
 8005732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800573a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	63bb      	str	r3, [r7, #56]	; 0x38
 8005744:	e00b      	b.n	800575e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	b2da      	uxtb	r2, r3
 800574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574c:	1c59      	adds	r1, r3, #1
 800574e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	09db      	lsrs	r3, r3, #7
 800575c:	63bb      	str	r3, [r7, #56]	; 0x38
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2b7f      	cmp	r3, #127	; 0x7f
 8005762:	d8f0      	bhi.n	8005746 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	63fa      	str	r2, [r7, #60]	; 0x3c
 800576a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005772:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	633b      	str	r3, [r7, #48]	; 0x30
 800577c:	e00b      	b.n	8005796 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	b2da      	uxtb	r2, r3
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	1c59      	adds	r1, r3, #1
 8005786:	6379      	str	r1, [r7, #52]	; 0x34
 8005788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	09db      	lsrs	r3, r3, #7
 8005794:	633b      	str	r3, [r7, #48]	; 0x30
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2b7f      	cmp	r3, #127	; 0x7f
 800579a:	d8f0      	bhi.n	800577e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	637a      	str	r2, [r7, #52]	; 0x34
 80057a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b4:	e00b      	b.n	80057ce <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	1c59      	adds	r1, r3, #1
 80057be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	09db      	lsrs	r3, r3, #7
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	2b7f      	cmp	r3, #127	; 0x7f
 80057d2:	d8f0      	bhi.n	80057b6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
 80057e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	e00b      	b.n	8005806 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	6279      	str	r1, [r7, #36]	; 0x24
 80057f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	09db      	lsrs	r3, r3, #7
 8005804:	623b      	str	r3, [r7, #32]
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	2b7f      	cmp	r3, #127	; 0x7f
 800580a:	d8f0      	bhi.n	80057ee <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	627a      	str	r2, [r7, #36]	; 0x24
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	69b8      	ldr	r0, [r7, #24]
 8005822:	f7ff fcb9 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f383 8811 	msr	BASEPRI, r3
}
 800582c:	bf00      	nop
 800582e:	3748      	adds	r7, #72	; 0x48
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	200133bc 	.word	0x200133bc

08005838 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	; 0x30
 800583c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800583e:	4b58      	ldr	r3, [pc, #352]	; (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005844:	f3ef 8311 	mrs	r3, BASEPRI
 8005848:	f04f 0120 	mov.w	r1, #32
 800584c:	f381 8811 	msr	BASEPRI, r1
 8005850:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005852:	4b53      	ldr	r3, [pc, #332]	; (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	220a      	movs	r2, #10
 8005858:	4952      	ldr	r1, [pc, #328]	; (80059a4 <SEGGER_SYSVIEW_Start+0x16c>)
 800585a:	4618      	mov	r0, r3
 800585c:	f7fa fcc0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005866:	200a      	movs	r0, #10
 8005868:	f7ff fd7c 	bl	8005364 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800586c:	f3ef 8311 	mrs	r3, BASEPRI
 8005870:	f04f 0120 	mov.w	r1, #32
 8005874:	f381 8811 	msr	BASEPRI, r1
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	484b      	ldr	r0, [pc, #300]	; (80059a8 <SEGGER_SYSVIEW_Start+0x170>)
 800587c:	f7ff fb9b 	bl	8004fb6 <_PreparePacket>
 8005880:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588a:	4b45      	ldr	r3, [pc, #276]	; (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005890:	e00b      	b.n	80058aa <SEGGER_SYSVIEW_Start+0x72>
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	b2da      	uxtb	r2, r3
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	1c59      	adds	r1, r3, #1
 800589a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800589c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	09db      	lsrs	r3, r3, #7
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	2b7f      	cmp	r3, #127	; 0x7f
 80058ae:	d8f0      	bhi.n	8005892 <SEGGER_SYSVIEW_Start+0x5a>
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
 80058c4:	4b36      	ldr	r3, [pc, #216]	; (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	e00b      	b.n	80058e4 <SEGGER_SYSVIEW_Start+0xac>
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	6279      	str	r1, [r7, #36]	; 0x24
 80058d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	09db      	lsrs	r3, r3, #7
 80058e2:	623b      	str	r3, [r7, #32]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2b7f      	cmp	r3, #127	; 0x7f
 80058e8:	d8f0      	bhi.n	80058cc <SEGGER_SYSVIEW_Start+0x94>
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	627a      	str	r2, [r7, #36]	; 0x24
 80058f0:	6a3a      	ldr	r2, [r7, #32]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	4b28      	ldr	r3, [pc, #160]	; (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e00b      	b.n	800591e <SEGGER_SYSVIEW_Start+0xe6>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1c59      	adds	r1, r3, #1
 800590e:	61f9      	str	r1, [r7, #28]
 8005910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	09db      	lsrs	r3, r3, #7
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b7f      	cmp	r3, #127	; 0x7f
 8005922:	d8f0      	bhi.n	8005906 <SEGGER_SYSVIEW_Start+0xce>
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	61fa      	str	r2, [r7, #28]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	2300      	movs	r3, #0
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	e00b      	b.n	8005956 <SEGGER_SYSVIEW_Start+0x11e>
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	1c59      	adds	r1, r3, #1
 8005946:	6179      	str	r1, [r7, #20]
 8005948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	09db      	lsrs	r3, r3, #7
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b7f      	cmp	r3, #127	; 0x7f
 800595a:	d8f0      	bhi.n	800593e <SEGGER_SYSVIEW_Start+0x106>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	617a      	str	r2, [r7, #20]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800596c:	2218      	movs	r2, #24
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fc11 	bl	8005198 <_SendPacket>
      RECORD_END();
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800597c:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005984:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800598a:	f000 f9c7 	bl	8005d1c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800598e:	f000 f9b1 	bl	8005cf4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005992:	f000 fbff 	bl	8006194 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005996:	bf00      	nop
 8005998:	3730      	adds	r7, #48	; 0x30
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	2001338c 	.word	0x2001338c
 80059a4:	08006458 	.word	0x08006458
 80059a8:	200133bc 	.word	0x200133bc

080059ac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059b2:	f3ef 8311 	mrs	r3, BASEPRI
 80059b6:	f04f 0120 	mov.w	r1, #32
 80059ba:	f381 8811 	msr	BASEPRI, r1
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	480b      	ldr	r0, [pc, #44]	; (80059f0 <SEGGER_SYSVIEW_Stop+0x44>)
 80059c2:	f7ff faf8 	bl	8004fb6 <_PreparePacket>
 80059c6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80059d0:	220b      	movs	r2, #11
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6838      	ldr	r0, [r7, #0]
 80059d6:	f7ff fbdf 	bl	8005198 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80059da:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f383 8811 	msr	BASEPRI, r3
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	200133bc 	.word	0x200133bc
 80059f4:	2001338c 	.word	0x2001338c

080059f8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005a02:	f04f 0120 	mov.w	r1, #32
 8005a06:	f381 8811 	msr	BASEPRI, r1
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	4845      	ldr	r0, [pc, #276]	; (8005b24 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005a0e:	f7ff fad2 	bl	8004fb6 <_PreparePacket>
 8005a12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1c:	4b42      	ldr	r3, [pc, #264]	; (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a22:	e00b      	b.n	8005a3c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	1c59      	adds	r1, r3, #1
 8005a2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	09db      	lsrs	r3, r3, #7
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a40:	d8f0      	bhi.n	8005a24 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
 8005a56:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	e00b      	b.n	8005a76 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	1c59      	adds	r1, r3, #1
 8005a66:	6279      	str	r1, [r7, #36]	; 0x24
 8005a68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	09db      	lsrs	r3, r3, #7
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	2b7f      	cmp	r3, #127	; 0x7f
 8005a7a:	d8f0      	bhi.n	8005a5e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	627a      	str	r2, [r7, #36]	; 0x24
 8005a82:	6a3a      	ldr	r2, [r7, #32]
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	e00b      	b.n	8005ab0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	61f9      	str	r1, [r7, #28]
 8005aa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	09db      	lsrs	r3, r3, #7
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab4:	d8f0      	bhi.n	8005a98 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	61fa      	str	r2, [r7, #28]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	e00b      	b.n	8005ae8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	6179      	str	r1, [r7, #20]
 8005ada:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	09db      	lsrs	r3, r3, #7
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b7f      	cmp	r3, #127	; 0x7f
 8005aec:	d8f0      	bhi.n	8005ad0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	617a      	str	r2, [r7, #20]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005afe:	2218      	movs	r2, #24
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	68b8      	ldr	r0, [r7, #8]
 8005b04:	f7ff fb48 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	4798      	blx	r3
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3730      	adds	r7, #48	; 0x30
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	200133bc 	.word	0x200133bc
 8005b28:	2001338c 	.word	0x2001338c

08005b2c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b092      	sub	sp, #72	; 0x48
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005b34:	f3ef 8311 	mrs	r3, BASEPRI
 8005b38:	f04f 0120 	mov.w	r1, #32
 8005b3c:	f381 8811 	msr	BASEPRI, r1
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	486a      	ldr	r0, [pc, #424]	; (8005cec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005b44:	f7ff fa37 	bl	8004fb6 <_PreparePacket>
 8005b48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	647b      	str	r3, [r7, #68]	; 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b66      	ldr	r3, [pc, #408]	; (8005cf0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b5e:	e00b      	b.n	8005b78 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	6479      	str	r1, [r7, #68]	; 0x44
 8005b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b74:	09db      	lsrs	r3, r3, #7
 8005b76:	643b      	str	r3, [r7, #64]	; 0x40
 8005b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7c:	d8f0      	bhi.n	8005b60 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	647a      	str	r2, [r7, #68]	; 0x44
 8005b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b98:	e00b      	b.n	8005bb2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba0:	1c59      	adds	r1, r3, #1
 8005ba2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	09db      	lsrs	r3, r3, #7
 8005bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb6:	d8f0      	bhi.n	8005b9a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff f9a3 	bl	8004f1c <_EncodeStr>
 8005bd6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005bd8:	2209      	movs	r2, #9
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	6938      	ldr	r0, [r7, #16]
 8005bde:	f7ff fadb 	bl	8005198 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b40      	ldr	r3, [pc, #256]	; (8005cf0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf6:	e00b      	b.n	8005c10 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	6379      	str	r1, [r7, #52]	; 0x34
 8005c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	09db      	lsrs	r3, r3, #7
 8005c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	2b7f      	cmp	r3, #127	; 0x7f
 8005c14:	d8f0      	bhi.n	8005bf8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	637a      	str	r2, [r7, #52]	; 0x34
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c30:	e00b      	b.n	8005c4a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	1c59      	adds	r1, r3, #1
 8005c3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	09db      	lsrs	r3, r3, #7
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c4e:	d8f0      	bhi.n	8005c32 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	623b      	str	r3, [r7, #32]
 8005c6a:	e00b      	b.n	8005c84 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	1c59      	adds	r1, r3, #1
 8005c74:	6279      	str	r1, [r7, #36]	; 0x24
 8005c76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	09db      	lsrs	r3, r3, #7
 8005c82:	623b      	str	r3, [r7, #32]
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	2b7f      	cmp	r3, #127	; 0x7f
 8005c88:	d8f0      	bhi.n	8005c6c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	627a      	str	r2, [r7, #36]	; 0x24
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	e00b      	b.n	8005cbc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	1c59      	adds	r1, r3, #1
 8005cac:	61f9      	str	r1, [r7, #28]
 8005cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	09db      	lsrs	r3, r3, #7
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc0:	d8f0      	bhi.n	8005ca4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	61fa      	str	r2, [r7, #28]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005cd2:	2215      	movs	r2, #21
 8005cd4:	68f9      	ldr	r1, [r7, #12]
 8005cd6:	6938      	ldr	r0, [r7, #16]
 8005cd8:	f7ff fa5e 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f383 8811 	msr	BASEPRI, r3
}
 8005ce2:	bf00      	nop
 8005ce4:	3748      	adds	r7, #72	; 0x48
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	200133bc 	.word	0x200133bc
 8005cf0:	2001338c 	.word	0x2001338c

08005cf4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005cf8:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005d0a:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4798      	blx	r3
  }
}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	2001338c 	.word	0x2001338c

08005d1c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005d1c:	b590      	push	{r4, r7, lr}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01a      	beq.n	8005d60 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d015      	beq.n	8005d60 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d34:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4798      	blx	r3
 8005d3c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d40:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	000a      	movs	r2, r1
 8005d50:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d52:	4613      	mov	r3, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	4621      	mov	r1, r4
 8005d58:	200d      	movs	r0, #13
 8005d5a:	f7ff fb5d 	bl	8005418 <SEGGER_SYSVIEW_RecordU32x2>
 8005d5e:	e006      	b.n	8005d6e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	200c      	movs	r0, #12
 8005d68:	f7ff fb1a 	bl	80053a0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd90      	pop	{r4, r7, pc}
 8005d76:	bf00      	nop
 8005d78:	2001338c 	.word	0x2001338c
 8005d7c:	e0001004 	.word	0xe0001004

08005d80 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d86:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8a:	f04f 0120 	mov.w	r1, #32
 8005d8e:	f381 8811 	msr	BASEPRI, r1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	4819      	ldr	r0, [pc, #100]	; (8005dfc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d96:	f7ff f90e 	bl	8004fb6 <_PreparePacket>
 8005d9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005da0:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	e00b      	b.n	8005dcc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	6179      	str	r1, [r7, #20]
 8005dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd0:	d8f0      	bhi.n	8005db4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	617a      	str	r2, [r7, #20]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005de2:	2202      	movs	r2, #2
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	68b8      	ldr	r0, [r7, #8]
 8005de8:	f7ff f9d6 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f383 8811 	msr	BASEPRI, r3
}
 8005df2:	bf00      	nop
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200133bc 	.word	0x200133bc
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0e:	f04f 0120 	mov.w	r1, #32
 8005e12:	f381 8811 	msr	BASEPRI, r1
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	4807      	ldr	r0, [pc, #28]	; (8005e38 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e1a:	f7ff f8cc 	bl	8004fb6 <_PreparePacket>
 8005e1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005e20:	2203      	movs	r2, #3
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6838      	ldr	r0, [r7, #0]
 8005e26:	f7ff f9b7 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f383 8811 	msr	BASEPRI, r3
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200133bc 	.word	0x200133bc

08005e3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e42:	f3ef 8311 	mrs	r3, BASEPRI
 8005e46:	f04f 0120 	mov.w	r1, #32
 8005e4a:	f381 8811 	msr	BASEPRI, r1
 8005e4e:	607b      	str	r3, [r7, #4]
 8005e50:	4807      	ldr	r0, [pc, #28]	; (8005e70 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e52:	f7ff f8b0 	bl	8004fb6 <_PreparePacket>
 8005e56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005e58:	2212      	movs	r2, #18
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6838      	ldr	r0, [r7, #0]
 8005e5e:	f7ff f99b 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f383 8811 	msr	BASEPRI, r3
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	200133bc 	.word	0x200133bc

08005e74 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e7e:	f04f 0120 	mov.w	r1, #32
 8005e82:	f381 8811 	msr	BASEPRI, r1
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	4807      	ldr	r0, [pc, #28]	; (8005ea8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e8a:	f7ff f894 	bl	8004fb6 <_PreparePacket>
 8005e8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e90:	2211      	movs	r2, #17
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6838      	ldr	r0, [r7, #0]
 8005e96:	f7ff f97f 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f383 8811 	msr	BASEPRI, r3
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	200133bc 	.word	0x200133bc

08005eac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb8:	f04f 0120 	mov.w	r1, #32
 8005ebc:	f381 8811 	msr	BASEPRI, r1
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	4819      	ldr	r0, [pc, #100]	; (8005f28 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005ec4:	f7ff f877 	bl	8004fb6 <_PreparePacket>
 8005ec8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ece:	4b17      	ldr	r3, [pc, #92]	; (8005f2c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e00b      	b.n	8005efa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	1c59      	adds	r1, r3, #1
 8005eea:	61f9      	str	r1, [r7, #28]
 8005eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	09db      	lsrs	r3, r3, #7
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b7f      	cmp	r3, #127	; 0x7f
 8005efe:	d8f0      	bhi.n	8005ee2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	61fa      	str	r2, [r7, #28]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005f10:	2208      	movs	r2, #8
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	6938      	ldr	r0, [r7, #16]
 8005f16:	f7ff f93f 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f383 8811 	msr	BASEPRI, r3
}
 8005f20:	bf00      	nop
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200133bc 	.word	0x200133bc
 8005f2c:	2001338c 	.word	0x2001338c

08005f30 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f38:	f3ef 8311 	mrs	r3, BASEPRI
 8005f3c:	f04f 0120 	mov.w	r1, #32
 8005f40:	f381 8811 	msr	BASEPRI, r1
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	4819      	ldr	r0, [pc, #100]	; (8005fac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f48:	f7ff f835 	bl	8004fb6 <_PreparePacket>
 8005f4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	e00b      	b.n	8005f7e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	61f9      	str	r1, [r7, #28]
 8005f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b7f      	cmp	r3, #127	; 0x7f
 8005f82:	d8f0      	bhi.n	8005f66 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	61fa      	str	r2, [r7, #28]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f94:	2204      	movs	r2, #4
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	6938      	ldr	r0, [r7, #16]
 8005f9a:	f7ff f8fd 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f383 8811 	msr	BASEPRI, r3
}
 8005fa4:	bf00      	nop
 8005fa6:	3720      	adds	r7, #32
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	200133bc 	.word	0x200133bc
 8005fb0:	2001338c 	.word	0x2001338c

08005fb4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc0:	f04f 0120 	mov.w	r1, #32
 8005fc4:	f381 8811 	msr	BASEPRI, r1
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	4819      	ldr	r0, [pc, #100]	; (8006030 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005fcc:	f7fe fff3 	bl	8004fb6 <_PreparePacket>
 8005fd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fd6:	4b17      	ldr	r3, [pc, #92]	; (8006034 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e00b      	b.n	8006002 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	61f9      	str	r1, [r7, #28]
 8005ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	09db      	lsrs	r3, r3, #7
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b7f      	cmp	r3, #127	; 0x7f
 8006006:	d8f0      	bhi.n	8005fea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	61fa      	str	r2, [r7, #28]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006018:	2206      	movs	r2, #6
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	6938      	ldr	r0, [r7, #16]
 800601e:	f7ff f8bb 	bl	8005198 <_SendPacket>
  RECORD_END();
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f383 8811 	msr	BASEPRI, r3
}
 8006028:	bf00      	nop
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200133bc 	.word	0x200133bc
 8006034:	2001338c 	.word	0x2001338c

08006038 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	1ad3      	subs	r3, r2, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	2001338c 	.word	0x2001338c

08006058 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	; 0x30
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006062:	4b3b      	ldr	r3, [pc, #236]	; (8006150 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d06d      	beq.n	8006146 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800606a:	4b39      	ldr	r3, [pc, #228]	; (8006150 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006070:	2300      	movs	r3, #0
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
 8006074:	e008      	b.n	8006088 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	3301      	adds	r3, #1
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608c:	429a      	cmp	r2, r3
 800608e:	d3f2      	bcc.n	8006076 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006090:	e000      	b.n	8006094 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006092:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d055      	beq.n	8006146 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800609a:	f3ef 8311 	mrs	r3, BASEPRI
 800609e:	f04f 0120 	mov.w	r1, #32
 80060a2:	f381 8811 	msr	BASEPRI, r1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	482a      	ldr	r0, [pc, #168]	; (8006154 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80060aa:	f7fe ff84 	bl	8004fb6 <_PreparePacket>
 80060ae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	623b      	str	r3, [r7, #32]
 80060bc:	e00b      	b.n	80060d6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	1c59      	adds	r1, r3, #1
 80060c6:	6279      	str	r1, [r7, #36]	; 0x24
 80060c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	09db      	lsrs	r3, r3, #7
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	2b7f      	cmp	r3, #127	; 0x7f
 80060da:	d8f0      	bhi.n	80060be <SEGGER_SYSVIEW_SendModule+0x66>
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	627a      	str	r2, [r7, #36]	; 0x24
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	e00b      	b.n	8006110 <SEGGER_SYSVIEW_SendModule+0xb8>
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	1c59      	adds	r1, r3, #1
 8006100:	61f9      	str	r1, [r7, #28]
 8006102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	09db      	lsrs	r3, r3, #7
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b7f      	cmp	r3, #127	; 0x7f
 8006114:	d8f0      	bhi.n	80060f8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	61fa      	str	r2, [r7, #28]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2280      	movs	r2, #128	; 0x80
 800612c:	4619      	mov	r1, r3
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7fe fef4 	bl	8004f1c <_EncodeStr>
 8006134:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006136:	2216      	movs	r2, #22
 8006138:	68f9      	ldr	r1, [r7, #12]
 800613a:	6938      	ldr	r0, [r7, #16]
 800613c:	f7ff f82c 	bl	8005198 <_SendPacket>
      RECORD_END();
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006146:	bf00      	nop
 8006148:	3730      	adds	r7, #48	; 0x30
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	200133b4 	.word	0x200133b4
 8006154:	200133bc 	.word	0x200133bc

08006158 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00f      	beq.n	8006186 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f2      	bne.n	800616c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200133b4 	.word	0x200133b4

08006194 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800619a:	f3ef 8311 	mrs	r3, BASEPRI
 800619e:	f04f 0120 	mov.w	r1, #32
 80061a2:	f381 8811 	msr	BASEPRI, r1
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	4817      	ldr	r0, [pc, #92]	; (8006208 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80061aa:	f7fe ff04 	bl	8004fb6 <_PreparePacket>
 80061ae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	4b14      	ldr	r3, [pc, #80]	; (800620c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	e00b      	b.n	80061d8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1c59      	adds	r1, r3, #1
 80061c8:	6179      	str	r1, [r7, #20]
 80061ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	09db      	lsrs	r3, r3, #7
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b7f      	cmp	r3, #127	; 0x7f
 80061dc:	d8f0      	bhi.n	80061c0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	617a      	str	r2, [r7, #20]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80061ee:	221b      	movs	r2, #27
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	68b8      	ldr	r0, [r7, #8]
 80061f4:	f7fe ffd0 	bl	8005198 <_SendPacket>
  RECORD_END();
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f383 8811 	msr	BASEPRI, r3
}
 80061fe:	bf00      	nop
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	200133bc 	.word	0x200133bc
 800620c:	200133b8 	.word	0x200133b8

08006210 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	; 0x28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006218:	f3ef 8311 	mrs	r3, BASEPRI
 800621c:	f04f 0120 	mov.w	r1, #32
 8006220:	f381 8811 	msr	BASEPRI, r1
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	4827      	ldr	r0, [pc, #156]	; (80062c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006228:	f7fe fec5 	bl	8004fb6 <_PreparePacket>
 800622c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800622e:	2280      	movs	r2, #128	; 0x80
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	6938      	ldr	r0, [r7, #16]
 8006234:	f7fe fe72 	bl	8004f1c <_EncodeStr>
 8006238:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
 800623e:	2301      	movs	r3, #1
 8006240:	623b      	str	r3, [r7, #32]
 8006242:	e00b      	b.n	800625c <SEGGER_SYSVIEW_Warn+0x4c>
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	1c59      	adds	r1, r3, #1
 800624c:	6279      	str	r1, [r7, #36]	; 0x24
 800624e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	09db      	lsrs	r3, r3, #7
 800625a:	623b      	str	r3, [r7, #32]
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	2b7f      	cmp	r3, #127	; 0x7f
 8006260:	d8f0      	bhi.n	8006244 <SEGGER_SYSVIEW_Warn+0x34>
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	627a      	str	r2, [r7, #36]	; 0x24
 8006268:	6a3a      	ldr	r2, [r7, #32]
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	2300      	movs	r3, #0
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	e00b      	b.n	8006294 <SEGGER_SYSVIEW_Warn+0x84>
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	b2da      	uxtb	r2, r3
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	1c59      	adds	r1, r3, #1
 8006284:	61f9      	str	r1, [r7, #28]
 8006286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	09db      	lsrs	r3, r3, #7
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b7f      	cmp	r3, #127	; 0x7f
 8006298:	d8f0      	bhi.n	800627c <SEGGER_SYSVIEW_Warn+0x6c>
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	61fa      	str	r2, [r7, #28]
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80062aa:	221a      	movs	r2, #26
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	6938      	ldr	r0, [r7, #16]
 80062b0:	f7fe ff72 	bl	8005198 <_SendPacket>
  RECORD_END();
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f383 8811 	msr	BASEPRI, r3
}
 80062ba:	bf00      	nop
 80062bc:	3728      	adds	r7, #40	; 0x28
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	200133bc 	.word	0x200133bc

080062c8 <__libc_init_array>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4d0d      	ldr	r5, [pc, #52]	; (8006300 <__libc_init_array+0x38>)
 80062cc:	4c0d      	ldr	r4, [pc, #52]	; (8006304 <__libc_init_array+0x3c>)
 80062ce:	1b64      	subs	r4, r4, r5
 80062d0:	10a4      	asrs	r4, r4, #2
 80062d2:	2600      	movs	r6, #0
 80062d4:	42a6      	cmp	r6, r4
 80062d6:	d109      	bne.n	80062ec <__libc_init_array+0x24>
 80062d8:	4d0b      	ldr	r5, [pc, #44]	; (8006308 <__libc_init_array+0x40>)
 80062da:	4c0c      	ldr	r4, [pc, #48]	; (800630c <__libc_init_array+0x44>)
 80062dc:	f000 f83e 	bl	800635c <_init>
 80062e0:	1b64      	subs	r4, r4, r5
 80062e2:	10a4      	asrs	r4, r4, #2
 80062e4:	2600      	movs	r6, #0
 80062e6:	42a6      	cmp	r6, r4
 80062e8:	d105      	bne.n	80062f6 <__libc_init_array+0x2e>
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f0:	4798      	blx	r3
 80062f2:	3601      	adds	r6, #1
 80062f4:	e7ee      	b.n	80062d4 <__libc_init_array+0xc>
 80062f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fa:	4798      	blx	r3
 80062fc:	3601      	adds	r6, #1
 80062fe:	e7f2      	b.n	80062e6 <__libc_init_array+0x1e>
 8006300:	0800646c 	.word	0x0800646c
 8006304:	0800646c 	.word	0x0800646c
 8006308:	0800646c 	.word	0x0800646c
 800630c:	08006470 	.word	0x08006470

08006310 <memcmp>:
 8006310:	b510      	push	{r4, lr}
 8006312:	3901      	subs	r1, #1
 8006314:	4402      	add	r2, r0
 8006316:	4290      	cmp	r0, r2
 8006318:	d101      	bne.n	800631e <memcmp+0xe>
 800631a:	2000      	movs	r0, #0
 800631c:	e005      	b.n	800632a <memcmp+0x1a>
 800631e:	7803      	ldrb	r3, [r0, #0]
 8006320:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006324:	42a3      	cmp	r3, r4
 8006326:	d001      	beq.n	800632c <memcmp+0x1c>
 8006328:	1b18      	subs	r0, r3, r4
 800632a:	bd10      	pop	{r4, pc}
 800632c:	3001      	adds	r0, #1
 800632e:	e7f2      	b.n	8006316 <memcmp+0x6>

08006330 <memcpy>:
 8006330:	440a      	add	r2, r1
 8006332:	4291      	cmp	r1, r2
 8006334:	f100 33ff 	add.w	r3, r0, #4294967295
 8006338:	d100      	bne.n	800633c <memcpy+0xc>
 800633a:	4770      	bx	lr
 800633c:	b510      	push	{r4, lr}
 800633e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006346:	4291      	cmp	r1, r2
 8006348:	d1f9      	bne.n	800633e <memcpy+0xe>
 800634a:	bd10      	pop	{r4, pc}

0800634c <memset>:
 800634c:	4402      	add	r2, r0
 800634e:	4603      	mov	r3, r0
 8006350:	4293      	cmp	r3, r2
 8006352:	d100      	bne.n	8006356 <memset+0xa>
 8006354:	4770      	bx	lr
 8006356:	f803 1b01 	strb.w	r1, [r3], #1
 800635a:	e7f9      	b.n	8006350 <memset+0x4>

0800635c <_init>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr

08006368 <_fini>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	bf00      	nop
 800636c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636e:	bc08      	pop	{r3}
 8006370:	469e      	mov	lr, r3
 8006372:	4770      	bx	lr
