
Basic_RTOS_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007228  08007228  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007230  08007230  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012eb0  2000001c  08007254  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ecc  08007254  00022ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016122  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000349c  00000000  00000000  0003616e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00039610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003a928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f1a  00000000  00000000  0003baf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016eac  00000000  00000000  00054a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba20  00000000  00000000  0006b8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001072de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f54  00000000  00000000  00107330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fb8 	.word	0x08006fb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08006fb8 	.word	0x08006fb8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <stop_led_effect>:
 *      Author: vinodhini
 */
#include "main.h"

void stop_led_effect()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af02      	add	r7, sp, #8
	for(int i=0; i<4; i++)
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	e00e      	b.n	8000532 <stop_led_effect+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <stop_led_effect+0x3c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2200      	movs	r2, #0
 8000526:	2103      	movs	r1, #3
 8000528:	f005 fdac 	bl	8006084 <xTimerGenericCommand>
	for(int i=0; i<4; i++)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3301      	adds	r3, #1
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dded      	ble.n	8000514 <stop_led_effect+0xc>

}
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200000c8 	.word	0x200000c8

08000548 <blink_led_in_pattern>:


void blink_led_in_pattern(int n)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b085      	sub	sp, #20
 800054c:	af02      	add	r7, sp, #8
 800054e:	6078      	str	r0, [r7, #4]
	stop_led_effect();
 8000550:	f7ff ffda 	bl	8000508 <stop_led_effect>
	xTimerStart(handle_led_timer[n-1],portMAX_DELAY);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3b01      	subs	r3, #1
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <blink_led_in_pattern+0x34>)
 800055a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800055e:	f004 fd61 	bl	8005024 <xTaskGetTickCount>
 8000562:	4602      	mov	r2, r0
 8000564:	f04f 33ff 	mov.w	r3, #4294967295
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	2101      	movs	r1, #1
 800056e:	4620      	mov	r0, r4
 8000570:	f005 fd88 	bl	8006084 <xTimerGenericCommand>

}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bd90      	pop	{r4, r7, pc}
 800057c:	200000c8 	.word	0x200000c8

08000580 <turnoff_all_leds>:

void turnoff_all_leds(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_G_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <turnoff_all_leds+0x30>)
 800058a:	f001 fa41 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_Y_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <turnoff_all_leds+0x30>)
 8000594:	f001 fa3c 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_R_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <turnoff_all_leds+0x30>)
 800059e:	f001 fa37 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_B_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <turnoff_all_leds+0x34>)
 80005a8:	f001 fa32 	bl	8001a10 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40020400 	.word	0x40020400

080005b8 <turnon_all_leds>:

void turnon_all_leds(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_G_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2120      	movs	r1, #32
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <turnon_all_leds+0x30>)
 80005c2:	f001 fa25 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_Y_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2140      	movs	r1, #64	; 0x40
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <turnon_all_leds+0x30>)
 80005cc:	f001 fa20 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_R_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <turnon_all_leds+0x30>)
 80005d6:	f001 fa1b 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_B_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <turnon_all_leds+0x34>)
 80005e0:	f001 fa16 	bl	8001a10 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020000 	.word	0x40020000
 80005ec:	40020400 	.word	0x40020400

080005f0 <turnon_odd_leds>:

void turnon_odd_leds(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_G_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2120      	movs	r1, #32
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <turnon_odd_leds+0x30>)
 80005fa:	f001 fa09 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_Y_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <turnon_odd_leds+0x30>)
 8000604:	f001 fa04 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_R_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <turnon_odd_leds+0x30>)
 800060e:	f001 f9ff 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_B_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <turnon_odd_leds+0x34>)
 8000618:	f001 f9fa 	bl	8001a10 <HAL_GPIO_WritePin>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400

08000628 <turnon_one_led>:
	HAL_GPIO_WritePin(GPIOA, LED_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, LED_B_Pin, GPIO_PIN_SET);
}

void turnon_one_led(GPIO_TypeDef* gpio_port,uint16_t gpio_pin)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
	turnoff_all_leds();
 8000634:	f7ff ffa4 	bl	8000580 <turnoff_all_leds>
	HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 8000638:	887b      	ldrh	r3, [r7, #2]
 800063a:	2201      	movs	r2, #1
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f001 f9e6 	bl	8001a10 <HAL_GPIO_WritePin>

}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <blink_led_in_pattern1>:
void blink_led_in_pattern1(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	static int flag = 0;
	flag ^= 1;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <blink_led_in_pattern1+0x20>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f083 0301 	eor.w	r3, r3, #1
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <blink_led_in_pattern1+0x20>)
 800065a:	6013      	str	r3, [r2, #0]
	flag ? turnon_all_leds() : turnoff_all_leds;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <blink_led_in_pattern1+0x20>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <blink_led_in_pattern1+0x1c>
 8000664:	f7ff ffa8 	bl	80005b8 <turnon_all_leds>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000038 	.word	0x20000038

08000670 <blink_led_in_pattern2>:

void blink_led_in_pattern2(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	static int flag = 0;
	flag ^= 1;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <blink_led_in_pattern2+0x20>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <blink_led_in_pattern2+0x20>)
 800067e:	6013      	str	r3, [r2, #0]
	flag ? turnon_odd_leds() : turnon_even_leds;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <blink_led_in_pattern2+0x20>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <blink_led_in_pattern2+0x1c>
 8000688:	f7ff ffb2 	bl	80005f0 <turnon_odd_leds>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000003c 	.word	0x2000003c

08000694 <blink_led_in_pattern3>:
void blink_led_in_pattern3(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0
	static int i =0;
	if(i==4){
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <blink_led_in_pattern3+0x5c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b04      	cmp	r3, #4
 80006a0:	d102      	bne.n	80006a8 <blink_led_in_pattern3+0x14>
		i=0;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <blink_led_in_pattern3+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
	}
	GPIO_TypeDef* gpio_port[4]={GPIOA,GPIOA,GPIOA,GPIOB};
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <blink_led_in_pattern3+0x60>)
 80006aa:	f107 0408 	add.w	r4, r7, #8
 80006ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t gpio_pin[4]={LED_G_Pin,LED_Y_Pin,LED_R_Pin,LED_B_Pin};
 80006b4:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <blink_led_in_pattern3+0x64>)
 80006b6:	463b      	mov	r3, r7
 80006b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006bc:	e883 0003 	stmia.w	r3, {r0, r1}
	turnon_one_led(gpio_port[i],gpio_pin[i++]);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <blink_led_in_pattern3+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	3318      	adds	r3, #24
 80006c8:	443b      	add	r3, r7
 80006ca:	f853 0c10 	ldr.w	r0, [r3, #-16]
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <blink_led_in_pattern3+0x5c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	4906      	ldr	r1, [pc, #24]	; (80006f0 <blink_led_in_pattern3+0x5c>)
 80006d6:	600a      	str	r2, [r1, #0]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	3318      	adds	r3, #24
 80006dc:	443b      	add	r3, r7
 80006de:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80006e2:	4619      	mov	r1, r3
 80006e4:	f7ff ffa0 	bl	8000628 <turnon_one_led>
}
 80006e8:	bf00      	nop
 80006ea:	371c      	adds	r7, #28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	20000040 	.word	0x20000040
 80006f4:	08006fd0 	.word	0x08006fd0
 80006f8:	08006fe0 	.word	0x08006fe0

080006fc <blink_led_in_pattern4>:

void blink_led_in_pattern4(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
	static int i =3;
	if(i==-1){
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <blink_led_in_pattern4+0x60>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070a:	d102      	bne.n	8000712 <blink_led_in_pattern4+0x16>
		i=3;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <blink_led_in_pattern4+0x60>)
 800070e:	2203      	movs	r2, #3
 8000710:	601a      	str	r2, [r3, #0]
	}
	GPIO_TypeDef* gpio_port[4]={GPIOA,GPIOA,GPIOA,GPIOB};
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <blink_led_in_pattern4+0x64>)
 8000714:	f107 0408 	add.w	r4, r7, #8
 8000718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800071a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t gpio_pin[4]={LED_G_Pin,LED_Y_Pin,LED_R_Pin,LED_B_Pin};
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <blink_led_in_pattern4+0x68>)
 8000720:	463b      	mov	r3, r7
 8000722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000726:	e883 0003 	stmia.w	r3, {r0, r1}
	turnon_one_led(gpio_port[i],gpio_pin[i--]);
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <blink_led_in_pattern4+0x60>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	3318      	adds	r3, #24
 8000732:	443b      	add	r3, r7
 8000734:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <blink_led_in_pattern4+0x60>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1e5a      	subs	r2, r3, #1
 800073e:	4907      	ldr	r1, [pc, #28]	; (800075c <blink_led_in_pattern4+0x60>)
 8000740:	600a      	str	r2, [r1, #0]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	3318      	adds	r3, #24
 8000746:	443b      	add	r3, r7
 8000748:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800074c:	4619      	mov	r1, r3
 800074e:	f7ff ff6b 	bl	8000628 <turnon_one_led>
}
 8000752:	bf00      	nop
 8000754:	371c      	adds	r7, #28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	bf00      	nop
 800075c:	20000000 	.word	0x20000000
 8000760:	08006fd0 	.word	0x08006fd0
 8000764:	08006fe0 	.word	0x08006fe0

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f000 fe15 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f8ff 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 f9bb 	bl	8000af0 <MX_GPIO_Init>
  MX_RTC_Init();
 800077a:	f000 f969 	bl	8000a50 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800077e:	f000 f98d 	bl	8000a9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ret = xTaskCreate(menu_handler,"Menu_Task",250,NULL,2, &menu_task_handle);
 8000782:	4b66      	ldr	r3, [pc, #408]	; (800091c <main+0x1b4>)
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2302      	movs	r3, #2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	22fa      	movs	r2, #250	; 0xfa
 800078e:	4964      	ldr	r1, [pc, #400]	; (8000920 <main+0x1b8>)
 8000790:	4864      	ldr	r0, [pc, #400]	; (8000924 <main+0x1bc>)
 8000792:	f004 f983 	bl	8004a9c <xTaskCreate>
 8000796:	6238      	str	r0, [r7, #32]
  configASSERT(ret==pdPASS);
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d00a      	beq.n	80007b4 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007b0:	bf00      	nop
 80007b2:	e7fe      	b.n	80007b2 <main+0x4a>

  ret = xTaskCreate(cmd_handler,"cmd_Task",250,NULL,2, &cmd_task_handle);
 80007b4:	4b5c      	ldr	r3, [pc, #368]	; (8000928 <main+0x1c0>)
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	2302      	movs	r3, #2
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2300      	movs	r3, #0
 80007be:	22fa      	movs	r2, #250	; 0xfa
 80007c0:	495a      	ldr	r1, [pc, #360]	; (800092c <main+0x1c4>)
 80007c2:	485b      	ldr	r0, [pc, #364]	; (8000930 <main+0x1c8>)
 80007c4:	f004 f96a 	bl	8004a9c <xTaskCreate>
 80007c8:	6238      	str	r0, [r7, #32]
  configASSERT(ret==pdPASS);
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d00a      	beq.n	80007e6 <main+0x7e>
        __asm volatile
 80007d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	f3bf 8f6f 	isb	sy
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	61bb      	str	r3, [r7, #24]
    }
 80007e2:	bf00      	nop
 80007e4:	e7fe      	b.n	80007e4 <main+0x7c>

  ret = xTaskCreate(rtc_handler,"rtc_Task",250,NULL,2, &rtc_task_handle);
 80007e6:	4b53      	ldr	r3, [pc, #332]	; (8000934 <main+0x1cc>)
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	2302      	movs	r3, #2
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2300      	movs	r3, #0
 80007f0:	22fa      	movs	r2, #250	; 0xfa
 80007f2:	4951      	ldr	r1, [pc, #324]	; (8000938 <main+0x1d0>)
 80007f4:	4851      	ldr	r0, [pc, #324]	; (800093c <main+0x1d4>)
 80007f6:	f004 f951 	bl	8004a9c <xTaskCreate>
 80007fa:	6238      	str	r0, [r7, #32]
  configASSERT(ret==pdPASS);
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d00a      	beq.n	8000818 <main+0xb0>
        __asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	617b      	str	r3, [r7, #20]
    }
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <main+0xae>

  ret = xTaskCreate(led_handler,"led_Task",250,NULL,2, &led_task_handle);
 8000818:	4b49      	ldr	r3, [pc, #292]	; (8000940 <main+0x1d8>)
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	2302      	movs	r3, #2
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2300      	movs	r3, #0
 8000822:	22fa      	movs	r2, #250	; 0xfa
 8000824:	4947      	ldr	r1, [pc, #284]	; (8000944 <main+0x1dc>)
 8000826:	4848      	ldr	r0, [pc, #288]	; (8000948 <main+0x1e0>)
 8000828:	f004 f938 	bl	8004a9c <xTaskCreate>
 800082c:	6238      	str	r0, [r7, #32]
  configASSERT(ret==pdPASS);
 800082e:	6a3b      	ldr	r3, [r7, #32]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d00a      	beq.n	800084a <main+0xe2>
        __asm volatile
 8000834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000838:	f383 8811 	msr	BASEPRI, r3
 800083c:	f3bf 8f6f 	isb	sy
 8000840:	f3bf 8f4f 	dsb	sy
 8000844:	613b      	str	r3, [r7, #16]
    }
 8000846:	bf00      	nop
 8000848:	e7fe      	b.n	8000848 <main+0xe0>

  ret = xTaskCreate(print_handler,"print_Task",250,NULL,2, &print_task_handle);
 800084a:	4b40      	ldr	r3, [pc, #256]	; (800094c <main+0x1e4>)
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	2302      	movs	r3, #2
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	22fa      	movs	r2, #250	; 0xfa
 8000856:	493e      	ldr	r1, [pc, #248]	; (8000950 <main+0x1e8>)
 8000858:	483e      	ldr	r0, [pc, #248]	; (8000954 <main+0x1ec>)
 800085a:	f004 f91f 	bl	8004a9c <xTaskCreate>
 800085e:	6238      	str	r0, [r7, #32]
  configASSERT(ret==pdPASS);
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d00a      	beq.n	800087c <main+0x114>
        __asm volatile
 8000866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800086a:	f383 8811 	msr	BASEPRI, r3
 800086e:	f3bf 8f6f 	isb	sy
 8000872:	f3bf 8f4f 	dsb	sy
 8000876:	60fb      	str	r3, [r7, #12]
    }
 8000878:	bf00      	nop
 800087a:	e7fe      	b.n	800087a <main+0x112>

  q_data = xQueueCreate(10,sizeof(char));
 800087c:	2200      	movs	r2, #0
 800087e:	2101      	movs	r1, #1
 8000880:	200a      	movs	r0, #10
 8000882:	f003 fba9 	bl	8003fd8 <xQueueGenericCreate>
 8000886:	4603      	mov	r3, r0
 8000888:	4a33      	ldr	r2, [pc, #204]	; (8000958 <main+0x1f0>)
 800088a:	6013      	str	r3, [r2, #0]
  configASSERT(q_data!=NULL);
 800088c:	4b32      	ldr	r3, [pc, #200]	; (8000958 <main+0x1f0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d10a      	bne.n	80008aa <main+0x142>
        __asm volatile
 8000894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000898:	f383 8811 	msr	BASEPRI, r3
 800089c:	f3bf 8f6f 	isb	sy
 80008a0:	f3bf 8f4f 	dsb	sy
 80008a4:	60bb      	str	r3, [r7, #8]
    }
 80008a6:	bf00      	nop
 80008a8:	e7fe      	b.n	80008a8 <main+0x140>

  q_print = xQueueCreate(10,sizeof(size_t));
 80008aa:	2200      	movs	r2, #0
 80008ac:	2104      	movs	r1, #4
 80008ae:	200a      	movs	r0, #10
 80008b0:	f003 fb92 	bl	8003fd8 <xQueueGenericCreate>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a29      	ldr	r2, [pc, #164]	; (800095c <main+0x1f4>)
 80008b8:	6013      	str	r3, [r2, #0]
  configASSERT(q_print!=NULL);
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <main+0x1f4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10a      	bne.n	80008d8 <main+0x170>
        __asm volatile
 80008c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c6:	f383 8811 	msr	BASEPRI, r3
 80008ca:	f3bf 8f6f 	isb	sy
 80008ce:	f3bf 8f4f 	dsb	sy
 80008d2:	607b      	str	r3, [r7, #4]
    }
 80008d4:	bf00      	nop
 80008d6:	e7fe      	b.n	80008d6 <main+0x16e>


  //Create software timers for LED blink pattern
  for(int i = 0; i<4; i++)
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
 80008dc:	e013      	b.n	8000906 <main+0x19e>
  {
	  handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE,(void *)(i+1),blink_led_in_pattern_callback);
 80008de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <main+0x1f8>)
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	4613      	mov	r3, r2
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008f0:	481c      	ldr	r0, [pc, #112]	; (8000964 <main+0x1fc>)
 80008f2:	f005 fb6d 	bl	8005fd0 <xTimerCreate>
 80008f6:	4602      	mov	r2, r0
 80008f8:	491b      	ldr	r1, [pc, #108]	; (8000968 <main+0x200>)
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i<4; i++)
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	3301      	adds	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	2b03      	cmp	r3, #3
 800090a:	dde8      	ble.n	80008de <main+0x176>
  }


  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 800090c:	2201      	movs	r2, #1
 800090e:	4917      	ldr	r1, [pc, #92]	; (800096c <main+0x204>)
 8000910:	4817      	ldr	r0, [pc, #92]	; (8000970 <main+0x208>)
 8000912:	f002 faa8 	bl	8002e66 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000916:	f004 fa29 	bl	8004d6c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091a:	e7fe      	b.n	800091a <main+0x1b2>
 800091c:	200000a8 	.word	0x200000a8
 8000920:	08006fe8 	.word	0x08006fe8
 8000924:	08000fc1 	.word	0x08000fc1
 8000928:	200000b4 	.word	0x200000b4
 800092c:	08006ff4 	.word	0x08006ff4
 8000930:	080010a9 	.word	0x080010a9
 8000934:	200000b0 	.word	0x200000b0
 8000938:	08007000 	.word	0x08007000
 800093c:	080011c9 	.word	0x080011c9
 8000940:	200000ac 	.word	0x200000ac
 8000944:	0800700c 	.word	0x0800700c
 8000948:	080011dd 	.word	0x080011dd
 800094c:	200000b8 	.word	0x200000b8
 8000950:	08007018 	.word	0x08007018
 8000954:	08001309 	.word	0x08001309
 8000958:	200000bc 	.word	0x200000bc
 800095c:	200000c0 	.word	0x200000c0
 8000960:	08000c89 	.word	0x08000c89
 8000964:	08007024 	.word	0x08007024
 8000968:	200000c8 	.word	0x200000c8
 800096c:	200000c4 	.word	0x200000c4
 8000970:	20000064 	.word	0x20000064

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f006 fb10 	bl	8006fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <SystemClock_Config+0xd4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <SystemClock_Config+0xd4>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <SystemClock_Config+0xd4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <SystemClock_Config+0xd8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <SystemClock_Config+0xd8>)
 80009c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemClock_Config+0xd8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009d4:	230a      	movs	r3, #10
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009dc:	2310      	movs	r3, #16
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009ec:	2310      	movs	r3, #16
 80009ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009f6:	2304      	movs	r3, #4
 80009f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009fa:	2307      	movs	r3, #7
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f81e 	bl	8001a44 <HAL_RCC_OscConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a0e:	f000 f975 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	230f      	movs	r3, #15
 8000a14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a16:	2302      	movs	r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fa80 	bl	8001f34 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a3a:	f000 f95f 	bl	8000cfc <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3750      	adds	r7, #80	; 0x50
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40007000 	.word	0x40007000

08000a50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_RTC_Init+0x44>)
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_RTC_Init+0x44>)
 8000a5c:	2240      	movs	r2, #64	; 0x40
 8000a5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_RTC_Init+0x44>)
 8000a62:	227f      	movs	r2, #127	; 0x7f
 8000a64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_RTC_Init+0x44>)
 8000a68:	22ff      	movs	r2, #255	; 0xff
 8000a6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_RTC_Init+0x44>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_RTC_Init+0x44>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_RTC_Init+0x44>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_RTC_Init+0x44>)
 8000a80:	f001 fd98 	bl	80025b4 <HAL_RTC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a8a:	f000 f937 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000044 	.word	0x20000044
 8000a98:	40002800 	.word	0x40002800

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f002 f8e8 	bl	8002ca8 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f90d 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000064 	.word	0x20000064
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a35      	ldr	r2, [pc, #212]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_GPIO_Init+0xf4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_Y_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	21e0      	movs	r1, #224	; 0xe0
 8000b7a:	481b      	ldr	r0, [pc, #108]	; (8000be8 <MX_GPIO_Init+0xf8>)
 8000b7c:	f000 ff48 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	4819      	ldr	r0, [pc, #100]	; (8000bec <MX_GPIO_Init+0xfc>)
 8000b86:	f000 ff43 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSHBTN_Pin */
  GPIO_InitStruct.Pin = PUSHBTN_Pin;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSHBTN_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <MX_GPIO_Init+0x100>)
 8000ba0:	f000 fdb2 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_Y_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_Y_Pin|LED_R_Pin;
 8000ba4:	23e0      	movs	r3, #224	; 0xe0
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <MX_GPIO_Init+0xf8>)
 8000bbc:	f000 fda4 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000bc0:	2340      	movs	r3, #64	; 0x40
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_GPIO_Init+0xfc>)
 8000bd8:	f000 fd96 	bl	8001708 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	/*Enqueue the user entered data if the queue is not full*/
	if(!xQueueIsQueueFullFromISR(q_data))
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <HAL_UART_RxCpltCallback+0x84>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fea2 	bl	800494a <xQueueIsQueueFullFromISR>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d107      	bne.n	8000c1c <HAL_UART_RxCpltCallback+0x28>
	{
		xQueueSendFromISR(q_data, (void *)&user_data,NULL);
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <HAL_UART_RxCpltCallback+0x84>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	2300      	movs	r3, #0
 8000c12:	2200      	movs	r2, #0
 8000c14:	4919      	ldr	r1, [pc, #100]	; (8000c7c <HAL_UART_RxCpltCallback+0x88>)
 8000c16:	f003 fb4f 	bl	80042b8 <xQueueGenericSendFromISR>
 8000c1a:	e013      	b.n	8000c44 <HAL_UART_RxCpltCallback+0x50>
	}
	else
	{
		/*If queue is full and the entered char is line feed, replace it as the last element in queue*/
		if(user_data=='\n')
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_UART_RxCpltCallback+0x88>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b0a      	cmp	r3, #10
 8000c24:	d10e      	bne.n	8000c44 <HAL_UART_RxCpltCallback+0x50>
		{
			xQueueReceiveFromISR(q_data,(void *)&temp,NULL);
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_UART_RxCpltCallback+0x84>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f107 010f 	add.w	r1, r7, #15
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fcd3 	bl	80045dc <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void *)&user_data,NULL);
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_UART_RxCpltCallback+0x84>)
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	490f      	ldr	r1, [pc, #60]	; (8000c7c <HAL_UART_RxCpltCallback+0x88>)
 8000c40:	f003 fb3a 	bl	80042b8 <xQueueGenericSendFromISR>

		}
	}

	/*If line feed is entered, notify the command handling task*/
	if(user_data=='\n')
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_UART_RxCpltCallback+0x88>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b0a      	cmp	r3, #10
 8000c4c:	d10a      	bne.n	8000c64 <HAL_UART_RxCpltCallback+0x70>
	{
			xTaskNotifyFromISR(cmd_task_handle, 0,eNoAction, NULL);
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_UART_RxCpltCallback+0x8c>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	2300      	movs	r3, #0
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	2300      	movs	r3, #0
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f004 ffa8 	bl	8005bb4 <xTaskGenericNotifyFromISR>
	}

	/*Enabling the UART data reception again in IT mode*/
	HAL_UART_Receive_IT(&huart2,(uint8_t *)&user_data,NULL);
 8000c64:	2200      	movs	r2, #0
 8000c66:	4905      	ldr	r1, [pc, #20]	; (8000c7c <HAL_UART_RxCpltCallback+0x88>)
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <HAL_UART_RxCpltCallback+0x90>)
 8000c6a:	f002 f8fc 	bl	8002e66 <HAL_UART_Receive_IT>

}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000bc 	.word	0x200000bc
 8000c7c:	200000c4 	.word	0x200000c4
 8000c80:	200000b4 	.word	0x200000b4
 8000c84:	20000064 	.word	0x20000064

08000c88 <blink_led_in_pattern_callback>:

void blink_led_in_pattern_callback(TimerHandle_t xTimer )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f005 fc97 	bl	80065c4 <pvTimerGetTimerID>
 8000c96:	4603      	mov	r3, r0
 8000c98:	60fb      	str	r3, [r7, #12]

	switch(id)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d816      	bhi.n	8000cd0 <blink_led_in_pattern_callback+0x48>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <blink_led_in_pattern_callback+0x20>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000cb9 	.word	0x08000cb9
 8000cac:	08000cbf 	.word	0x08000cbf
 8000cb0:	08000cc5 	.word	0x08000cc5
 8000cb4:	08000ccb 	.word	0x08000ccb
	{
	case 1:
		blink_led_in_pattern1();
 8000cb8:	f7ff fcc8 	bl	800064c <blink_led_in_pattern1>
		break;
 8000cbc:	e008      	b.n	8000cd0 <blink_led_in_pattern_callback+0x48>
	case 2:
		blink_led_in_pattern2();
 8000cbe:	f7ff fcd7 	bl	8000670 <blink_led_in_pattern2>
		break;
 8000cc2:	e005      	b.n	8000cd0 <blink_led_in_pattern_callback+0x48>
	case 3:
		blink_led_in_pattern3();
 8000cc4:	f7ff fce6 	bl	8000694 <blink_led_in_pattern3>
		break;
 8000cc8:	e002      	b.n	8000cd0 <blink_led_in_pattern_callback+0x48>
	case 4:
		blink_led_in_pattern4();
 8000cca:	f7ff fd17 	bl	80006fc <blink_led_in_pattern4>
		break;
 8000cce:	bf00      	nop
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d101      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cea:	f000 fb79 	bl	80013e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40000c00 	.word	0x40000c00

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000d46:	f005 fd8f 	bl	8006868 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <HAL_RTC_MspInit+0x50>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d111      	bne.n	8000d9e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d82:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 fb25 	bl	80023d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d94:	f7ff ffb2 	bl	8000cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <HAL_RTC_MspInit+0x54>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40002800 	.word	0x40002800
 8000dac:	42470e3c 	.word	0x42470e3c

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_UART_MspInit+0x94>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d133      	bne.n	8000e3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_UART_MspInit+0x98>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <HAL_UART_MspInit+0x98>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_UART_MspInit+0x98>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_UART_MspInit+0x98>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <HAL_UART_MspInit+0x98>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_UART_MspInit+0x98>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <HAL_UART_MspInit+0x9c>)
 8000e26:	f000 fc6f 	bl	8001708 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2106      	movs	r1, #6
 8000e2e:	2026      	movs	r0, #38	; 0x26
 8000e30:	f000 fbae 	bl	8001590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e34:	2026      	movs	r0, #38	; 0x26
 8000e36:	f000 fbc7 	bl	80015c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40004400 	.word	0x40004400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	; 0x38
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <HAL_InitTick+0xe4>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a32      	ldr	r2, [pc, #200]	; (8000f34 <HAL_InitTick+0xe4>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <HAL_InitTick+0xe4>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e7c:	f107 0210 	add.w	r2, r7, #16
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4611      	mov	r1, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fa74 	bl	8002374 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e96:	f001 fa45 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8000e9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000e9c:	e004      	b.n	8000ea8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e9e:	f001 fa41 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eaa:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <HAL_InitTick+0xe8>)
 8000eac:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb0:	0c9b      	lsrs	r3, r3, #18
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <HAL_InitTick+0xec>)
 8000eb8:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <HAL_InitTick+0xf0>)
 8000eba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <HAL_InitTick+0xec>)
 8000ebe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_InitTick+0xec>)
 8000ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_InitTick+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_InitTick+0xec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_InitTick+0xec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000edc:	4817      	ldr	r0, [pc, #92]	; (8000f3c <HAL_InitTick+0xec>)
 8000ede:	f001 fc63 	bl	80027a8 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d11b      	bne.n	8000f28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ef0:	4812      	ldr	r0, [pc, #72]	; (8000f3c <HAL_InitTick+0xec>)
 8000ef2:	f001 fcb3 	bl	800285c <HAL_TIM_Base_Start_IT>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000efc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d111      	bne.n	8000f28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f04:	2032      	movs	r0, #50	; 0x32
 8000f06:	f000 fb5f 	bl	80015c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d808      	bhi.n	8000f22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	2032      	movs	r0, #50	; 0x32
 8000f16:	f000 fb3b 	bl	8001590 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_InitTick+0xf4>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e002      	b.n	8000f28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3738      	adds	r7, #56	; 0x38
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	431bde83 	.word	0x431bde83
 8000f3c:	200000dc 	.word	0x200000dc
 8000f40:	40000c00 	.word	0x40000c00
 8000f44:	2000000c 	.word	0x2000000c

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <USART2_IRQHandler+0x10>)
 8000f7a:	f001 ffa5 	bl	8002ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000064 	.word	0x20000064

08000f88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <TIM5_IRQHandler+0x10>)
 8000f8e:	f001 fcc7 	bl	8002920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000dc 	.word	0x200000dc

08000f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <menu_handler>:
extern UART_HandleTypeDef huart2;

const char *inv_msg = "****Invalid option entered!****\n";

void menu_handler(void *parameters)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	6078      	str	r0, [r7, #4]
	const char *menu_msg = "----------------------------------\n"
 8000fc8:	4b31      	ldr	r3, [pc, #196]	; (8001090 <menu_handler+0xd0>)
 8000fca:	60fb      	str	r3, [r7, #12]
	command_t *cmd;
	int option;

	while(1)
	{
		xQueueSend(q_print,&menu_msg,portMAX_DELAY);
 8000fcc:	4b31      	ldr	r3, [pc, #196]	; (8001094 <menu_handler+0xd4>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	f107 010c 	add.w	r1, r7, #12
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fda:	f003 f86f 	bl	80040bc <xQueueGenericSend>
		xTaskNotifyWait(0,0,&notiVal,portMAX_DELAY);
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	9200      	str	r2, [sp, #0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2000      	movs	r0, #0
 8000fee:	f004 fc3f 	bl	8005870 <xTaskGenericNotifyWait>
		cmd=(command_t *)notiVal;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	617b      	str	r3, [r7, #20]

		if(cmd->length==1)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	7a9b      	ldrb	r3, [r3, #10]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d133      	bne.n	8001066 <menu_handler+0xa6>
		{
			option = cmd->data[0]-48;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3b30      	subs	r3, #48	; 0x30
 8001004:	613b      	str	r3, [r7, #16]
			switch(option)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d035      	beq.n	8001078 <menu_handler+0xb8>
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b02      	cmp	r3, #2
 8001010:	dc20      	bgt.n	8001054 <menu_handler+0x94>
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <menu_handler+0x60>
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d00d      	beq.n	800103a <menu_handler+0x7a>
 800101e:	e019      	b.n	8001054 <menu_handler+0x94>
			{
			case 0:
				//Notify LED task
				xTaskNotify(led_task_handle,0,eNoAction);
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <menu_handler+0xd8>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	2300      	movs	r3, #0
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2300      	movs	r3, #0
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	f004 fc9f 	bl	8005970 <xTaskGenericNotify>
				curr_state = sLedEffect;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <menu_handler+0xdc>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
				break;
 8001038:	e01f      	b.n	800107a <menu_handler+0xba>
			case 1:
				//Notify RTC task
				xTaskNotify(rtc_task_handle,0,eNoAction);
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <menu_handler+0xe0>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	f004 fc92 	bl	8005970 <xTaskGenericNotify>
				curr_state = sRtcReport;
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <menu_handler+0xdc>)
 800104e:	2205      	movs	r2, #5
 8001050:	701a      	strb	r2, [r3, #0]
				break;
 8001052:	e012      	b.n	800107a <menu_handler+0xba>
			case 2:
				//exit
				break;
			default:
				xQueueSend(q_print,&inv_msg,portMAX_DELAY);
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <menu_handler+0xd4>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	f04f 32ff 	mov.w	r2, #4294967295
 800105e:	4911      	ldr	r1, [pc, #68]	; (80010a4 <menu_handler+0xe4>)
 8001060:	f003 f82c 	bl	80040bc <xQueueGenericSend>
				continue;
 8001064:	e012      	b.n	800108c <menu_handler+0xcc>
			}
		}
		else{
			//Invalid
			xQueueSend(q_print,&inv_msg,portMAX_DELAY);
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <menu_handler+0xd4>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <menu_handler+0xe4>)
 8001072:	f003 f823 	bl	80040bc <xQueueGenericSend>
 8001076:	e000      	b.n	800107a <menu_handler+0xba>
				break;
 8001078:	bf00      	nop
		}

		//Blocked till notification is received from any other task
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2300      	movs	r3, #0
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f004 fbf2 	bl	8005870 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&menu_msg,portMAX_DELAY);
 800108c:	e79e      	b.n	8000fcc <menu_handler+0xc>
 800108e:	bf00      	nop
 8001090:	08007054 	.word	0x08007054
 8001094:	200000c0 	.word	0x200000c0
 8001098:	200000ac 	.word	0x200000ac
 800109c:	200000d8 	.word	0x200000d8
 80010a0:	200000b0 	.word	0x200000b0
 80010a4:	20000008 	.word	0x20000008

080010a8 <cmd_handler>:
	}

}
void cmd_handler(void *parameters)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	f004 fbd7 	bl	8005870 <xTaskGenericNotifyWait>
 80010c2:	6178      	str	r0, [r7, #20]

	if(ret==pdPASS){
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d104      	bne.n	80010d4 <cmd_handler+0x2c>
		process_cmd(&cmd);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f804 	bl	80010dc <process_cmd>
	}
}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <process_cmd>:


void process_cmd(command_t *cmd)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f835 	bl	8001154 <extract_command>

	switch(curr_state)
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <process_cmd+0x68>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	dc24      	bgt.n	800113c <process_cmd+0x60>
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	da18      	bge.n	8001128 <process_cmd+0x4c>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <process_cmd+0x24>
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d00a      	beq.n	8001114 <process_cmd+0x38>
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(rtc_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	}
}
 80010fe:	e01d      	b.n	800113c <process_cmd+0x60>
		xTaskNotify(menu_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <process_cmd+0x6c>)
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	2300      	movs	r3, #0
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2303      	movs	r3, #3
 800110c:	2100      	movs	r1, #0
 800110e:	f004 fc2f 	bl	8005970 <xTaskGenericNotify>
		break;
 8001112:	e013      	b.n	800113c <process_cmd+0x60>
		xTaskNotify(led_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <process_cmd+0x70>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2303      	movs	r3, #3
 8001120:	2100      	movs	r1, #0
 8001122:	f004 fc25 	bl	8005970 <xTaskGenericNotify>
		break;
 8001126:	e009      	b.n	800113c <process_cmd+0x60>
		xTaskNotify(rtc_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <process_cmd+0x74>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	2300      	movs	r3, #0
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2303      	movs	r3, #3
 8001134:	2100      	movs	r1, #0
 8001136:	f004 fc1b 	bl	8005970 <xTaskGenericNotify>
		break;
 800113a:	bf00      	nop
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000d8 	.word	0x200000d8
 8001148:	200000a8 	.word	0x200000a8
 800114c:	200000ac 	.word	0x200000ac
 8001150:	200000b0 	.word	0x200000b0

08001154 <extract_command>:


int extract_command(command_t *cmd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	uint8_t val,ind;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <extract_command+0x70>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fad2 	bl	800470a <uxQueueMessagesWaiting>
 8001166:	4603      	mov	r3, r0
 8001168:	613b      	str	r3, [r7, #16]
	if(!status)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <extract_command+0x22>
	{
		return -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e022      	b.n	80011bc <extract_command+0x68>
	}
	ind=0;
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]
	do
	{
		status = xQueueReceive(q_data,&val,0);
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <extract_command+0x70>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f107 010f 	add.w	r1, r7, #15
 8001182:	2200      	movs	r2, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f003 f949 	bl	800441c <xQueueReceive>
 800118a:	6138      	str	r0, [r7, #16]
		if(status==pdPASS)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d106      	bne.n	80011a0 <extract_command+0x4c>
		{
			cmd->data[ind++]=val;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	75fa      	strb	r2, [r7, #23]
 8001198:	461a      	mov	r2, r3
 800119a:	7bf9      	ldrb	r1, [r7, #15]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	5499      	strb	r1, [r3, r2]
		}
	} while(val != '\n');
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2b0a      	cmp	r3, #10
 80011a4:	d1e9      	bne.n	800117a <extract_command+0x26>

	cmd->data[ind-1]='\0';
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	2100      	movs	r1, #0
 80011ae:	54d1      	strb	r1, [r2, r3]
	cmd->length=ind-1;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	729a      	strb	r2, [r3, #10]
	return 0;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200000bc 	.word	0x200000bc

080011c8 <rtc_handler>:


void rtc_handler(void *parameters)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <led_handler>:


void led_handler(void *parameters)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
	const char *led_msg = "----------------------------------\n"
 80011e4:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <led_handler+0x104>)
 80011e6:	613b      	str	r3, [r7, #16]
	uint32_t notiVal;
	command_t *cmd;

	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2300      	movs	r3, #0
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2000      	movs	r0, #0
 80011f6:	f004 fb3b 	bl	8005870 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&led_msg,portMAX_DELAY);
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <led_handler+0x108>)
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	f107 0110 	add.w	r1, r7, #16
 8001202:	2300      	movs	r3, #0
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	f002 ff58 	bl	80040bc <xQueueGenericSend>
		xTaskNotifyWait(0,0,&notiVal,portMAX_DELAY);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	9200      	str	r2, [sp, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2000      	movs	r0, #0
 800121c:	f004 fb28 	bl	8005870 <xTaskGenericNotifyWait>
		cmd=(command_t *)notiVal;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	617b      	str	r3, [r7, #20]

		if(cmd->length<=4)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	7a9b      	ldrb	r3, [r3, #10]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d843      	bhi.n	80012b4 <led_handler+0xd8>
		{
			if(!strcmp((char*)cmd->data,"None"))
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	492e      	ldr	r1, [pc, #184]	; (80012e8 <led_handler+0x10c>)
 8001230:	4618      	mov	r0, r3
 8001232:	f7fe ffd5 	bl	80001e0 <strcmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <led_handler+0x66>
				stop_led_effect();
 800123c:	f7ff f964 	bl	8000508 <stop_led_effect>
 8001240:	e040      	b.n	80012c4 <led_handler+0xe8>
			else if(!strcmp((char*)cmd->data,"e1"))
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	4929      	ldr	r1, [pc, #164]	; (80012ec <led_handler+0x110>)
 8001246:	4618      	mov	r0, r3
 8001248:	f7fe ffca 	bl	80001e0 <strcmp>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <led_handler+0x7e>
				blink_led_in_pattern(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff f978 	bl	8000548 <blink_led_in_pattern>
 8001258:	e034      	b.n	80012c4 <led_handler+0xe8>
			else if(!strcmp((char*)cmd->data,"e2"))
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	4924      	ldr	r1, [pc, #144]	; (80012f0 <led_handler+0x114>)
 800125e:	4618      	mov	r0, r3
 8001260:	f7fe ffbe 	bl	80001e0 <strcmp>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d103      	bne.n	8001272 <led_handler+0x96>
				blink_led_in_pattern(2);
 800126a:	2002      	movs	r0, #2
 800126c:	f7ff f96c 	bl	8000548 <blink_led_in_pattern>
 8001270:	e028      	b.n	80012c4 <led_handler+0xe8>
			else if(!strcmp((char*)cmd->data,"e3"))
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	491f      	ldr	r1, [pc, #124]	; (80012f4 <led_handler+0x118>)
 8001276:	4618      	mov	r0, r3
 8001278:	f7fe ffb2 	bl	80001e0 <strcmp>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d103      	bne.n	800128a <led_handler+0xae>
				blink_led_in_pattern(3);
 8001282:	2003      	movs	r0, #3
 8001284:	f7ff f960 	bl	8000548 <blink_led_in_pattern>
 8001288:	e01c      	b.n	80012c4 <led_handler+0xe8>
			else if(!strcmp((char*)cmd->data,"e4"))
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	491a      	ldr	r1, [pc, #104]	; (80012f8 <led_handler+0x11c>)
 800128e:	4618      	mov	r0, r3
 8001290:	f7fe ffa6 	bl	80001e0 <strcmp>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d103      	bne.n	80012a2 <led_handler+0xc6>
				blink_led_in_pattern(4);
 800129a:	2004      	movs	r0, #4
 800129c:	f7ff f954 	bl	8000548 <blink_led_in_pattern>
 80012a0:	e010      	b.n	80012c4 <led_handler+0xe8>
			else
				xQueueSend(q_print,&inv_msg,portMAX_DELAY);
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <led_handler+0x108>)
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	2300      	movs	r3, #0
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	4913      	ldr	r1, [pc, #76]	; (80012fc <led_handler+0x120>)
 80012ae:	f002 ff05 	bl	80040bc <xQueueGenericSend>
 80012b2:	e007      	b.n	80012c4 <led_handler+0xe8>
		}
		else
		{
			xQueueSend(q_print,&inv_msg,portMAX_DELAY);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <led_handler+0x108>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	f04f 32ff 	mov.w	r2, #4294967295
 80012be:	490f      	ldr	r1, [pc, #60]	; (80012fc <led_handler+0x120>)
 80012c0:	f002 fefc 	bl	80040bc <xQueueGenericSend>
		}

		//Setting main menu as current state & notifying it
		curr_state = sMainMenu;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <led_handler+0x124>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		xTaskNotify(menu_task_handle,0,eNoAction);
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <led_handler+0x128>)
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2300      	movs	r3, #0
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	f004 fb4a 	bl	8005970 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80012dc:	e784      	b.n	80011e8 <led_handler+0xc>
 80012de:	bf00      	nop
 80012e0:	08007138 	.word	0x08007138
 80012e4:	200000c0 	.word	0x200000c0
 80012e8:	080071e0 	.word	0x080071e0
 80012ec:	080071e8 	.word	0x080071e8
 80012f0:	080071ec 	.word	0x080071ec
 80012f4:	080071f0 	.word	0x080071f0
 80012f8:	080071f4 	.word	0x080071f4
 80012fc:	20000008 	.word	0x20000008
 8001300:	200000d8 	.word	0x200000d8
 8001304:	200000a8 	.word	0x200000a8

08001308 <print_handler>:
}



void print_handler(void *parameters)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print,&msg,portMAX_DELAY);
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <print_handler+0x38>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f107 010c 	add.w	r1, r7, #12
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	4618      	mov	r0, r3
 800131e:	f003 f87d 	bl	800441c <xQueueReceive>
		HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen((char*)msg),HAL_MAX_DELAY);
 8001322:	68fc      	ldr	r4, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ff64 	bl	80001f4 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	b29a      	uxth	r2, r3
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	4621      	mov	r1, r4
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <print_handler+0x3c>)
 8001338:	f001 fd03 	bl	8002d42 <HAL_UART_Transmit>
		xQueueReceive(q_print,&msg,portMAX_DELAY);
 800133c:	e7e8      	b.n	8001310 <print_handler+0x8>
 800133e:	bf00      	nop
 8001340:	200000c0 	.word	0x200000c0
 8001344:	20000064 	.word	0x20000064

08001348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001380 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800134e:	490e      	ldr	r1, [pc, #56]	; (8001388 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001350:	4a0e      	ldr	r2, [pc, #56]	; (800138c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001364:	4c0b      	ldr	r4, [pc, #44]	; (8001394 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001372:	f7ff fe13 	bl	8000f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001376:	f005 fde5 	bl	8006f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137a:	f7ff f9f5 	bl	8000768 <main>
  bx  lr    
 800137e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001380:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800138c:	08007238 	.word	0x08007238
  ldr r2, =_sbss
 8001390:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001394:	20012ecc 	.word	0x20012ecc

08001398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <HAL_Init+0x40>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_Init+0x40>)
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x40>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f8d8 	bl	800157a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fd40 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fc9a 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023c00 	.word	0x40023c00

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000010 	.word	0x20000010
 8001404:	20000124 	.word	0x20000124

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000124 	.word	0x20000124

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4907      	ldr	r1, [pc, #28]	; (80014bc <__NVIC_EnableIRQ+0x38>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff4c 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a2:	f7ff ff61 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f7ff ffb1 	bl	8001514 <NVIC_EncodePriority>
 80015b2:	4602      	mov	r2, r0
 80015b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff80 	bl	80014c0 <__NVIC_SetPriority>
}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff54 	bl	8001484 <__NVIC_EnableIRQ>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015f2:	f7ff ff09 	bl	8001408 <HAL_GetTick>
 80015f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d008      	beq.n	8001616 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e052      	b.n	80016bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0216 	bic.w	r2, r2, #22
 8001624:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001634:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d103      	bne.n	8001646 <HAL_DMA_Abort+0x62>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0208 	bic.w	r2, r2, #8
 8001654:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0201 	bic.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001666:	e013      	b.n	8001690 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001668:	f7ff fece 	bl	8001408 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b05      	cmp	r3, #5
 8001674:	d90c      	bls.n	8001690 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2220      	movs	r2, #32
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2203      	movs	r2, #3
 8001680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e015      	b.n	80016bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1e4      	bne.n	8001668 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	223f      	movs	r2, #63	; 0x3f
 80016a4:	409a      	lsls	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d004      	beq.n	80016e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00c      	b.n	80016fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2205      	movs	r2, #5
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e159      	b.n	80019d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 8148 	bne.w	80019d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d005      	beq.n	800175a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	2b02      	cmp	r3, #2
 8001758:	d130      	bne.n	80017bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 0201 	and.w	r2, r3, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d017      	beq.n	80017f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d123      	bne.n	800184c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	69b9      	ldr	r1, [r7, #24]
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a2 	beq.w	80019d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a56      	ldr	r2, [pc, #344]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b54      	ldr	r3, [pc, #336]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018aa:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a49      	ldr	r2, [pc, #292]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d019      	beq.n	800190a <HAL_GPIO_Init+0x202>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_GPIO_Init+0x2f4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0x1fe>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_GPIO_Init+0x2f8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00d      	beq.n	8001902 <HAL_GPIO_Init+0x1fa>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a46      	ldr	r2, [pc, #280]	; (8001a04 <HAL_GPIO_Init+0x2fc>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_GPIO_Init+0x1f6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <HAL_GPIO_Init+0x300>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_Init+0x1f2>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x204>
 80018fa:	2307      	movs	r3, #7
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x204>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x204>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x204>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x204>
 800190a:	2300      	movs	r3, #0
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f002 0203 	and.w	r2, r2, #3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_GPIO_Init+0x304>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194e:	4a2f      	ldr	r2, [pc, #188]	; (8001a0c <HAL_GPIO_Init+0x304>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_GPIO_Init+0x304>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001978:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <HAL_GPIO_Init+0x304>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_GPIO_Init+0x304>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019a2:	4a1a      	ldr	r2, [pc, #104]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b0f      	cmp	r3, #15
 80019dc:	f67f aea2 	bls.w	8001724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40013800 	.word	0x40013800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40013c00 	.word	0x40013c00

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a2c:	e003      	b.n	8001a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	041a      	lsls	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	619a      	str	r2, [r3, #24]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e267      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a62:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d00c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d112      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7a:	4b82      	ldr	r3, [pc, #520]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a86:	d10b      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	4b7e      	ldr	r3, [pc, #504]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d05b      	beq.n	8001b4c <HAL_RCC_OscConfig+0x108>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d157      	bne.n	8001b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e242      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x74>
 8001aaa:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a75      	ldr	r2, [pc, #468]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xb0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b70      	ldr	r3, [pc, #448]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6f      	ldr	r2, [pc, #444]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6c      	ldr	r2, [pc, #432]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xb0>
 8001adc:	4b69      	ldr	r3, [pc, #420]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a68      	ldr	r2, [pc, #416]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a65      	ldr	r2, [pc, #404]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fc84 	bl	8001408 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fc80 	bl	8001408 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e207      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xc0>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fc70 	bl	8001408 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fc6c 	bl	8001408 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1f3      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0xe8>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d11c      	bne.n	8001bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b72:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d116      	bne.n	8001bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x152>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1c7      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4937      	ldr	r1, [pc, #220]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	e03a      	b.n	8001c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb4:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff fc25 	bl	8001408 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fc21 	bl	8001408 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1a8      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4925      	ldr	r1, [pc, #148]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e015      	b.n	8001c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fc04 	bl	8001408 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc00 	bl	8001408 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e187      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d036      	beq.n	8001c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d016      	beq.n	8001c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_RCC_OscConfig+0x248>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fbe4 	bl	8001408 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff fbe0 	bl	8001408 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e167      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x200>
 8001c62:	e01b      	b.n	8001c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x248>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fbcd 	bl	8001408 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c70:	e00e      	b.n	8001c90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c72:	f7ff fbc9 	bl	8001408 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d907      	bls.n	8001c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e150      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
 8001c84:	40023800 	.word	0x40023800
 8001c88:	42470000 	.word	0x42470000
 8001c8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c90:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ea      	bne.n	8001c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8097 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b81      	ldr	r3, [pc, #516]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b7d      	ldr	r3, [pc, #500]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a7c      	ldr	r2, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b7a      	ldr	r3, [pc, #488]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cda:	4b77      	ldr	r3, [pc, #476]	; (8001eb8 <HAL_RCC_OscConfig+0x474>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d118      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce6:	4b74      	ldr	r3, [pc, #464]	; (8001eb8 <HAL_RCC_OscConfig+0x474>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a73      	ldr	r2, [pc, #460]	; (8001eb8 <HAL_RCC_OscConfig+0x474>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fb89 	bl	8001408 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfa:	f7ff fb85 	bl	8001408 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e10c      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_OscConfig+0x474>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2ea>
 8001d20:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a63      	ldr	r2, [pc, #396]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	e01c      	b.n	8001d68 <HAL_RCC_OscConfig+0x324>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x30c>
 8001d36:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a5e      	ldr	r2, [pc, #376]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	4b5c      	ldr	r3, [pc, #368]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a5b      	ldr	r2, [pc, #364]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0x324>
 8001d50:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5c:	4b55      	ldr	r3, [pc, #340]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a54      	ldr	r2, [pc, #336]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d62:	f023 0304 	bic.w	r3, r3, #4
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d015      	beq.n	8001d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fb4a 	bl	8001408 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7ff fb46 	bl	8001408 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e0cb      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0ee      	beq.n	8001d78 <HAL_RCC_OscConfig+0x334>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fb34 	bl	8001408 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7ff fb30 	bl	8001408 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e0b5      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ee      	bne.n	8001da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d105      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dcc:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4a38      	ldr	r2, [pc, #224]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a1 	beq.w	8001f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de2:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d05c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d141      	bne.n	8001e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <HAL_RCC_OscConfig+0x478>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fb04 	bl	8001408 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff fb00 	bl	8001408 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e087      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e16:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	019b      	lsls	r3, r3, #6
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	491b      	ldr	r1, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_RCC_OscConfig+0x478>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7ff fad9 	bl	8001408 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7ff fad5 	bl	8001408 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e05c      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x416>
 8001e78:	e054      	b.n	8001f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_RCC_OscConfig+0x478>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fac2 	bl	8001408 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff fabe 	bl	8001408 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e045      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x444>
 8001ea6:	e03d      	b.n	8001f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e038      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4ec>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d028      	beq.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d121      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d11a      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d111      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0cc      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d90c      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b65      	ldr	r3, [pc, #404]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0b8      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f88:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	494d      	ldr	r1, [pc, #308]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d044      	beq.n	8002054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d119      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e07f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e067      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4934      	ldr	r1, [pc, #208]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002024:	f7ff f9f0 	bl	8001408 <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7ff f9ec 	bl	8001408 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e04f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 020c 	and.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1eb      	bne.n	800202c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d20c      	bcs.n	800207c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e032      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4916      	ldr	r1, [pc, #88]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ba:	f000 f821 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020be:	4602      	mov	r2, r0
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	490a      	ldr	r1, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	5ccb      	ldrb	r3, [r1, r3]
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe feb8 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08007210 	.word	0x08007210
 80020f8:	20000004 	.word	0x20000004
 80020fc:	2000000c 	.word	0x2000000c

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002104:	b094      	sub	sp, #80	; 0x50
 8002106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	647b      	str	r3, [r7, #68]	; 0x44
 800210c:	2300      	movs	r3, #0
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002110:	2300      	movs	r3, #0
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002118:	4b79      	ldr	r3, [pc, #484]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d00d      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x40>
 8002124:	2b08      	cmp	r3, #8
 8002126:	f200 80e1 	bhi.w	80022ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x34>
 800212e:	2b04      	cmp	r3, #4
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x3a>
 8002132:	e0db      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCC_GetSysClockFreq+0x204>)
 8002136:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002138:	e0db      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800213a:	4b73      	ldr	r3, [pc, #460]	; (8002308 <HAL_RCC_GetSysClockFreq+0x208>)
 800213c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800213e:	e0d8      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002140:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002148:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800214a:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d063      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002156:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	2200      	movs	r2, #0
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002160:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
 800216e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002172:	4622      	mov	r2, r4
 8002174:	462b      	mov	r3, r5
 8002176:	f04f 0000 	mov.w	r0, #0
 800217a:	f04f 0100 	mov.w	r1, #0
 800217e:	0159      	lsls	r1, r3, #5
 8002180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002184:	0150      	lsls	r0, r2, #5
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4621      	mov	r1, r4
 800218c:	1a51      	subs	r1, r2, r1
 800218e:	6139      	str	r1, [r7, #16]
 8002190:	4629      	mov	r1, r5
 8002192:	eb63 0301 	sbc.w	r3, r3, r1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021a4:	4659      	mov	r1, fp
 80021a6:	018b      	lsls	r3, r1, #6
 80021a8:	4651      	mov	r1, sl
 80021aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ae:	4651      	mov	r1, sl
 80021b0:	018a      	lsls	r2, r1, #6
 80021b2:	4651      	mov	r1, sl
 80021b4:	ebb2 0801 	subs.w	r8, r2, r1
 80021b8:	4659      	mov	r1, fp
 80021ba:	eb63 0901 	sbc.w	r9, r3, r1
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021d2:	4690      	mov	r8, r2
 80021d4:	4699      	mov	r9, r3
 80021d6:	4623      	mov	r3, r4
 80021d8:	eb18 0303 	adds.w	r3, r8, r3
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	462b      	mov	r3, r5
 80021e0:	eb49 0303 	adc.w	r3, r9, r3
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021f2:	4629      	mov	r1, r5
 80021f4:	024b      	lsls	r3, r1, #9
 80021f6:	4621      	mov	r1, r4
 80021f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021fc:	4621      	mov	r1, r4
 80021fe:	024a      	lsls	r2, r1, #9
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002206:	2200      	movs	r2, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
 800220a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800220c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002210:	f7fd fff8 	bl	8000204 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4613      	mov	r3, r2
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800221c:	e058      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221e:	4b38      	ldr	r3, [pc, #224]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	099b      	lsrs	r3, r3, #6
 8002224:	2200      	movs	r2, #0
 8002226:	4618      	mov	r0, r3
 8002228:	4611      	mov	r1, r2
 800222a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002238:	4642      	mov	r2, r8
 800223a:	464b      	mov	r3, r9
 800223c:	f04f 0000 	mov.w	r0, #0
 8002240:	f04f 0100 	mov.w	r1, #0
 8002244:	0159      	lsls	r1, r3, #5
 8002246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800224a:	0150      	lsls	r0, r2, #5
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4641      	mov	r1, r8
 8002252:	ebb2 0a01 	subs.w	sl, r2, r1
 8002256:	4649      	mov	r1, r9
 8002258:	eb63 0b01 	sbc.w	fp, r3, r1
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002268:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800226c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002270:	ebb2 040a 	subs.w	r4, r2, sl
 8002274:	eb63 050b 	sbc.w	r5, r3, fp
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	00eb      	lsls	r3, r5, #3
 8002282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002286:	00e2      	lsls	r2, r4, #3
 8002288:	4614      	mov	r4, r2
 800228a:	461d      	mov	r5, r3
 800228c:	4643      	mov	r3, r8
 800228e:	18e3      	adds	r3, r4, r3
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	464b      	mov	r3, r9
 8002294:	eb45 0303 	adc.w	r3, r5, r3
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022a6:	4629      	mov	r1, r5
 80022a8:	028b      	lsls	r3, r1, #10
 80022aa:	4621      	mov	r1, r4
 80022ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022b0:	4621      	mov	r1, r4
 80022b2:	028a      	lsls	r2, r1, #10
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ba:	2200      	movs	r2, #0
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	61fa      	str	r2, [r7, #28]
 80022c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c4:	f7fd ff9e 	bl	8000204 <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4613      	mov	r3, r2
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	3301      	adds	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_GetSysClockFreq+0x204>)
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3750      	adds	r7, #80	; 0x50
 80022f8:	46bd      	mov	sp, r7
 80022fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200

0800230c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_GetHCLKFreq+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000004 	.word	0x20000004

08002324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002328:	f7ff fff0 	bl	800230c <HAL_RCC_GetHCLKFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0a9b      	lsrs	r3, r3, #10
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4903      	ldr	r1, [pc, #12]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	08007220 	.word	0x08007220

0800234c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002350:	f7ff ffdc 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	0b5b      	lsrs	r3, r3, #13
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4903      	ldr	r1, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	08007220 	.word	0x08007220

08002374 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	220f      	movs	r2, #15
 8002382:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0203 	and.w	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_GetClockConfig+0x5c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_RCC_GetClockConfig+0x60>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0207 	and.w	r2, r3, #7
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40023c00 	.word	0x40023c00

080023d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d035      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002400:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002406:	f7fe ffff 	bl	8001408 <HAL_GetTick>
 800240a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800240e:	f7fe fffb 	bl	8001408 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0ba      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002420:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f0      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	019a      	lsls	r2, r3, #6
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	071b      	lsls	r3, r3, #28
 8002438:	495a      	ldr	r1, [pc, #360]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002440:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002446:	f7fe ffdf 	bl	8001408 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800244e:	f7fe ffdb 	bl	8001408 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e09a      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002460:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8083 	beq.w	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b49      	ldr	r3, [pc, #292]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a48      	ldr	r2, [pc, #288]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002496:	4b44      	ldr	r3, [pc, #272]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a43      	ldr	r2, [pc, #268]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024a2:	f7fe ffb1 	bl	8001408 <HAL_GetTick>
 80024a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7fe ffad 	bl	8001408 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e06c      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024c8:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02f      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d028      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024e6:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f0:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80024fc:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d114      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe ff7b 	bl	8001408 <HAL_GetTick>
 8002512:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe ff77 	bl	8001408 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e034      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ee      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002544:	d10d      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255a:	4912      	ldr	r1, [pc, #72]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
 8002560:	e005      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002568:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800256c:	6093      	str	r3, [r2, #8]
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002570:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7c1a      	ldrb	r2, [r3, #16]
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002592:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	42470068 	.word	0x42470068
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42470e40 	.word	0x42470e40
 80025b0:	424711e0 	.word	0x424711e0

080025b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e066      	b.n	8002698 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7f5b      	ldrb	r3, [r3, #29]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d105      	bne.n	80025e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fbbc 	bl	8000d58 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	22ca      	movs	r2, #202	; 0xca
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2253      	movs	r2, #83	; 0x53
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f87a 	bl	80026f0 <RTC_EnterInitMode>
 80025fc:	4603      	mov	r3, r0
 80025fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d12c      	bne.n	8002660 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002618:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68d2      	ldr	r2, [r2, #12]
 8002640:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6919      	ldr	r1, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f881 	bl	800275e <RTC_ExitInitMode>
 800265c:	4603      	mov	r3, r0
 800265e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d113      	bne.n	800268e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	22ff      	movs	r2, #255	; 0xff
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026bc:	f7fe fea4 	bl	8001408 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026c2:	e009      	b.n	80026d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026c4:	f7fe fea0 	bl	8001408 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d2:	d901      	bls.n	80026d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e007      	b.n	80026e8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0ee      	beq.n	80026c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d122      	bne.n	8002754 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800271c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800271e:	f7fe fe73 	bl	8001408 <HAL_GetTick>
 8002722:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002724:	e00c      	b.n	8002740 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002726:	f7fe fe6f 	bl	8001408 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002734:	d904      	bls.n	8002740 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2204      	movs	r2, #4
 800273a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <RTC_EnterInitMode+0x64>
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d1e8      	bne.n	8002726 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002778:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff89 	bl	80026a0 <HAL_RTC_WaitForSynchro>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2204      	movs	r2, #4
 8002798:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e041      	b.n	800283e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f839 	bl	8002846 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 f9ca 	bl	8002b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d001      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e044      	b.n	80028fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_TIM_Base_Start_IT+0xb0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d018      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d013      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1a      	ldr	r2, [pc, #104]	; (8002910 <HAL_TIM_Base_Start_IT+0xb4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00e      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_TIM_Base_Start_IT+0xb8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_TIM_Base_Start_IT+0xbc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a16      	ldr	r2, [pc, #88]	; (800291c <HAL_TIM_Base_Start_IT+0xc0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d111      	bne.n	80028ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d010      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ea:	e007      	b.n	80028fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800
 8002918:	40000c00 	.word	0x40000c00
 800291c:	40014000 	.word	0x40014000

08002920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d122      	bne.n	800297c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0202 	mvn.w	r2, #2
 800294c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8ee 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f8e0 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f8f1 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d122      	bne.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b04      	cmp	r3, #4
 8002996:	d11b      	bne.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0204 	mvn.w	r2, #4
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f8c4 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8b6 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f8c7 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0208 	mvn.w	r2, #8
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2204      	movs	r2, #4
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f89a 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f88c 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f89d 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d122      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d11b      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0210 	mvn.w	r2, #16
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f870 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f862 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f873 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d10e      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0201 	mvn.w	r2, #1
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe f91a 	bl	8000cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b80      	cmp	r3, #128	; 0x80
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d107      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8e2 	bl	8002c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d10e      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d107      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f838 	bl	8002b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d10e      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d107      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0220 	mvn.w	r2, #32
 8002b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f8ac 	bl	8002c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <TIM_Base_SetConfig+0xe4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00f      	beq.n	8002bb8 <TIM_Base_SetConfig+0x38>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d00b      	beq.n	8002bb8 <TIM_Base_SetConfig+0x38>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <TIM_Base_SetConfig+0xe8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d007      	beq.n	8002bb8 <TIM_Base_SetConfig+0x38>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a30      	ldr	r2, [pc, #192]	; (8002c6c <TIM_Base_SetConfig+0xec>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d003      	beq.n	8002bb8 <TIM_Base_SetConfig+0x38>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a2f      	ldr	r2, [pc, #188]	; (8002c70 <TIM_Base_SetConfig+0xf0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d108      	bne.n	8002bca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a25      	ldr	r2, [pc, #148]	; (8002c64 <TIM_Base_SetConfig+0xe4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01b      	beq.n	8002c0a <TIM_Base_SetConfig+0x8a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd8:	d017      	beq.n	8002c0a <TIM_Base_SetConfig+0x8a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <TIM_Base_SetConfig+0xe8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <TIM_Base_SetConfig+0x8a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <TIM_Base_SetConfig+0xec>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00f      	beq.n	8002c0a <TIM_Base_SetConfig+0x8a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a20      	ldr	r2, [pc, #128]	; (8002c70 <TIM_Base_SetConfig+0xf0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00b      	beq.n	8002c0a <TIM_Base_SetConfig+0x8a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <TIM_Base_SetConfig+0xf4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_Base_SetConfig+0x8a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <TIM_Base_SetConfig+0xf8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <TIM_Base_SetConfig+0x8a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <TIM_Base_SetConfig+0xfc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <TIM_Base_SetConfig+0xe4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d103      	bne.n	8002c50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	615a      	str	r2, [r3, #20]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800

08002c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e03f      	b.n	8002d3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fe f86e 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	; 0x24
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fddf 	bl	80038b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08a      	sub	sp, #40	; 0x28
 8002d46:	af02      	add	r7, sp, #8
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d17c      	bne.n	8002e5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_UART_Transmit+0x2c>
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e075      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Transmit+0x3e>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e06e      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2221      	movs	r2, #33	; 0x21
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d96:	f7fe fb37 	bl	8001408 <HAL_GetTick>
 8002d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	88fa      	ldrh	r2, [r7, #6]
 8002da6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db0:	d108      	bne.n	8002dc4 <HAL_UART_Transmit+0x82>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e003      	b.n	8002dcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dd4:	e02a      	b.n	8002e2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fb1f 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e036      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e007      	b.n	8002e1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1cf      	bne.n	8002dd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2140      	movs	r1, #64	; 0x40
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 faef 	bl	8003424 <UART_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e006      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	4613      	mov	r3, r2
 8002e72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d11d      	bne.n	8002ebc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_UART_Receive_IT+0x26>
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e016      	b.n	8002ebe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Receive_IT+0x38>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e00f      	b.n	8002ebe <HAL_UART_Receive_IT+0x58>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fb24 	bl	8003500 <UART_Start_Receive_IT>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	e000      	b.n	8002ebe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b0ba      	sub	sp, #232	; 0xe8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_UART_IRQHandler+0x66>
 8002f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fc07 	bl	800373a <UART_Receive_IT>
      return;
 8002f2c:	e256      	b.n	80033dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80de 	beq.w	80030f4 <HAL_UART_IRQHandler+0x22c>
 8002f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80d1 	beq.w	80030f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_UART_IRQHandler+0xae>
 8002f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f043 0201 	orr.w	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_UART_IRQHandler+0xd2>
 8002f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f043 0202 	orr.w	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_UART_IRQHandler+0xf6>
 8002fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0204 	orr.w	r2, r3, #4
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d011      	beq.n	8002fee <HAL_UART_IRQHandler+0x126>
 8002fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d105      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0208 	orr.w	r2, r3, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 81ed 	beq.w	80033d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_UART_IRQHandler+0x14e>
 8003004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fb92 	bl	800373a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <HAL_UART_IRQHandler+0x17a>
 800303a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04f      	beq.n	80030e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa9a 	bl	800357c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d141      	bne.n	80030da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3314      	adds	r3, #20
 800305c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800306c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3314      	adds	r3, #20
 800307e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003082:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800308e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003092:	e841 2300 	strex	r3, r2, [r1]
 8003096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800309a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1d9      	bne.n	8003056 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d013      	beq.n	80030d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	4a7d      	ldr	r2, [pc, #500]	; (80032a4 <HAL_UART_IRQHandler+0x3dc>)
 80030b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fb04 	bl	80016c4 <HAL_DMA_Abort_IT>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030cc:	4610      	mov	r0, r2
 80030ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	e00e      	b.n	80030f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f990 	bl	80033f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	e00a      	b.n	80030f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f98c 	bl	80033f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	e006      	b.n	80030f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f988 	bl	80033f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030ee:	e170      	b.n	80033d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	bf00      	nop
    return;
 80030f2:	e16e      	b.n	80033d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	f040 814a 	bne.w	8003392 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8143 	beq.w	8003392 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800310c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 813c 	beq.w	8003392 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	f040 80b4 	bne.w	80032a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800314c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8140 	beq.w	80033d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800315a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800315e:	429a      	cmp	r2, r3
 8003160:	f080 8139 	bcs.w	80033d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800316a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003176:	f000 8088 	beq.w	800328a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	330c      	adds	r3, #12
 80031a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80031a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1d9      	bne.n	800317a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3314      	adds	r3, #20
 80031cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e1      	bne.n	80031c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3314      	adds	r3, #20
 8003222:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003226:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003228:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800322c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e3      	bne.n	8003202 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800325a:	f023 0310 	bic.w	r3, r3, #16
 800325e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800326c:	65ba      	str	r2, [r7, #88]	; 0x58
 800326e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800327a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e3      	bne.n	8003248 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe f9ad 	bl	80015e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003292:	b29b      	uxth	r3, r3
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	b29b      	uxth	r3, r3
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8b6 	bl	800340c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032a0:	e099      	b.n	80033d6 <HAL_UART_IRQHandler+0x50e>
 80032a2:	bf00      	nop
 80032a4:	08003643 	.word	0x08003643
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 808b 	beq.w	80033da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80032c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8086 	beq.w	80033da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80032f2:	647a      	str	r2, [r7, #68]	; 0x44
 80032f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032fa:	e841 2300 	strex	r3, r2, [r1]
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1e3      	bne.n	80032ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	623b      	str	r3, [r7, #32]
   return(result);
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3314      	adds	r3, #20
 8003326:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800332a:	633a      	str	r2, [r7, #48]	; 0x30
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003332:	e841 2300 	strex	r3, r2, [r1]
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1e3      	bne.n	8003306 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	60fb      	str	r3, [r7, #12]
   return(result);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0310 	bic.w	r3, r3, #16
 8003362:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003370:	61fa      	str	r2, [r7, #28]
 8003372:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	69b9      	ldr	r1, [r7, #24]
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	617b      	str	r3, [r7, #20]
   return(result);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e3      	bne.n	800334c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f83e 	bl	800340c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003390:	e023      	b.n	80033da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_UART_IRQHandler+0x4ea>
 800339e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f95d 	bl	800366a <UART_Transmit_IT>
    return;
 80033b0:	e014      	b.n	80033dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00e      	beq.n	80033dc <HAL_UART_IRQHandler+0x514>
 80033be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f99d 	bl	800370a <UART_EndTransmit_IT>
    return;
 80033d0:	e004      	b.n	80033dc <HAL_UART_IRQHandler+0x514>
    return;
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <HAL_UART_IRQHandler+0x514>
      return;
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <HAL_UART_IRQHandler+0x514>
      return;
 80033da:	bf00      	nop
  }
}
 80033dc:	37e8      	adds	r7, #232	; 0xe8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop

080033e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b090      	sub	sp, #64	; 0x40
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003434:	e050      	b.n	80034d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d04c      	beq.n	80034d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800343e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <UART_WaitOnFlagUntilTimeout+0x30>
 8003444:	f7fd ffe0 	bl	8001408 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003450:	429a      	cmp	r2, r3
 8003452:	d241      	bcs.n	80034d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	330c      	adds	r3, #12
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800346a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003474:	637a      	str	r2, [r7, #52]	; 0x34
 8003476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800347a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e5      	bne.n	8003454 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3314      	adds	r3, #20
 800348e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	613b      	str	r3, [r7, #16]
   return(result);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3314      	adds	r3, #20
 80034a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a8:	623a      	str	r2, [r7, #32]
 80034aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	6a3a      	ldr	r2, [r7, #32]
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e00f      	b.n	80034f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d09f      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3740      	adds	r7, #64	; 0x40
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	88fa      	ldrh	r2, [r7, #6]
 800351e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2222      	movs	r2, #34	; 0x22
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800354c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0220 	orr.w	r2, r2, #32
 800356c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800357c:	b480      	push	{r7}
 800357e:	b095      	sub	sp, #84	; 0x54
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	330c      	adds	r3, #12
 80035a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a4:	643a      	str	r2, [r7, #64]	; 0x40
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e5      	bne.n	8003584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3314      	adds	r3, #20
 80035be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3314      	adds	r3, #20
 80035d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e5      	bne.n	80035b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d119      	bne.n	8003628 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	60bb      	str	r3, [r7, #8]
   return(result);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f023 0310 	bic.w	r3, r3, #16
 800360a:	647b      	str	r3, [r7, #68]	; 0x44
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003614:	61ba      	str	r2, [r7, #24]
 8003616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6979      	ldr	r1, [r7, #20]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	613b      	str	r3, [r7, #16]
   return(result);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e5      	bne.n	80035f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003636:	bf00      	nop
 8003638:	3754      	adds	r7, #84	; 0x54
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fecb 	bl	80033f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b21      	cmp	r3, #33	; 0x21
 800367c:	d13e      	bne.n	80036fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003686:	d114      	bne.n	80036b2 <UART_Transmit_IT+0x48>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d110      	bne.n	80036b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	1c9a      	adds	r2, r3, #2
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	621a      	str	r2, [r3, #32]
 80036b0:	e008      	b.n	80036c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	1c59      	adds	r1, r3, #1
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6211      	str	r1, [r2, #32]
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4619      	mov	r1, r3
 80036d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10f      	bne.n	80036f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003720:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fe5a 	bl	80033e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b08c      	sub	sp, #48	; 0x30
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b22      	cmp	r3, #34	; 0x22
 800374c:	f040 80ab 	bne.w	80038a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003758:	d117      	bne.n	800378a <UART_Receive_IT+0x50>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d113      	bne.n	800378a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003778:	b29a      	uxth	r2, r3
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
 8003788:	e026      	b.n	80037d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003790:	2300      	movs	r3, #0
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379c:	d007      	beq.n	80037ae <UART_Receive_IT+0x74>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <UART_Receive_IT+0x82>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e008      	b.n	80037ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4619      	mov	r1, r3
 80037e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d15a      	bne.n	80038a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0220 	bic.w	r2, r2, #32
 80037fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800380a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	2b01      	cmp	r3, #1
 800382a:	d135      	bne.n	8003898 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	613b      	str	r3, [r7, #16]
   return(result);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f023 0310 	bic.w	r3, r3, #16
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	330c      	adds	r3, #12
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	623a      	str	r2, [r7, #32]
 8003854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	69f9      	ldr	r1, [r7, #28]
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e5      	bne.n	8003832 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b10      	cmp	r3, #16
 8003872:	d10a      	bne.n	800388a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800388e:	4619      	mov	r1, r3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff fdbb 	bl	800340c <HAL_UARTEx_RxEventCallback>
 8003896:	e002      	b.n	800389e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fd f9ab 	bl	8000bf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e002      	b.n	80038a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3730      	adds	r7, #48	; 0x30
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b4:	b0c0      	sub	sp, #256	; 0x100
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	68d9      	ldr	r1, [r3, #12]
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	ea40 0301 	orr.w	r3, r0, r1
 80038d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003908:	f021 010c 	bic.w	r1, r1, #12
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003916:	430b      	orrs	r3, r1
 8003918:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	6999      	ldr	r1, [r3, #24]
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	ea40 0301 	orr.w	r3, r0, r1
 8003936:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b8f      	ldr	r3, [pc, #572]	; (8003b7c <UART_SetConfig+0x2cc>)
 8003940:	429a      	cmp	r2, r3
 8003942:	d005      	beq.n	8003950 <UART_SetConfig+0xa0>
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b8d      	ldr	r3, [pc, #564]	; (8003b80 <UART_SetConfig+0x2d0>)
 800394c:	429a      	cmp	r2, r3
 800394e:	d104      	bne.n	800395a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003950:	f7fe fcfc 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 8003954:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003958:	e003      	b.n	8003962 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800395a:	f7fe fce3 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 800395e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396c:	f040 810c 	bne.w	8003b88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003974:	2200      	movs	r2, #0
 8003976:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800397a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800397e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003982:	4622      	mov	r2, r4
 8003984:	462b      	mov	r3, r5
 8003986:	1891      	adds	r1, r2, r2
 8003988:	65b9      	str	r1, [r7, #88]	; 0x58
 800398a:	415b      	adcs	r3, r3
 800398c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800398e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003992:	4621      	mov	r1, r4
 8003994:	eb12 0801 	adds.w	r8, r2, r1
 8003998:	4629      	mov	r1, r5
 800399a:	eb43 0901 	adc.w	r9, r3, r1
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b2:	4690      	mov	r8, r2
 80039b4:	4699      	mov	r9, r3
 80039b6:	4623      	mov	r3, r4
 80039b8:	eb18 0303 	adds.w	r3, r8, r3
 80039bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039c0:	462b      	mov	r3, r5
 80039c2:	eb49 0303 	adc.w	r3, r9, r3
 80039c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039de:	460b      	mov	r3, r1
 80039e0:	18db      	adds	r3, r3, r3
 80039e2:	653b      	str	r3, [r7, #80]	; 0x50
 80039e4:	4613      	mov	r3, r2
 80039e6:	eb42 0303 	adc.w	r3, r2, r3
 80039ea:	657b      	str	r3, [r7, #84]	; 0x54
 80039ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039f4:	f7fc fc06 	bl	8000204 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4b61      	ldr	r3, [pc, #388]	; (8003b84 <UART_SetConfig+0x2d4>)
 80039fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	011c      	lsls	r4, r3, #4
 8003a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a18:	4642      	mov	r2, r8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	1891      	adds	r1, r2, r2
 8003a1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a20:	415b      	adcs	r3, r3
 8003a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a28:	4641      	mov	r1, r8
 8003a2a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a2e:	4649      	mov	r1, r9
 8003a30:	eb43 0b01 	adc.w	fp, r3, r1
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a48:	4692      	mov	sl, r2
 8003a4a:	469b      	mov	fp, r3
 8003a4c:	4643      	mov	r3, r8
 8003a4e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a56:	464b      	mov	r3, r9
 8003a58:	eb4b 0303 	adc.w	r3, fp, r3
 8003a5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a74:	460b      	mov	r3, r1
 8003a76:	18db      	adds	r3, r3, r3
 8003a78:	643b      	str	r3, [r7, #64]	; 0x40
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	eb42 0303 	adc.w	r3, r2, r3
 8003a80:	647b      	str	r3, [r7, #68]	; 0x44
 8003a82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a8a:	f7fc fbbb 	bl	8000204 <__aeabi_uldivmod>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <UART_SetConfig+0x2d4>)
 8003a96:	fba3 2301 	umull	r2, r3, r3, r1
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2264      	movs	r2, #100	; 0x64
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	1acb      	subs	r3, r1, r3
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003aaa:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <UART_SetConfig+0x2d4>)
 8003aac:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ab8:	441c      	add	r4, r3
 8003aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ac8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	1891      	adds	r1, r2, r2
 8003ad2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ad4:	415b      	adcs	r3, r3
 8003ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003adc:	4641      	mov	r1, r8
 8003ade:	1851      	adds	r1, r2, r1
 8003ae0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	414b      	adcs	r3, r1
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003af4:	4659      	mov	r1, fp
 8003af6:	00cb      	lsls	r3, r1, #3
 8003af8:	4651      	mov	r1, sl
 8003afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afe:	4651      	mov	r1, sl
 8003b00:	00ca      	lsls	r2, r1, #3
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	4642      	mov	r2, r8
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b10:	464b      	mov	r3, r9
 8003b12:	460a      	mov	r2, r1
 8003b14:	eb42 0303 	adc.w	r3, r2, r3
 8003b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b30:	460b      	mov	r3, r1
 8003b32:	18db      	adds	r3, r3, r3
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b36:	4613      	mov	r3, r2
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b46:	f7fc fb5d 	bl	8000204 <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <UART_SetConfig+0x2d4>)
 8003b50:	fba3 1302 	umull	r1, r3, r3, r2
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	2164      	movs	r1, #100	; 0x64
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	3332      	adds	r3, #50	; 0x32
 8003b62:	4a08      	ldr	r2, [pc, #32]	; (8003b84 <UART_SetConfig+0x2d4>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	f003 0207 	and.w	r2, r3, #7
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4422      	add	r2, r4
 8003b76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b78:	e105      	b.n	8003d86 <UART_SetConfig+0x4d6>
 8003b7a:	bf00      	nop
 8003b7c:	40011000 	.word	0x40011000
 8003b80:	40011400 	.word	0x40011400
 8003b84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b9a:	4642      	mov	r2, r8
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	1891      	adds	r1, r2, r2
 8003ba0:	6239      	str	r1, [r7, #32]
 8003ba2:	415b      	adcs	r3, r3
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003baa:	4641      	mov	r1, r8
 8003bac:	1854      	adds	r4, r2, r1
 8003bae:	4649      	mov	r1, r9
 8003bb0:	eb43 0501 	adc.w	r5, r3, r1
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	00eb      	lsls	r3, r5, #3
 8003bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc2:	00e2      	lsls	r2, r4, #3
 8003bc4:	4614      	mov	r4, r2
 8003bc6:	461d      	mov	r5, r3
 8003bc8:	4643      	mov	r3, r8
 8003bca:	18e3      	adds	r3, r4, r3
 8003bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	eb45 0303 	adc.w	r3, r5, r3
 8003bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003be6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	008b      	lsls	r3, r1, #2
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c00:	4621      	mov	r1, r4
 8003c02:	008a      	lsls	r2, r1, #2
 8003c04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c08:	f7fc fafc 	bl	8000204 <__aeabi_uldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4b60      	ldr	r3, [pc, #384]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003c12:	fba3 2302 	umull	r2, r3, r3, r2
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	011c      	lsls	r4, r3, #4
 8003c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	1891      	adds	r1, r2, r2
 8003c32:	61b9      	str	r1, [r7, #24]
 8003c34:	415b      	adcs	r3, r3
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	1851      	adds	r1, r2, r1
 8003c40:	6139      	str	r1, [r7, #16]
 8003c42:	4649      	mov	r1, r9
 8003c44:	414b      	adcs	r3, r1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c54:	4659      	mov	r1, fp
 8003c56:	00cb      	lsls	r3, r1, #3
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c5e:	4651      	mov	r1, sl
 8003c60:	00ca      	lsls	r2, r1, #3
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	4642      	mov	r2, r8
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c70:	464b      	mov	r3, r9
 8003c72:	460a      	mov	r2, r1
 8003c74:	eb42 0303 	adc.w	r3, r2, r3
 8003c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c94:	4649      	mov	r1, r9
 8003c96:	008b      	lsls	r3, r1, #2
 8003c98:	4641      	mov	r1, r8
 8003c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	008a      	lsls	r2, r1, #2
 8003ca2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ca6:	f7fc faad 	bl	8000204 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	2164      	movs	r1, #100	; 0x64
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	3332      	adds	r3, #50	; 0x32
 8003cc2:	4a34      	ldr	r2, [pc, #208]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cce:	441c      	add	r4, r3
 8003cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	673b      	str	r3, [r7, #112]	; 0x70
 8003cd8:	677a      	str	r2, [r7, #116]	; 0x74
 8003cda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cde:	4642      	mov	r2, r8
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	1891      	adds	r1, r2, r2
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	415b      	adcs	r3, r3
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cee:	4641      	mov	r1, r8
 8003cf0:	1851      	adds	r1, r2, r1
 8003cf2:	6039      	str	r1, [r7, #0]
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	414b      	adcs	r3, r1
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d06:	4659      	mov	r1, fp
 8003d08:	00cb      	lsls	r3, r1, #3
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d10:	4651      	mov	r1, sl
 8003d12:	00ca      	lsls	r2, r1, #3
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4642      	mov	r2, r8
 8003d1c:	189b      	adds	r3, r3, r2
 8003d1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d20:	464b      	mov	r3, r9
 8003d22:	460a      	mov	r2, r1
 8003d24:	eb42 0303 	adc.w	r3, r2, r3
 8003d28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	663b      	str	r3, [r7, #96]	; 0x60
 8003d34:	667a      	str	r2, [r7, #100]	; 0x64
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d42:	4649      	mov	r1, r9
 8003d44:	008b      	lsls	r3, r1, #2
 8003d46:	4641      	mov	r1, r8
 8003d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	008a      	lsls	r2, r1, #2
 8003d50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d54:	f7fc fa56 	bl	8000204 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2164      	movs	r1, #100	; 0x64
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	3332      	adds	r3, #50	; 0x32
 8003d70:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <UART_SetConfig+0x4e4>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	f003 020f 	and.w	r2, r3, #15
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4422      	add	r2, r4
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	bf00      	nop
 8003d88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d92:	bf00      	nop
 8003d94:	51eb851f 	.word	0x51eb851f

08003d98 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f103 0208 	add.w	r2, r3, #8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f04f 32ff 	mov.w	r2, #4294967295
 8003db0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f103 0208 	add.w	r2, r3, #8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f103 0208 	add.w	r2, r3, #8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d103      	bne.n	8003e12 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e00c      	b.n	8003e2c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3308      	adds	r3, #8
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e002      	b.n	8003e20 <vListInsert+0x2e>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d2f6      	bcs.n	8003e1a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	601a      	str	r2, [r3, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6892      	ldr	r2, [r2, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6852      	ldr	r2, [r2, #4]
 8003e84:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d103      	bne.n	8003e98 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	1e5a      	subs	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <xQueueGenericReset+0x2e>
        __asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	60fb      	str	r3, [r7, #12]
    }
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d05d      	beq.n	8003fa8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d059      	beq.n	8003fa8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efc:	2100      	movs	r1, #0
 8003efe:	fba3 2302 	umull	r2, r3, r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d000      	beq.n	8003f08 <xQueueGenericReset+0x50>
 8003f06:	2101      	movs	r1, #1
 8003f08:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d14c      	bne.n	8003fa8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003f0e:	f002 fd29 	bl	8006964 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	6939      	ldr	r1, [r7, #16]
 8003f1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f1e:	fb01 f303 	mul.w	r3, r1, r3
 8003f22:	441a      	add	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	6939      	ldr	r1, [r7, #16]
 8003f42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	441a      	add	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	22ff      	movs	r2, #255	; 0xff
 8003f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	22ff      	movs	r2, #255	; 0xff
 8003f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d114      	bne.n	8003f8e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01a      	beq.n	8003fa2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	3310      	adds	r3, #16
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 fa4f 	bl	8005414 <xTaskRemoveFromEventList>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <xQueueGenericReset+0x11c>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	e009      	b.n	8003fa2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3310      	adds	r3, #16
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ff00 	bl	8003d98 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	3324      	adds	r3, #36	; 0x24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fefb 	bl	8003d98 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003fa2:	f002 fd0f 	bl	80069c4 <vPortExitCritical>
 8003fa6:	e001      	b.n	8003fac <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <xQueueGenericReset+0x110>
        __asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	60bb      	str	r3, [r7, #8]
    }
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003fc8:	697b      	ldr	r3, [r7, #20]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	e000ed04 	.word	0xe000ed04

08003fd8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02e      	beq.n	800404e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d000      	beq.n	8004000 <xQueueGenericCreate+0x28>
 8003ffe:	2101      	movs	r1, #1
 8004000:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004002:	2b00      	cmp	r3, #0
 8004004:	d123      	bne.n	800404e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800400e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004012:	d81c      	bhi.n	800404e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	3350      	adds	r3, #80	; 0x50
 8004022:	4618      	mov	r0, r3
 8004024:	f002 fdc2 	bl	8006bac <pvPortMalloc>
 8004028:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01c      	beq.n	800406a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3350      	adds	r3, #80	; 0x50
 8004038:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800403a:	79fa      	ldrb	r2, [r7, #7]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f814 	bl	8004074 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800404c:	e00d      	b.n	800406a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <xQueueGenericCreate+0x92>
        __asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	613b      	str	r3, [r7, #16]
    }
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800406a:	69fb      	ldr	r3, [r7, #28]
    }
 800406c:	4618      	mov	r0, r3
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d103      	bne.n	8004090 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e002      	b.n	8004096 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040a2:	2101      	movs	r1, #1
 80040a4:	69b8      	ldr	r0, [r7, #24]
 80040a6:	f7ff ff07 	bl	8003eb8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	; 0x38
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040ca:	2300      	movs	r3, #0
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xQueueGenericSend+0x32>
        __asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <xQueueGenericSend+0x40>
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <xQueueGenericSend+0x44>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <xQueueGenericSend+0x46>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <xQueueGenericSend+0x60>
        __asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d103      	bne.n	800412a <xQueueGenericSend+0x6e>
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <xQueueGenericSend+0x72>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <xQueueGenericSend+0x74>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <xQueueGenericSend+0x8e>
        __asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	623b      	str	r3, [r7, #32]
    }
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800414a:	f001 fb73 	bl	8005834 <xTaskGetSchedulerState>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <xQueueGenericSend+0x9e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <xQueueGenericSend+0xa2>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <xQueueGenericSend+0xa4>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueGenericSend+0xbe>
        __asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	61fb      	str	r3, [r7, #28]
    }
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800417a:	f002 fbf3 	bl	8006964 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <xQueueGenericSend+0xd4>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d129      	bne.n	80041e4 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004196:	f000 fad6 	bl	8004746 <prvCopyDataToQueue>
 800419a:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d010      	beq.n	80041c6 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	3324      	adds	r3, #36	; 0x24
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 f933 	bl	8005414 <xTaskRemoveFromEventList>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80041b4:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <xQueueGenericSend+0x1f8>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	e00a      	b.n	80041dc <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80041cc:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <xQueueGenericSend+0x1f8>)
 80041ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80041dc:	f002 fbf2 	bl	80069c4 <vPortExitCritical>
                return pdPASS;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e063      	b.n	80042ac <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80041ea:	f002 fbeb 	bl	80069c4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e05c      	b.n	80042ac <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80041f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 f9df 	bl	80055c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004202:	2301      	movs	r3, #1
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004206:	f002 fbdd 	bl	80069c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800420a:	f000 fe01 	bl	8004e10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800420e:	f002 fba9 	bl	8006964 <vPortEnterCritical>
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004218:	b25b      	sxtb	r3, r3
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d103      	bne.n	8004228 <xQueueGenericSend+0x16c>
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800422e:	b25b      	sxtb	r3, r3
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d103      	bne.n	800423e <xQueueGenericSend+0x182>
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800423e:	f002 fbc1 	bl	80069c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004242:	1d3a      	adds	r2, r7, #4
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f001 f9ce 	bl	80055ec <xTaskCheckForTimeOut>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d124      	bne.n	80042a0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004258:	f000 fb5f 	bl	800491a <prvIsQueueFull>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d018      	beq.n	8004294 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	3310      	adds	r3, #16
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f001 f868 	bl	8005340 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004272:	f000 faea 	bl	800484a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004276:	f000 fdd9 	bl	8004e2c <xTaskResumeAll>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	f47f af7c 	bne.w	800417a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <xQueueGenericSend+0x1f8>)
 8004284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	e772      	b.n	800417a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004296:	f000 fad8 	bl	800484a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800429a:	f000 fdc7 	bl	8004e2c <xTaskResumeAll>
 800429e:	e76c      	b.n	800417a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80042a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042a2:	f000 fad2 	bl	800484a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80042a6:	f000 fdc1 	bl	8004e2c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80042aa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3738      	adds	r7, #56	; 0x38
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b092      	sub	sp, #72	; 0x48
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 80042ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <xQueueGenericSendFromISR+0x3c>
 80042ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <xQueueGenericSendFromISR+0x40>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <xQueueGenericSendFromISR+0x42>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d103      	bne.n	8004322 <xQueueGenericSendFromISR+0x6a>
 800431a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <xQueueGenericSendFromISR+0x6e>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <xQueueGenericSendFromISR+0x70>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004342:	f002 fbf3 	bl	8006b2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004346:	f3ef 8211 	mrs	r2, BASEPRI
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	623a      	str	r2, [r7, #32]
 800435c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800435e:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004360:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <xQueueGenericSendFromISR+0xbc>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d146      	bne.n	8004402 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800437a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800437e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800438a:	f000 f9dc 	bl	8004746 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800438e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d112      	bne.n	80043be <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d02d      	beq.n	80043fc <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a2:	3324      	adds	r3, #36	; 0x24
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 f835 	bl	8005414 <xTaskRemoveFromEventList>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d025      	beq.n	80043fc <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d022      	beq.n	80043fc <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e01e      	b.n	80043fc <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80043be:	f000 fe41 	bl	8005044 <uxTaskGetNumberOfTasks>
 80043c2:	6338      	str	r0, [r7, #48]	; 0x30
 80043c4:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d916      	bls.n	80043fc <xQueueGenericSendFromISR+0x144>
 80043ce:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80043d2:	2b7f      	cmp	r3, #127	; 0x7f
 80043d4:	d10a      	bne.n	80043ec <xQueueGenericSendFromISR+0x134>
        __asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	61bb      	str	r3, [r7, #24]
    }
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <xQueueGenericSendFromISR+0x132>
 80043ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80043f0:	3301      	adds	r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	b25a      	sxtb	r2, r3
 80043f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80043fc:	2301      	movs	r3, #1
 80043fe:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8004400:	e001      	b.n	8004406 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004402:	2300      	movs	r3, #0
 8004404:	647b      	str	r3, [r7, #68]	; 0x44
 8004406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004408:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004410:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004414:	4618      	mov	r0, r3
 8004416:	3748      	adds	r7, #72	; 0x48
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	; 0x30
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004428:	2300      	movs	r3, #0
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <xQueueReceive+0x30>
        __asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	623b      	str	r3, [r7, #32]
    }
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <xQueueReceive+0x3e>
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <xQueueReceive+0x42>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <xQueueReceive+0x44>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <xQueueReceive+0x5e>
        __asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	61fb      	str	r3, [r7, #28]
    }
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800447a:	f001 f9db 	bl	8005834 <xTaskGetSchedulerState>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <xQueueReceive+0x6e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <xQueueReceive+0x72>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <xQueueReceive+0x74>
 800448e:	2300      	movs	r3, #0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <xQueueReceive+0x8e>
        __asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	61bb      	str	r3, [r7, #24]
    }
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80044aa:	f002 fa5b 	bl	8006964 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01f      	beq.n	80044fa <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044be:	f000 f99e 	bl	80047fe <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1e5a      	subs	r2, r3, #1
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00f      	beq.n	80044f2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	3310      	adds	r3, #16
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 ff9c 	bl	8005414 <xTaskRemoveFromEventList>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80044e2:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <xQueueReceive+0x1bc>)
 80044e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80044f2:	f002 fa67 	bl	80069c4 <vPortExitCritical>
                return pdPASS;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e069      	b.n	80045ce <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004500:	f002 fa60 	bl	80069c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004504:	2300      	movs	r3, #0
 8004506:	e062      	b.n	80045ce <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800450e:	f107 0310 	add.w	r3, r7, #16
 8004512:	4618      	mov	r0, r3
 8004514:	f001 f854 	bl	80055c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004518:	2301      	movs	r3, #1
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800451c:	f002 fa52 	bl	80069c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004520:	f000 fc76 	bl	8004e10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004524:	f002 fa1e 	bl	8006964 <vPortEnterCritical>
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800452e:	b25b      	sxtb	r3, r3
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d103      	bne.n	800453e <xQueueReceive+0x122>
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004544:	b25b      	sxtb	r3, r3
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d103      	bne.n	8004554 <xQueueReceive+0x138>
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004554:	f002 fa36 	bl	80069c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004558:	1d3a      	adds	r2, r7, #4
 800455a:	f107 0310 	add.w	r3, r7, #16
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f001 f843 	bl	80055ec <xTaskCheckForTimeOut>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d123      	bne.n	80045b4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800456c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456e:	f000 f9be 	bl	80048ee <prvIsQueueEmpty>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d017      	beq.n	80045a8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	3324      	adds	r3, #36	; 0x24
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4611      	mov	r1, r2
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fedd 	bl	8005340 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004588:	f000 f95f 	bl	800484a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800458c:	f000 fc4e 	bl	8004e2c <xTaskResumeAll>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d189      	bne.n	80044aa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <xQueueReceive+0x1bc>)
 8004598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	e780      	b.n	80044aa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80045a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045aa:	f000 f94e 	bl	800484a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80045ae:	f000 fc3d 	bl	8004e2c <xTaskResumeAll>
 80045b2:	e77a      	b.n	80044aa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80045b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b6:	f000 f948 	bl	800484a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045ba:	f000 fc37 	bl	8004e2c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c0:	f000 f995 	bl	80048ee <prvIsQueueEmpty>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f43f af6f 	beq.w	80044aa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80045cc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3730      	adds	r7, #48	; 0x30
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b090      	sub	sp, #64	; 0x40
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80045ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004604:	bf00      	nop
 8004606:	e7fe      	b.n	8004606 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d103      	bne.n	8004616 <xQueueReceiveFromISR+0x3a>
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <xQueueReceiveFromISR+0x3e>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <xQueueReceiveFromISR+0x40>
 800461a:	2300      	movs	r3, #0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	623b      	str	r3, [r7, #32]
    }
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004636:	f002 fa79 	bl	8006b2c <vPortValidateInterruptPriority>
        __asm volatile
 800463a:	f3ef 8211 	mrs	r2, BASEPRI
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	61fa      	str	r2, [r7, #28]
 8004650:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8004652:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	2b00      	cmp	r3, #0
 8004660:	d046      	beq.n	80046f0 <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004670:	f000 f8c5 	bl	80047fe <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	1e5a      	subs	r2, r3, #1
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800467c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d112      	bne.n	80046ac <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02d      	beq.n	80046ea <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	3310      	adds	r3, #16
 8004692:	4618      	mov	r0, r3
 8004694:	f000 febe 	bl	8005414 <xTaskRemoveFromEventList>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d025      	beq.n	80046ea <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d022      	beq.n	80046ea <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e01e      	b.n	80046ea <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80046ac:	f000 fcca 	bl	8005044 <uxTaskGetNumberOfTasks>
 80046b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80046b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80046b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d916      	bls.n	80046ea <xQueueReceiveFromISR+0x10e>
 80046bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80046c0:	2b7f      	cmp	r3, #127	; 0x7f
 80046c2:	d10a      	bne.n	80046da <xQueueReceiveFromISR+0xfe>
        __asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	617b      	str	r3, [r7, #20]
    }
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xQueueReceiveFromISR+0xfc>
 80046da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046de:	3301      	adds	r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	b25a      	sxtb	r2, r3
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80046ea:	2301      	movs	r3, #1
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ee:	e001      	b.n	80046f4 <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f6:	613b      	str	r3, [r7, #16]
        __asm volatile
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f383 8811 	msr	BASEPRI, r3
    }
 80046fe:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004702:	4618      	mov	r0, r3
 8004704:	3740      	adds	r7, #64	; 0x40
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60bb      	str	r3, [r7, #8]
    }
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800472e:	f002 f919 	bl	8006964 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004738:	f002 f944 	bl	80069c4 <vPortExitCritical>

    return uxReturn;
 800473c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d043      	beq.n	80047ec <prvCopyDataToQueue+0xa6>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d119      	bne.n	800479e <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6858      	ldr	r0, [r3, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	461a      	mov	r2, r3
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	f002 fc09 	bl	8006f8c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	441a      	add	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	429a      	cmp	r2, r3
 8004792:	d32b      	bcc.n	80047ec <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	605a      	str	r2, [r3, #4]
 800479c:	e026      	b.n	80047ec <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68d8      	ldr	r0, [r3, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	461a      	mov	r2, r3
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	f002 fbef 	bl	8006f8c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	425b      	negs	r3, r3
 80047b8:	441a      	add	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d207      	bcs.n	80047da <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	425b      	negs	r3, r3
 80047d4:	441a      	add	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d105      	bne.n	80047ec <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80047f4:	693b      	ldr	r3, [r7, #16]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d018      	beq.n	8004842 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d303      	bcc.n	8004832 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68d9      	ldr	r1, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	461a      	mov	r2, r3
 800483c:	6838      	ldr	r0, [r7, #0]
 800483e:	f002 fba5 	bl	8006f8c <memcpy>
    }
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004852:	f002 f887 	bl	8006964 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800485c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800485e:	e011      	b.n	8004884 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d012      	beq.n	800488e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3324      	adds	r3, #36	; 0x24
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fdd1 	bl	8005414 <xTaskRemoveFromEventList>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004878:	f000 ff1e 	bl	80056b8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	3b01      	subs	r3, #1
 8004880:	b2db      	uxtb	r3, r3
 8004882:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004888:	2b00      	cmp	r3, #0
 800488a:	dce9      	bgt.n	8004860 <prvUnlockQueue+0x16>
 800488c:	e000      	b.n	8004890 <prvUnlockQueue+0x46>
                    break;
 800488e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	22ff      	movs	r2, #255	; 0xff
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004898:	f002 f894 	bl	80069c4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800489c:	f002 f862 	bl	8006964 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048a6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80048a8:	e011      	b.n	80048ce <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3310      	adds	r3, #16
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fdac 	bl	8005414 <xTaskRemoveFromEventList>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80048c2:	f000 fef9 	bl	80056b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80048c6:	7bbb      	ldrb	r3, [r7, #14]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	dce9      	bgt.n	80048aa <prvUnlockQueue+0x60>
 80048d6:	e000      	b.n	80048da <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80048d8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	22ff      	movs	r2, #255	; 0xff
 80048de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80048e2:	f002 f86f 	bl	80069c4 <vPortExitCritical>
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80048f6:	f002 f835 	bl	8006964 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	e001      	b.n	800490c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800490c:	f002 f85a 	bl	80069c4 <vPortExitCritical>

    return xReturn;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004922:	f002 f81f 	bl	8006964 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	429a      	cmp	r2, r3
 8004930:	d102      	bne.n	8004938 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004932:	2301      	movs	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e001      	b.n	800493c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800493c:	f002 f842 	bl	80069c4 <vPortExitCritical>

    return xReturn;
 8004940:	68fb      	ldr	r3, [r7, #12]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	60fb      	str	r3, [r7, #12]
    }
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	429a      	cmp	r2, r3
 800497c:	d102      	bne.n	8004984 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800497e:	2301      	movs	r3, #1
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	e001      	b.n	8004988 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004988:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800498a:	4618      	mov	r0, r3
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60fb      	str	r3, [r7, #12]
    }
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d024      	beq.n	8004a12 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e01e      	b.n	8004a0c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80049ce:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <vQueueAddToRegistry+0x98>)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d105      	bne.n	80049ea <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <vQueueAddToRegistry+0x98>)
 80049e4:	4413      	add	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
                    break;
 80049e8:	e013      	b.n	8004a12 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <vQueueAddToRegistry+0x6e>
 80049f0:	4a0f      	ldr	r2, [pc, #60]	; (8004a30 <vQueueAddToRegistry+0x98>)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <vQueueAddToRegistry+0x98>)
 8004a02:	4413      	add	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b07      	cmp	r3, #7
 8004a10:	d9dd      	bls.n	80049ce <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004a24:	bf00      	nop
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	20000128 	.word	0x20000128

08004a34 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004a44:	f001 ff8e 	bl	8006964 <vPortEnterCritical>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a4e:	b25b      	sxtb	r3, r3
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d103      	bne.n	8004a5e <vQueueWaitForMessageRestricted+0x2a>
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a64:	b25b      	sxtb	r3, r3
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d103      	bne.n	8004a74 <vQueueWaitForMessageRestricted+0x40>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a74:	f001 ffa6 	bl	80069c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3324      	adds	r3, #36	; 0x24
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fc7d 	bl	8005388 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004a8e:	6978      	ldr	r0, [r7, #20]
 8004a90:	f7ff fedb 	bl	800484a <prvUnlockQueue>
    }
 8004a94:	bf00      	nop
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08c      	sub	sp, #48	; 0x30
 8004aa0:	af04      	add	r7, sp, #16
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f002 f87b 	bl	8006bac <pvPortMalloc>
 8004ab6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d013      	beq.n	8004ae6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004abe:	2050      	movs	r0, #80	; 0x50
 8004ac0:	f002 f874 	bl	8006bac <pvPortMalloc>
 8004ac4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004acc:	2250      	movs	r2, #80	; 0x50
 8004ace:	2100      	movs	r1, #0
 8004ad0:	69f8      	ldr	r0, [r7, #28]
 8004ad2:	f002 fa69 	bl	8006fa8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
 8004adc:	e005      	b.n	8004aea <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004ade:	6978      	ldr	r0, [r7, #20]
 8004ae0:	f002 f91e 	bl	8006d20 <vPortFree>
 8004ae4:	e001      	b.n	8004aea <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	2300      	movs	r3, #0
 8004af4:	9303      	str	r3, [sp, #12]
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	9302      	str	r3, [sp, #8]
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f80e 	bl	8004b28 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004b0c:	69f8      	ldr	r0, [r7, #28]
 8004b0e:	f000 f897 	bl	8004c40 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004b12:	2301      	movs	r3, #1
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	e002      	b.n	8004b1e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b18:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
    }
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	461a      	mov	r2, r3
 8004b40:	21a5      	movs	r1, #165	; 0xa5
 8004b42:	f002 fa31 	bl	8006fa8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b50:	3b01      	subs	r3, #1
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f023 0307 	bic.w	r3, r3, #7
 8004b5e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	617b      	str	r3, [r7, #20]
    }
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01e      	beq.n	8004bc4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	e012      	b.n	8004bb2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	7819      	ldrb	r1, [r3, #0]
 8004b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	3334      	adds	r3, #52	; 0x34
 8004b9c:	460a      	mov	r2, r1
 8004b9e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d006      	beq.n	8004bba <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	2b09      	cmp	r3, #9
 8004bb6:	d9e9      	bls.n	8004b8c <prvInitialiseNewTask+0x64>
 8004bb8:	e000      	b.n	8004bbc <prvInitialiseNewTask+0x94>
            {
                break;
 8004bba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d90a      	bls.n	8004be0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	613b      	str	r3, [r7, #16]
    }
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d901      	bls.n	8004bea <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004be6:	2304      	movs	r3, #4
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bee:	62da      	str	r2, [r3, #44]	; 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff f8ef 	bl	8003dd8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	3318      	adds	r3, #24
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff f8ea 	bl	8003dd8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c08:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	f1c3 0205 	rsb	r2, r3, #5
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	68f9      	ldr	r1, [r7, #12]
 8004c1e:	69b8      	ldr	r0, [r7, #24]
 8004c20:	f001 fcf0 	bl	8006604 <pxPortInitialiseStack>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <prvInitialiseNewTask+0x10e>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c34:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c36:	bf00      	nop
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004c48:	f001 fe8c 	bl	8006964 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004c4c:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <prvAddNewTaskToReadyList+0x110>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	4a3f      	ldr	r2, [pc, #252]	; (8004d50 <prvAddNewTaskToReadyList+0x110>)
 8004c54:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004c56:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <prvAddNewTaskToReadyList+0x114>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004c5e:	4a3d      	ldr	r2, [pc, #244]	; (8004d54 <prvAddNewTaskToReadyList+0x114>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c64:	4b3a      	ldr	r3, [pc, #232]	; (8004d50 <prvAddNewTaskToReadyList+0x110>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d110      	bne.n	8004c8e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004c6c:	f000 fd48 	bl	8005700 <prvInitialiseTaskLists>
 8004c70:	e00d      	b.n	8004c8e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004c72:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <prvAddNewTaskToReadyList+0x118>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c7a:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <prvAddNewTaskToReadyList+0x114>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d802      	bhi.n	8004c8e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004c88:	4a32      	ldr	r2, [pc, #200]	; (8004d54 <prvAddNewTaskToReadyList+0x114>)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004c8e:	4b33      	ldr	r3, [pc, #204]	; (8004d5c <prvAddNewTaskToReadyList+0x11c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	4a31      	ldr	r2, [pc, #196]	; (8004d5c <prvAddNewTaskToReadyList+0x11c>)
 8004c96:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <prvAddNewTaskToReadyList+0x11c>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	4b2d      	ldr	r3, [pc, #180]	; (8004d60 <prvAddNewTaskToReadyList+0x120>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	4a2c      	ldr	r2, [pc, #176]	; (8004d60 <prvAddNewTaskToReadyList+0x120>)
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb6:	492b      	ldr	r1, [pc, #172]	; (8004d64 <prvAddNewTaskToReadyList+0x124>)
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	3204      	adds	r2, #4
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	1d1a      	adds	r2, r3, #4
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	609a      	str	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <prvAddNewTaskToReadyList+0x124>)
 8004cf6:	441a      	add	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	615a      	str	r2, [r3, #20]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4918      	ldr	r1, [pc, #96]	; (8004d64 <prvAddNewTaskToReadyList+0x124>)
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	4814      	ldr	r0, [pc, #80]	; (8004d64 <prvAddNewTaskToReadyList+0x124>)
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4403      	add	r3, r0
 8004d1c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004d1e:	f001 fe51 	bl	80069c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <prvAddNewTaskToReadyList+0x118>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00e      	beq.n	8004d48 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <prvAddNewTaskToReadyList+0x114>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d207      	bcs.n	8004d48 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <prvAddNewTaskToReadyList+0x128>)
 8004d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000240 	.word	0x20000240
 8004d54:	20000168 	.word	0x20000168
 8004d58:	2000024c 	.word	0x2000024c
 8004d5c:	2000025c 	.word	0x2000025c
 8004d60:	20000248 	.word	0x20000248
 8004d64:	2000016c 	.word	0x2000016c
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004d72:	4b20      	ldr	r3, [pc, #128]	; (8004df4 <vTaskStartScheduler+0x88>)
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	2300      	movs	r3, #0
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2282      	movs	r2, #130	; 0x82
 8004d7e:	491e      	ldr	r1, [pc, #120]	; (8004df8 <vTaskStartScheduler+0x8c>)
 8004d80:	481e      	ldr	r0, [pc, #120]	; (8004dfc <vTaskStartScheduler+0x90>)
 8004d82:	f7ff fe8b 	bl	8004a9c <xTaskCreate>
 8004d86:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004d8e:	f001 f8ed 	bl	8005f6c <xTimerCreateTimerTask>
 8004d92:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d116      	bne.n	8004dc8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60bb      	str	r3, [r7, #8]
    }
 8004dac:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <vTaskStartScheduler+0x94>)
 8004db0:	f04f 32ff 	mov.w	r2, #4294967295
 8004db4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004db6:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <vTaskStartScheduler+0x98>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <vTaskStartScheduler+0x9c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004dc2:	f001 fcaf 	bl	8006724 <xPortStartScheduler>
 8004dc6:	e00e      	b.n	8004de6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d10a      	bne.n	8004de6 <vTaskStartScheduler+0x7a>
        __asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	607b      	str	r3, [r7, #4]
    }
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <vTaskStartScheduler+0xa0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000264 	.word	0x20000264
 8004df8:	080071f8 	.word	0x080071f8
 8004dfc:	080056d1 	.word	0x080056d1
 8004e00:	20000260 	.word	0x20000260
 8004e04:	2000024c 	.word	0x2000024c
 8004e08:	20000244 	.word	0x20000244
 8004e0c:	20000014 	.word	0x20000014

08004e10 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004e14:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <vTaskSuspendAll+0x18>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	4a03      	ldr	r2, [pc, #12]	; (8004e28 <vTaskSuspendAll+0x18>)
 8004e1c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	20000268 	.word	0x20000268

08004e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004e3a:	4b71      	ldr	r3, [pc, #452]	; (8005000 <xTaskResumeAll+0x1d4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <xTaskResumeAll+0x2c>
        __asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	607b      	str	r3, [r7, #4]
    }
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004e58:	f001 fd84 	bl	8006964 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004e5c:	4b68      	ldr	r3, [pc, #416]	; (8005000 <xTaskResumeAll+0x1d4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	4a67      	ldr	r2, [pc, #412]	; (8005000 <xTaskResumeAll+0x1d4>)
 8004e64:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e66:	4b66      	ldr	r3, [pc, #408]	; (8005000 <xTaskResumeAll+0x1d4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f040 80c0 	bne.w	8004ff0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e70:	4b64      	ldr	r3, [pc, #400]	; (8005004 <xTaskResumeAll+0x1d8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80bb 	beq.w	8004ff0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e7a:	e08a      	b.n	8004f92 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7c:	4b62      	ldr	r3, [pc, #392]	; (8005008 <xTaskResumeAll+0x1dc>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	6a12      	ldr	r2, [r2, #32]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	69d2      	ldr	r2, [r2, #28]
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3318      	adds	r3, #24
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d103      	bne.n	8004eb2 <xTaskResumeAll+0x86>
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	1e5a      	subs	r2, r3, #1
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	68d2      	ldr	r2, [r2, #12]
 8004ed0:	609a      	str	r2, [r3, #8]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	6892      	ldr	r2, [r2, #8]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d103      	bne.n	8004ef0 <xTaskResumeAll+0xc4>
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	605a      	str	r2, [r3, #4]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	615a      	str	r2, [r3, #20]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	1e5a      	subs	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	2201      	movs	r2, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	4b40      	ldr	r3, [pc, #256]	; (800500c <xTaskResumeAll+0x1e0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	4a3f      	ldr	r2, [pc, #252]	; (800500c <xTaskResumeAll+0x1e0>)
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	493e      	ldr	r1, [pc, #248]	; (8005010 <xTaskResumeAll+0x1e4>)
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	3304      	adds	r3, #4
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	609a      	str	r2, [r3, #8]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	3204      	adds	r2, #4
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	1d1a      	adds	r2, r3, #4
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4a2e      	ldr	r2, [pc, #184]	; (8005010 <xTaskResumeAll+0x1e4>)
 8004f56:	441a      	add	r2, r3
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	615a      	str	r2, [r3, #20]
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f60:	492b      	ldr	r1, [pc, #172]	; (8005010 <xTaskResumeAll+0x1e4>)
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1c59      	adds	r1, r3, #1
 8004f70:	4827      	ldr	r0, [pc, #156]	; (8005010 <xTaskResumeAll+0x1e4>)
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4403      	add	r3, r0
 8004f7c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f82:	4b24      	ldr	r3, [pc, #144]	; (8005014 <xTaskResumeAll+0x1e8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d302      	bcc.n	8004f92 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8004f8c:	4b22      	ldr	r3, [pc, #136]	; (8005018 <xTaskResumeAll+0x1ec>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <xTaskResumeAll+0x1dc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f47f af70 	bne.w	8004e7c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004fa2:	f000 fc2b 	bl	80057fc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <xTaskResumeAll+0x1f0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d010      	beq.n	8004fd4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004fb2:	f000 f853 	bl	800505c <xTaskIncrementTick>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8004fbc:	4b16      	ldr	r3, [pc, #88]	; (8005018 <xTaskResumeAll+0x1ec>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f1      	bne.n	8004fb2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <xTaskResumeAll+0x1f0>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <xTaskResumeAll+0x1ec>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d009      	beq.n	8004ff0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <xTaskResumeAll+0x1f4>)
 8004fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004ff0:	f001 fce8 	bl	80069c4 <vPortExitCritical>

    return xAlreadyYielded;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000268 	.word	0x20000268
 8005004:	20000240 	.word	0x20000240
 8005008:	20000200 	.word	0x20000200
 800500c:	20000248 	.word	0x20000248
 8005010:	2000016c 	.word	0x2000016c
 8005014:	20000168 	.word	0x20000168
 8005018:	20000254 	.word	0x20000254
 800501c:	20000250 	.word	0x20000250
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <xTaskGetTickCount+0x1c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005030:	687b      	ldr	r3, [r7, #4]
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000244 	.word	0x20000244

08005044 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <uxTaskGetNumberOfTasks+0x14>)
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000240 	.word	0x20000240

0800505c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005066:	4b7d      	ldr	r3, [pc, #500]	; (800525c <xTaskIncrementTick+0x200>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 80ec 	bne.w	8005248 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005070:	4b7b      	ldr	r3, [pc, #492]	; (8005260 <xTaskIncrementTick+0x204>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3301      	adds	r3, #1
 8005076:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005078:	4a79      	ldr	r2, [pc, #484]	; (8005260 <xTaskIncrementTick+0x204>)
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d120      	bne.n	80050c6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005084:	4b77      	ldr	r3, [pc, #476]	; (8005264 <xTaskIncrementTick+0x208>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <xTaskIncrementTick+0x48>
        __asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
    }
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <xTaskIncrementTick+0x46>
 80050a4:	4b6f      	ldr	r3, [pc, #444]	; (8005264 <xTaskIncrementTick+0x208>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	4b6f      	ldr	r3, [pc, #444]	; (8005268 <xTaskIncrementTick+0x20c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a6d      	ldr	r2, [pc, #436]	; (8005264 <xTaskIncrementTick+0x208>)
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4a6d      	ldr	r2, [pc, #436]	; (8005268 <xTaskIncrementTick+0x20c>)
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b6c      	ldr	r3, [pc, #432]	; (800526c <xTaskIncrementTick+0x210>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	4a6b      	ldr	r2, [pc, #428]	; (800526c <xTaskIncrementTick+0x210>)
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	f000 fb9b 	bl	80057fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80050c6:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <xTaskIncrementTick+0x214>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	f0c0 80a6 	bcc.w	800521e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050d2:	4b64      	ldr	r3, [pc, #400]	; (8005264 <xTaskIncrementTick+0x208>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050dc:	4b64      	ldr	r3, [pc, #400]	; (8005270 <xTaskIncrementTick+0x214>)
 80050de:	f04f 32ff 	mov.w	r2, #4294967295
 80050e2:	601a      	str	r2, [r3, #0]
                    break;
 80050e4:	e09b      	b.n	800521e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e6:	4b5f      	ldr	r3, [pc, #380]	; (8005264 <xTaskIncrementTick+0x208>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d203      	bcs.n	8005106 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80050fe:	4a5c      	ldr	r2, [pc, #368]	; (8005270 <xTaskIncrementTick+0x214>)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005104:	e08b      	b.n	800521e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	68d2      	ldr	r2, [r2, #12]
 8005114:	609a      	str	r2, [r3, #8]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	6892      	ldr	r2, [r2, #8]
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	3304      	adds	r3, #4
 8005128:	429a      	cmp	r2, r3
 800512a:	d103      	bne.n	8005134 <xTaskIncrementTick+0xd8>
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	605a      	str	r2, [r3, #4]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2200      	movs	r2, #0
 8005138:	615a      	str	r2, [r3, #20]
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	1e5a      	subs	r2, r3, #1
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01e      	beq.n	800518a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	6a12      	ldr	r2, [r2, #32]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	69d2      	ldr	r2, [r2, #28]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	3318      	adds	r3, #24
 800516e:	429a      	cmp	r2, r3
 8005170:	d103      	bne.n	800517a <xTaskIncrementTick+0x11e>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	6a1a      	ldr	r2, [r3, #32]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2200      	movs	r2, #0
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	1e5a      	subs	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	2201      	movs	r2, #1
 8005190:	409a      	lsls	r2, r3
 8005192:	4b38      	ldr	r3, [pc, #224]	; (8005274 <xTaskIncrementTick+0x218>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	4a36      	ldr	r2, [pc, #216]	; (8005274 <xTaskIncrementTick+0x218>)
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	4935      	ldr	r1, [pc, #212]	; (8005278 <xTaskIncrementTick+0x21c>)
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	3304      	adds	r3, #4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	60da      	str	r2, [r3, #12]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	3204      	adds	r2, #4
 80051c8:	605a      	str	r2, [r3, #4]
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	1d1a      	adds	r2, r3, #4
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4a26      	ldr	r2, [pc, #152]	; (8005278 <xTaskIncrementTick+0x21c>)
 80051e0:	441a      	add	r2, r3
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	615a      	str	r2, [r3, #20]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ea:	4923      	ldr	r1, [pc, #140]	; (8005278 <xTaskIncrementTick+0x21c>)
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1c59      	adds	r1, r3, #1
 80051fa:	481f      	ldr	r0, [pc, #124]	; (8005278 <xTaskIncrementTick+0x21c>)
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4403      	add	r3, r0
 8005206:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <xTaskIncrementTick+0x220>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	429a      	cmp	r2, r3
 8005214:	f67f af5d 	bls.w	80050d2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800521c:	e759      	b.n	80050d2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <xTaskIncrementTick+0x220>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4914      	ldr	r1, [pc, #80]	; (8005278 <xTaskIncrementTick+0x21c>)
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d901      	bls.n	800523a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8005236:	2301      	movs	r3, #1
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800523a:	4b11      	ldr	r3, [pc, #68]	; (8005280 <xTaskIncrementTick+0x224>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8005242:	2301      	movs	r3, #1
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
 8005246:	e004      	b.n	8005252 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005248:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <xTaskIncrementTick+0x228>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <xTaskIncrementTick+0x228>)
 8005250:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005254:	4618      	mov	r0, r3
 8005256:	3728      	adds	r7, #40	; 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000268 	.word	0x20000268
 8005260:	20000244 	.word	0x20000244
 8005264:	200001f8 	.word	0x200001f8
 8005268:	200001fc 	.word	0x200001fc
 800526c:	20000258 	.word	0x20000258
 8005270:	20000260 	.word	0x20000260
 8005274:	20000248 	.word	0x20000248
 8005278:	2000016c 	.word	0x2000016c
 800527c:	20000168 	.word	0x20000168
 8005280:	20000254 	.word	0x20000254
 8005284:	20000250 	.word	0x20000250

08005288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800528e:	4b27      	ldr	r3, [pc, #156]	; (800532c <vTaskSwitchContext+0xa4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005296:	4b26      	ldr	r3, [pc, #152]	; (8005330 <vTaskSwitchContext+0xa8>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800529c:	e03f      	b.n	800531e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800529e:	4b24      	ldr	r3, [pc, #144]	; (8005330 <vTaskSwitchContext+0xa8>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a4:	4b23      	ldr	r3, [pc, #140]	; (8005334 <vTaskSwitchContext+0xac>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	fab3 f383 	clz	r3, r3
 80052b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80052b2:	7afb      	ldrb	r3, [r7, #11]
 80052b4:	f1c3 031f 	rsb	r3, r3, #31
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	491f      	ldr	r1, [pc, #124]	; (8005338 <vTaskSwitchContext+0xb0>)
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	607b      	str	r3, [r7, #4]
    }
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <vTaskSwitchContext+0x5a>
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4a12      	ldr	r2, [pc, #72]	; (8005338 <vTaskSwitchContext+0xb0>)
 80052f0:	4413      	add	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	3308      	adds	r3, #8
 8005306:	429a      	cmp	r2, r3
 8005308:	d104      	bne.n	8005314 <vTaskSwitchContext+0x8c>
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	605a      	str	r2, [r3, #4]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <vTaskSwitchContext+0xb4>)
 800531c:	6013      	str	r3, [r2, #0]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000268 	.word	0x20000268
 8005330:	20000254 	.word	0x20000254
 8005334:	20000248 	.word	0x20000248
 8005338:	2000016c 	.word	0x2000016c
 800533c:	20000168 	.word	0x20000168

08005340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60fb      	str	r3, [r7, #12]
    }
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005366:	4b07      	ldr	r3, [pc, #28]	; (8005384 <vTaskPlaceOnEventList+0x44>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3318      	adds	r3, #24
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fe fd3f 	bl	8003df2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005374:	2101      	movs	r1, #1
 8005376:	6838      	ldr	r0, [r7, #0]
 8005378:	f000 fd78 	bl	8005e6c <prvAddCurrentTaskToDelayedList>
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20000168 	.word	0x20000168

08005388 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	613b      	str	r3, [r7, #16]
    }
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	4b16      	ldr	r3, [pc, #88]	; (8005410 <vTaskPlaceOnEventListRestricted+0x88>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	61da      	str	r2, [r3, #28]
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <vTaskPlaceOnEventListRestricted+0x88>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	6892      	ldr	r2, [r2, #8]
 80053c6:	621a      	str	r2, [r3, #32]
 80053c8:	4b11      	ldr	r3, [pc, #68]	; (8005410 <vTaskPlaceOnEventListRestricted+0x88>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	3218      	adds	r2, #24
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <vTaskPlaceOnEventListRestricted+0x88>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f103 0218 	add.w	r2, r3, #24
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	609a      	str	r2, [r3, #8]
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <vTaskPlaceOnEventListRestricted+0x88>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80053f8:	f04f 33ff 	mov.w	r3, #4294967295
 80053fc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	68b8      	ldr	r0, [r7, #8]
 8005402:	f000 fd33 	bl	8005e6c <prvAddCurrentTaskToDelayedList>
    }
 8005406:	bf00      	nop
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000168 	.word	0x20000168

08005414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005414:	b480      	push	{r7}
 8005416:	b08b      	sub	sp, #44	; 0x2c
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	60fb      	str	r3, [r7, #12]
    }
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	6a3a      	ldr	r2, [r7, #32]
 800544c:	6a12      	ldr	r2, [r2, #32]
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	69d2      	ldr	r2, [r2, #28]
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	3318      	adds	r3, #24
 8005462:	429a      	cmp	r2, r3
 8005464:	d103      	bne.n	800546e <xTaskRemoveFromEventList+0x5a>
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	6a1a      	ldr	r2, [r3, #32]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	2200      	movs	r2, #0
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	1e5a      	subs	r2, r3, #1
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800547e:	4b4a      	ldr	r3, [pc, #296]	; (80055a8 <xTaskRemoveFromEventList+0x194>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d15e      	bne.n	8005544 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	68d2      	ldr	r2, [r2, #12]
 8005494:	609a      	str	r2, [r3, #8]
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	6a3a      	ldr	r2, [r7, #32]
 800549c:	6892      	ldr	r2, [r2, #8]
 800549e:	605a      	str	r2, [r3, #4]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	3304      	adds	r3, #4
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d103      	bne.n	80054b4 <xTaskRemoveFromEventList+0xa0>
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	605a      	str	r2, [r3, #4]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2200      	movs	r2, #0
 80054b8:	615a      	str	r2, [r3, #20]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	1e5a      	subs	r2, r3, #1
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	2201      	movs	r2, #1
 80054ca:	409a      	lsls	r2, r3
 80054cc:	4b37      	ldr	r3, [pc, #220]	; (80055ac <xTaskRemoveFromEventList+0x198>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	4a36      	ldr	r2, [pc, #216]	; (80055ac <xTaskRemoveFromEventList+0x198>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054da:	4935      	ldr	r1, [pc, #212]	; (80055b0 <xTaskRemoveFromEventList+0x19c>)
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	3304      	adds	r3, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	609a      	str	r2, [r3, #8]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	6a3a      	ldr	r2, [r7, #32]
 8005500:	3204      	adds	r2, #4
 8005502:	605a      	str	r2, [r3, #4]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	1d1a      	adds	r2, r3, #4
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <xTaskRemoveFromEventList+0x19c>)
 800551a:	441a      	add	r2, r3
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	615a      	str	r2, [r3, #20]
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005524:	4922      	ldr	r1, [pc, #136]	; (80055b0 <xTaskRemoveFromEventList+0x19c>)
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	1c59      	adds	r1, r3, #1
 8005534:	481e      	ldr	r0, [pc, #120]	; (80055b0 <xTaskRemoveFromEventList+0x19c>)
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4403      	add	r3, r0
 8005540:	6019      	str	r1, [r3, #0]
 8005542:	e01b      	b.n	800557c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005544:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <xTaskRemoveFromEventList+0x1a0>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	61da      	str	r2, [r3, #28]
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	621a      	str	r2, [r3, #32]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	6a3a      	ldr	r2, [r7, #32]
 800555e:	3218      	adds	r2, #24
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	f103 0218 	add.w	r2, r3, #24
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	4a11      	ldr	r2, [pc, #68]	; (80055b4 <xTaskRemoveFromEventList+0x1a0>)
 8005570:	629a      	str	r2, [r3, #40]	; 0x28
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <xTaskRemoveFromEventList+0x1a0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <xTaskRemoveFromEventList+0x1a0>)
 800557a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <xTaskRemoveFromEventList+0x1a4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	429a      	cmp	r2, r3
 8005588:	d905      	bls.n	8005596 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800558a:	2301      	movs	r3, #1
 800558c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800558e:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <xTaskRemoveFromEventList+0x1a8>)
 8005590:	2201      	movs	r2, #1
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e001      	b.n	800559a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8005596:	2300      	movs	r3, #0
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800559c:	4618      	mov	r0, r3
 800559e:	372c      	adds	r7, #44	; 0x2c
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	20000268 	.word	0x20000268
 80055ac:	20000248 	.word	0x20000248
 80055b0:	2000016c 	.word	0x2000016c
 80055b4:	20000200 	.word	0x20000200
 80055b8:	20000168 	.word	0x20000168
 80055bc:	20000254 	.word	0x20000254

080055c0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055c8:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <vTaskInternalSetTimeOutState+0x24>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <vTaskInternalSetTimeOutState+0x28>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	605a      	str	r2, [r3, #4]
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	20000258 	.word	0x20000258
 80055e8:	20000244 	.word	0x20000244

080055ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	613b      	str	r3, [r7, #16]
    }
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	60fb      	str	r3, [r7, #12]
    }
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800562e:	f001 f999 	bl	8006964 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005632:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <xTaskCheckForTimeOut+0xc4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d102      	bne.n	8005652 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	e026      	b.n	80056a0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <xTaskCheckForTimeOut+0xc8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d00a      	beq.n	8005674 <xTaskCheckForTimeOut+0x88>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	429a      	cmp	r2, r3
 8005666:	d305      	bcc.n	8005674 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005668:	2301      	movs	r3, #1
 800566a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e015      	b.n	80056a0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	429a      	cmp	r2, r3
 800567c:	d20b      	bcs.n	8005696 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	1ad2      	subs	r2, r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ff98 	bl	80055c0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	e004      	b.n	80056a0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80056a0:	f001 f990 	bl	80069c4 <vPortExitCritical>

    return xReturn;
 80056a4:	69fb      	ldr	r3, [r7, #28]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3720      	adds	r7, #32
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000244 	.word	0x20000244
 80056b4:	20000258 	.word	0x20000258

080056b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80056bc:	4b03      	ldr	r3, [pc, #12]	; (80056cc <vTaskMissedYield+0x14>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20000254 	.word	0x20000254

080056d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80056d8:	f000 f852 	bl	8005780 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <prvIdleTask+0x28>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d9f9      	bls.n	80056d8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <prvIdleTask+0x2c>)
 80056e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80056f4:	e7f0      	b.n	80056d8 <prvIdleTask+0x8>
 80056f6:	bf00      	nop
 80056f8:	2000016c 	.word	0x2000016c
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005706:	2300      	movs	r3, #0
 8005708:	607b      	str	r3, [r7, #4]
 800570a:	e00c      	b.n	8005726 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4a12      	ldr	r2, [pc, #72]	; (8005760 <prvInitialiseTaskLists+0x60>)
 8005718:	4413      	add	r3, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fb3c 	bl	8003d98 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3301      	adds	r3, #1
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b04      	cmp	r3, #4
 800572a:	d9ef      	bls.n	800570c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800572c:	480d      	ldr	r0, [pc, #52]	; (8005764 <prvInitialiseTaskLists+0x64>)
 800572e:	f7fe fb33 	bl	8003d98 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005732:	480d      	ldr	r0, [pc, #52]	; (8005768 <prvInitialiseTaskLists+0x68>)
 8005734:	f7fe fb30 	bl	8003d98 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005738:	480c      	ldr	r0, [pc, #48]	; (800576c <prvInitialiseTaskLists+0x6c>)
 800573a:	f7fe fb2d 	bl	8003d98 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800573e:	480c      	ldr	r0, [pc, #48]	; (8005770 <prvInitialiseTaskLists+0x70>)
 8005740:	f7fe fb2a 	bl	8003d98 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005744:	480b      	ldr	r0, [pc, #44]	; (8005774 <prvInitialiseTaskLists+0x74>)
 8005746:	f7fe fb27 	bl	8003d98 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800574a:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <prvInitialiseTaskLists+0x78>)
 800574c:	4a05      	ldr	r2, [pc, #20]	; (8005764 <prvInitialiseTaskLists+0x64>)
 800574e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <prvInitialiseTaskLists+0x7c>)
 8005752:	4a05      	ldr	r2, [pc, #20]	; (8005768 <prvInitialiseTaskLists+0x68>)
 8005754:	601a      	str	r2, [r3, #0]
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2000016c 	.word	0x2000016c
 8005764:	200001d0 	.word	0x200001d0
 8005768:	200001e4 	.word	0x200001e4
 800576c:	20000200 	.word	0x20000200
 8005770:	20000214 	.word	0x20000214
 8005774:	2000022c 	.word	0x2000022c
 8005778:	200001f8 	.word	0x200001f8
 800577c:	200001fc 	.word	0x200001fc

08005780 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005786:	e019      	b.n	80057bc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005788:	f001 f8ec 	bl	8006964 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <prvCheckTasksWaitingTermination+0x50>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fb63 	bl	8003e64 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <prvCheckTasksWaitingTermination+0x54>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	4a0b      	ldr	r2, [pc, #44]	; (80057d4 <prvCheckTasksWaitingTermination+0x54>)
 80057a6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <prvCheckTasksWaitingTermination+0x58>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <prvCheckTasksWaitingTermination+0x58>)
 80057b0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80057b2:	f001 f907 	bl	80069c4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f810 	bl	80057dc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <prvCheckTasksWaitingTermination+0x58>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e1      	bne.n	8005788 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000214 	.word	0x20000214
 80057d4:	20000240 	.word	0x20000240
 80057d8:	20000228 	.word	0x20000228

080057dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 fa99 	bl	8006d20 <vPortFree>
            vPortFree( pxTCB );
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f001 fa96 	bl	8006d20 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005800:	4b0a      	ldr	r3, [pc, #40]	; (800582c <prvResetNextTaskUnblockTime+0x30>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800580a:	4b09      	ldr	r3, [pc, #36]	; (8005830 <prvResetNextTaskUnblockTime+0x34>)
 800580c:	f04f 32ff 	mov.w	r2, #4294967295
 8005810:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005812:	e005      	b.n	8005820 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <prvResetNextTaskUnblockTime+0x30>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a04      	ldr	r2, [pc, #16]	; (8005830 <prvResetNextTaskUnblockTime+0x34>)
 800581e:	6013      	str	r3, [r2, #0]
}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	200001f8 	.word	0x200001f8
 8005830:	20000260 	.word	0x20000260

08005834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <xTaskGetSchedulerState+0x34>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d102      	bne.n	8005848 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005842:	2301      	movs	r3, #1
 8005844:	607b      	str	r3, [r7, #4]
 8005846:	e008      	b.n	800585a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005848:	4b08      	ldr	r3, [pc, #32]	; (800586c <xTaskGetSchedulerState+0x38>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005850:	2302      	movs	r3, #2
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	e001      	b.n	800585a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800585a:	687b      	ldr	r3, [r7, #4]
    }
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	2000024c 	.word	0x2000024c
 800586c:	20000268 	.word	0x20000268

08005870 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	613b      	str	r3, [r7, #16]
    }
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800589a:	f001 f863 	bl	8006964 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800589e:	4b32      	ldr	r3, [pc, #200]	; (8005968 <xTaskGenericNotifyWait+0xf8>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	334c      	adds	r3, #76	; 0x4c
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d022      	beq.n	80058f6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80058b0:	4b2d      	ldr	r3, [pc, #180]	; (8005968 <xTaskGenericNotifyWait+0xf8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	3212      	adds	r2, #18
 80058b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	43d2      	mvns	r2, r2
 80058c0:	4011      	ands	r1, r2
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	3212      	adds	r2, #18
 80058c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80058ca:	4b27      	ldr	r3, [pc, #156]	; (8005968 <xTaskGenericNotifyWait+0xf8>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	334c      	adds	r3, #76	; 0x4c
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058de:	2101      	movs	r1, #1
 80058e0:	6a38      	ldr	r0, [r7, #32]
 80058e2:	f000 fac3 	bl	8005e6c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80058e6:	4b21      	ldr	r3, [pc, #132]	; (800596c <xTaskGenericNotifyWait+0xfc>)
 80058e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80058f6:	f001 f865 	bl	80069c4 <vPortExitCritical>

        taskENTER_CRITICAL();
 80058fa:	f001 f833 	bl	8006964 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005904:	4b18      	ldr	r3, [pc, #96]	; (8005968 <xTaskGenericNotifyWait+0xf8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	3212      	adds	r2, #18
 800590c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005914:	4b14      	ldr	r3, [pc, #80]	; (8005968 <xTaskGenericNotifyWait+0xf8>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	334c      	adds	r3, #76	; 0x4c
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d002      	beq.n	800592c <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	e00e      	b.n	800594a <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800592c:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <xTaskGenericNotifyWait+0xf8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	3212      	adds	r2, #18
 8005934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	43d2      	mvns	r2, r2
 800593c:	4011      	ands	r1, r2
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	3212      	adds	r2, #18
 8005942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005946:	2301      	movs	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <xTaskGenericNotifyWait+0xf8>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	334c      	adds	r3, #76	; 0x4c
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005958:	f001 f834 	bl	80069c4 <vPortExitCritical>

        return xReturn;
 800595c:	697b      	ldr	r3, [r7, #20]
    }
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000168 	.word	0x20000168
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	; 0x38
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800597e:	2301      	movs	r3, #1
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <xTaskGenericNotify+0x2e>
        __asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	623b      	str	r3, [r7, #32]
    }
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xTaskGenericNotify+0x4a>
        __asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	61fb      	str	r3, [r7, #28]
    }
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80059be:	f000 ffd1 	bl	8006964 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80059c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d006      	beq.n	80059d6 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	3212      	adds	r2, #18
 80059ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80059d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4413      	add	r3, r2
 80059dc:	334c      	adds	r3, #76	; 0x4c
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80059e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4413      	add	r3, r2
 80059ea:	334c      	adds	r3, #76	; 0x4c
 80059ec:	2202      	movs	r2, #2
 80059ee:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d83b      	bhi.n	8005a6e <xTaskGenericNotify+0xfe>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <xTaskGenericNotify+0x8c>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a8d 	.word	0x08005a8d
 8005a00:	08005a11 	.word	0x08005a11
 8005a04:	08005a2d 	.word	0x08005a2d
 8005a08:	08005a45 	.word	0x08005a45
 8005a0c:	08005a53 	.word	0x08005a53
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	3212      	adds	r2, #18
 8005a16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	ea42 0103 	orr.w	r1, r2, r3
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	3212      	adds	r2, #18
 8005a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005a2a:	e032      	b.n	8005a92 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	3212      	adds	r2, #18
 8005a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a36:	1c59      	adds	r1, r3, #1
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	3212      	adds	r2, #18
 8005a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005a42:	e026      	b.n	8005a92 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	3212      	adds	r2, #18
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005a50:	e01f      	b.n	8005a92 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d006      	beq.n	8005a68 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	3212      	adds	r2, #18
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005a66:	e014      	b.n	8005a92 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8005a6c:	e011      	b.n	8005a92 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005a6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ba0 <xTaskGenericNotify+0x230>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <xTaskGenericNotify+0x120>
        __asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	61bb      	str	r3, [r7, #24]
    }
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <xTaskGenericNotify+0x11a>
                    break;
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <xTaskGenericNotify+0x122>

                    break;
 8005a90:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d17b      	bne.n	8005b92 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa6:	68d2      	ldr	r2, [r2, #12]
 8005aa8:	609a      	str	r2, [r3, #8]
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab0:	6892      	ldr	r2, [r2, #8]
 8005ab2:	605a      	str	r2, [r3, #4]
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	3304      	adds	r3, #4
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d103      	bne.n	8005ac8 <xTaskGenericNotify+0x158>
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	2200      	movs	r2, #0
 8005acc:	615a      	str	r2, [r3, #20]
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1e5a      	subs	r2, r3, #1
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	2201      	movs	r2, #1
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	4b30      	ldr	r3, [pc, #192]	; (8005ba4 <xTaskGenericNotify+0x234>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	4a2f      	ldr	r2, [pc, #188]	; (8005ba4 <xTaskGenericNotify+0x234>)
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aee:	492e      	ldr	r1, [pc, #184]	; (8005ba8 <xTaskGenericNotify+0x238>)
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	3304      	adds	r3, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b14:	3204      	adds	r2, #4
 8005b16:	605a      	str	r2, [r3, #4]
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	1d1a      	adds	r2, r3, #4
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <xTaskGenericNotify+0x238>)
 8005b2e:	441a      	add	r2, r3
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	615a      	str	r2, [r3, #20]
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	491b      	ldr	r1, [pc, #108]	; (8005ba8 <xTaskGenericNotify+0x238>)
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	1c59      	adds	r1, r3, #1
 8005b48:	4817      	ldr	r0, [pc, #92]	; (8005ba8 <xTaskGenericNotify+0x238>)
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4403      	add	r3, r0
 8005b54:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <xTaskGenericNotify+0x204>
        __asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	617b      	str	r3, [r7, #20]
    }
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <xTaskGenericNotify+0x23c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d907      	bls.n	8005b92 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005b82:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <xTaskGenericNotify+0x240>)
 8005b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005b92:	f000 ff17 	bl	80069c4 <vPortExitCritical>

        return xReturn;
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3738      	adds	r7, #56	; 0x38
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000244 	.word	0x20000244
 8005ba4:	20000248 	.word	0x20000248
 8005ba8:	2000016c 	.word	0x2000016c
 8005bac:	20000168 	.word	0x20000168
 8005bb0:	e000ed04 	.word	0xe000ed04

08005bb4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b092      	sub	sp, #72	; 0x48
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bfe:	f000 ff95 	bl	8006b2c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8005c06:	f3ef 8211 	mrs	r2, BASEPRI
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	623a      	str	r2, [r7, #32]
 8005c1c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005c1e:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8005c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d006      	beq.n	8005c36 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	3212      	adds	r2, #18
 8005c2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c34:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005c36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	334c      	adds	r3, #76	; 0x4c
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4413      	add	r3, r2
 8005c4a:	334c      	adds	r3, #76	; 0x4c
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d83b      	bhi.n	8005cce <xTaskGenericNotifyFromISR+0x11a>
 8005c56:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <xTaskGenericNotifyFromISR+0xa8>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005ced 	.word	0x08005ced
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005c8d 	.word	0x08005c8d
 8005c68:	08005ca5 	.word	0x08005ca5
 8005c6c:	08005cb3 	.word	0x08005cb3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	3212      	adds	r2, #18
 8005c76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	ea42 0103 	orr.w	r1, r2, r3
 8005c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	3212      	adds	r2, #18
 8005c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005c8a:	e032      	b.n	8005cf2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	3212      	adds	r2, #18
 8005c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c96:	1c59      	adds	r1, r3, #1
 8005c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	3212      	adds	r2, #18
 8005c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ca2:	e026      	b.n	8005cf2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	3212      	adds	r2, #18
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005cb0:	e01f      	b.n	8005cf2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005cb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d006      	beq.n	8005cc8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	3212      	adds	r2, #18
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005cc6:	e014      	b.n	8005cf2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8005ccc:	e011      	b.n	8005cf2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005cce:	4b60      	ldr	r3, [pc, #384]	; (8005e50 <xTaskGenericNotifyFromISR+0x29c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00c      	beq.n	8005cf0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	61bb      	str	r3, [r7, #24]
    }
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <xTaskGenericNotifyFromISR+0x136>
                    break;
 8005cec:	bf00      	nop
 8005cee:	e000      	b.n	8005cf2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8005cf0:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005cf2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	f040 809e 	bne.w	8005e38 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	617b      	str	r3, [r7, #20]
    }
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d1a:	4b4e      	ldr	r3, [pc, #312]	; (8005e54 <xTaskGenericNotifyFromISR+0x2a0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d15e      	bne.n	8005de0 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30
 8005d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d2e:	68d2      	ldr	r2, [r2, #12]
 8005d30:	609a      	str	r2, [r3, #8]
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d38:	6892      	ldr	r2, [r2, #8]
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d42:	3304      	adds	r3, #4
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d103      	bne.n	8005d50 <xTaskGenericNotifyFromISR+0x19c>
 8005d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	605a      	str	r2, [r3, #4]
 8005d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d52:	2200      	movs	r2, #0
 8005d54:	615a      	str	r2, [r3, #20]
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	1e5a      	subs	r2, r3, #1
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	2201      	movs	r2, #1
 8005d66:	409a      	lsls	r2, r3
 8005d68:	4b3b      	ldr	r3, [pc, #236]	; (8005e58 <xTaskGenericNotifyFromISR+0x2a4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	4a3a      	ldr	r2, [pc, #232]	; (8005e58 <xTaskGenericNotifyFromISR+0x2a4>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	4939      	ldr	r1, [pc, #228]	; (8005e5c <xTaskGenericNotifyFromISR+0x2a8>)
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	3304      	adds	r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d8c:	609a      	str	r2, [r3, #8]
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d9c:	3204      	adds	r2, #4
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da2:	1d1a      	adds	r2, r3, #4
 8005da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4a29      	ldr	r2, [pc, #164]	; (8005e5c <xTaskGenericNotifyFromISR+0x2a8>)
 8005db6:	441a      	add	r2, r3
 8005db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dba:	615a      	str	r2, [r3, #20]
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	4926      	ldr	r1, [pc, #152]	; (8005e5c <xTaskGenericNotifyFromISR+0x2a8>)
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	4822      	ldr	r0, [pc, #136]	; (8005e5c <xTaskGenericNotifyFromISR+0x2a8>)
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4403      	add	r3, r0
 8005ddc:	6019      	str	r1, [r3, #0]
 8005dde:	e01b      	b.n	8005e18 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005de0:	4b1f      	ldr	r3, [pc, #124]	; (8005e60 <xTaskGenericNotifyFromISR+0x2ac>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34
 8005de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dea:	61da      	str	r2, [r3, #28]
 8005dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df2:	621a      	str	r2, [r3, #32]
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dfa:	3218      	adds	r2, #24
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e00:	f103 0218 	add.w	r2, r3, #24
 8005e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0a:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <xTaskGenericNotifyFromISR+0x2ac>)
 8005e0c:	629a      	str	r2, [r3, #40]	; 0x28
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <xTaskGenericNotifyFromISR+0x2ac>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3301      	adds	r3, #1
 8005e14:	4a12      	ldr	r2, [pc, #72]	; (8005e60 <xTaskGenericNotifyFromISR+0x2ac>)
 8005e16:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1c:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <xTaskGenericNotifyFromISR+0x2b0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d908      	bls.n	8005e38 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e2e:	2201      	movs	r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005e32:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <xTaskGenericNotifyFromISR+0x2b4>)
 8005e34:	2201      	movs	r2, #1
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3a:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f383 8811 	msr	BASEPRI, r3
    }
 8005e42:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8005e46:	4618      	mov	r0, r3
 8005e48:	3748      	adds	r7, #72	; 0x48
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000244 	.word	0x20000244
 8005e54:	20000268 	.word	0x20000268
 8005e58:	20000248 	.word	0x20000248
 8005e5c:	2000016c 	.word	0x2000016c
 8005e60:	20000200 	.word	0x20000200
 8005e64:	20000168 	.word	0x20000168
 8005e68:	20000254 	.word	0x20000254

08005e6c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005e76:	4b36      	ldr	r3, [pc, #216]	; (8005f50 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e7c:	4b35      	ldr	r3, [pc, #212]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fd ffee 	bl	8003e64 <uxListRemove>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10b      	bne.n	8005ea6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e8e:	4b31      	ldr	r3, [pc, #196]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	2201      	movs	r2, #1
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	43da      	mvns	r2, r3
 8005e9c:	4b2e      	ldr	r3, [pc, #184]	; (8005f58 <prvAddCurrentTaskToDelayedList+0xec>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	4a2d      	ldr	r2, [pc, #180]	; (8005f58 <prvAddCurrentTaskToDelayedList+0xec>)
 8005ea4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d124      	bne.n	8005ef8 <prvAddCurrentTaskToDelayedList+0x8c>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d021      	beq.n	8005ef8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb4:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	609a      	str	r2, [r3, #8]
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	6892      	ldr	r2, [r2, #8]
 8005eca:	60da      	str	r2, [r3, #12]
 8005ecc:	4b21      	ldr	r3, [pc, #132]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	3204      	adds	r2, #4
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	1d1a      	adds	r2, r3, #4
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	609a      	str	r2, [r3, #8]
 8005ee2:	4b1c      	ldr	r3, [pc, #112]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1d      	ldr	r2, [pc, #116]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005ee8:	615a      	str	r2, [r3, #20]
 8005eea:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	4a1a      	ldr	r2, [pc, #104]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005ef6:	e026      	b.n	8005f46 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f00:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d209      	bcs.n	8005f24 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f10:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	f7fd ff68 	bl	8003df2 <vListInsert>
}
 8005f22:	e010      	b.n	8005f46 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f7fd ff5e 	bl	8003df2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d202      	bcs.n	8005f46 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005f40:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6013      	str	r3, [r2, #0]
}
 8005f46:	bf00      	nop
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000244 	.word	0x20000244
 8005f54:	20000168 	.word	0x20000168
 8005f58:	20000248 	.word	0x20000248
 8005f5c:	2000022c 	.word	0x2000022c
 8005f60:	200001fc 	.word	0x200001fc
 8005f64:	200001f8 	.word	0x200001f8
 8005f68:	20000260 	.word	0x20000260

08005f6c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005f76:	f000 faef 	bl	8006558 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005f7a:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <xTimerCreateTimerTask+0x54>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005f82:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <xTimerCreateTimerTask+0x58>)
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	2302      	movs	r3, #2
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f90:	490d      	ldr	r1, [pc, #52]	; (8005fc8 <xTimerCreateTimerTask+0x5c>)
 8005f92:	480e      	ldr	r0, [pc, #56]	; (8005fcc <xTimerCreateTimerTask+0x60>)
 8005f94:	f7fe fd82 	bl	8004a9c <xTaskCreate>
 8005f98:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	603b      	str	r3, [r7, #0]
    }
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005fb6:	687b      	ldr	r3, [r7, #4]
    }
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	2000029c 	.word	0x2000029c
 8005fc4:	200002a0 	.word	0x200002a0
 8005fc8:	08007200 	.word	0x08007200
 8005fcc:	080061c5 	.word	0x080061c5

08005fd0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005fde:	202c      	movs	r0, #44	; 0x2c
 8005fe0:	f000 fde4 	bl	8006bac <pvPortMalloc>
 8005fe4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f805 	bl	8006012 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006008:	697b      	ldr	r3, [r7, #20]
        }
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006012:	b580      	push	{r7, lr}
 8006014:	b086      	sub	sp, #24
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	617b      	str	r3, [r7, #20]
    }
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800603c:	f000 fa8c 	bl	8006558 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fd febb 	bl	8003dd8 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800606e:	f043 0304 	orr.w	r3, r3, #4
 8006072:	b2da      	uxtb	r2, r3
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	; 0x28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006092:	2300      	movs	r3, #0
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xTimerGenericCommand+0x2e>
        __asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	623b      	str	r3, [r7, #32]
    }
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80060b2:	4b1a      	ldr	r3, [pc, #104]	; (800611c <xTimerGenericCommand+0x98>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d02a      	beq.n	8006110 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	dc18      	bgt.n	80060fe <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060cc:	f7ff fbb2 	bl	8005834 <xTaskGetSchedulerState>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d109      	bne.n	80060ea <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060d6:	4b11      	ldr	r3, [pc, #68]	; (800611c <xTimerGenericCommand+0x98>)
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	f107 0114 	add.w	r1, r7, #20
 80060de:	2300      	movs	r3, #0
 80060e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e2:	f7fd ffeb 	bl	80040bc <xQueueGenericSend>
 80060e6:	6278      	str	r0, [r7, #36]	; 0x24
 80060e8:	e012      	b.n	8006110 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060ea:	4b0c      	ldr	r3, [pc, #48]	; (800611c <xTimerGenericCommand+0x98>)
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	f107 0114 	add.w	r1, r7, #20
 80060f2:	2300      	movs	r3, #0
 80060f4:	2200      	movs	r2, #0
 80060f6:	f7fd ffe1 	bl	80040bc <xQueueGenericSend>
 80060fa:	6278      	str	r0, [r7, #36]	; 0x24
 80060fc:	e008      	b.n	8006110 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <xTimerGenericCommand+0x98>)
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f107 0114 	add.w	r1, r7, #20
 8006106:	2300      	movs	r3, #0
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	f7fe f8d5 	bl	80042b8 <xQueueGenericSendFromISR>
 800610e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006112:	4618      	mov	r0, r3
 8006114:	3728      	adds	r7, #40	; 0x28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	2000029c 	.word	0x2000029c

08006120 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800612c:	e008      	b.n	8006140 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	699a      	ldr	r2, [r3, #24]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	18d1      	adds	r1, r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f8dd 	bl	800630c <prvInsertTimerInActiveList>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ea      	bne.n	800612e <prvReloadTimer+0xe>
        }
    }
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800616e:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <prvProcessExpiredTimer+0x5c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3304      	adds	r3, #4
 800617c:	4618      	mov	r0, r3
 800617e:	f7fd fe71 	bl	8003e64 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ffc3 	bl	8006120 <prvReloadTimer>
 800619a:	e008      	b.n	80061ae <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	4798      	blx	r3
    }
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000294 	.word	0x20000294

080061c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061cc:	f107 0308 	add.w	r3, r7, #8
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 f857 	bl	8006284 <prvGetNextExpireTime>
 80061d6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4619      	mov	r1, r3
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f803 	bl	80061e8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80061e2:	f000 f8d5 	bl	8006390 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061e6:	e7f1      	b.n	80061cc <prvTimerTask+0x8>

080061e8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80061f2:	f7fe fe0d 	bl	8004e10 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061f6:	f107 0308 	add.w	r3, r7, #8
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f866 	bl	80062cc <prvSampleTimeNow>
 8006200:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d130      	bne.n	800626a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <prvProcessTimerOrBlockTask+0x3c>
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	429a      	cmp	r2, r3
 8006214:	d806      	bhi.n	8006224 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006216:	f7fe fe09 	bl	8004e2c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800621a:	68f9      	ldr	r1, [r7, #12]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ffa1 	bl	8006164 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006222:	e024      	b.n	800626e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d008      	beq.n	800623c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <prvProcessTimerOrBlockTask+0x90>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <prvProcessTimerOrBlockTask+0x50>
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <prvProcessTimerOrBlockTask+0x52>
 8006238:	2300      	movs	r3, #0
 800623a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800623c:	4b0f      	ldr	r3, [pc, #60]	; (800627c <prvProcessTimerOrBlockTask+0x94>)
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	4619      	mov	r1, r3
 800624a:	f7fe fbf3 	bl	8004a34 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800624e:	f7fe fded 	bl	8004e2c <xTaskResumeAll>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006258:	4b09      	ldr	r3, [pc, #36]	; (8006280 <prvProcessTimerOrBlockTask+0x98>)
 800625a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	f3bf 8f6f 	isb	sy
    }
 8006268:	e001      	b.n	800626e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800626a:	f7fe fddf 	bl	8004e2c <xTaskResumeAll>
    }
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000298 	.word	0x20000298
 800627c:	2000029c 	.word	0x2000029c
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800628c:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <prvGetNextExpireTime+0x44>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <prvGetNextExpireTime+0x16>
 8006296:	2201      	movs	r2, #1
 8006298:	e000      	b.n	800629c <prvGetNextExpireTime+0x18>
 800629a:	2200      	movs	r2, #0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d105      	bne.n	80062b4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062a8:	4b07      	ldr	r3, [pc, #28]	; (80062c8 <prvGetNextExpireTime+0x44>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	e001      	b.n	80062b8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80062b8:	68fb      	ldr	r3, [r7, #12]
    }
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	20000294 	.word	0x20000294

080062cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80062d4:	f7fe fea6 	bl	8005024 <xTaskGetTickCount>
 80062d8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <prvSampleTimeNow+0x3c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d205      	bcs.n	80062f0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80062e4:	f000 f912 	bl	800650c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	e002      	b.n	80062f6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80062f6:	4a04      	ldr	r2, [pc, #16]	; (8006308 <prvSampleTimeNow+0x3c>)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80062fc:	68fb      	ldr	r3, [r7, #12]
    }
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200002a4 	.word	0x200002a4

0800630c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800631a:	2300      	movs	r3, #0
 800631c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	429a      	cmp	r2, r3
 8006330:	d812      	bhi.n	8006358 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	1ad2      	subs	r2, r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	429a      	cmp	r2, r3
 800633e:	d302      	bcc.n	8006346 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006340:	2301      	movs	r3, #1
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	e01b      	b.n	800637e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <prvInsertTimerInActiveList+0x7c>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7fd fd4e 	bl	8003df2 <vListInsert>
 8006356:	e012      	b.n	800637e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d206      	bcs.n	800636e <prvInsertTimerInActiveList+0x62>
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d302      	bcc.n	800636e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006368:	2301      	movs	r3, #1
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e007      	b.n	800637e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800636e:	4b07      	ldr	r3, [pc, #28]	; (800638c <prvInsertTimerInActiveList+0x80>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3304      	adds	r3, #4
 8006376:	4619      	mov	r1, r3
 8006378:	4610      	mov	r0, r2
 800637a:	f7fd fd3a 	bl	8003df2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800637e:	697b      	ldr	r3, [r7, #20]
    }
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20000298 	.word	0x20000298
 800638c:	20000294 	.word	0x20000294

08006390 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006396:	e0a6      	b.n	80064e6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	f2c0 80a2 	blt.w	80064e4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fd fd57 	bl	8003e64 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ff87 	bl	80062cc <prvSampleTimeNow>
 80063be:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	f200 808e 	bhi.w	80064e6 <prvProcessReceivedCommands+0x156>
 80063ca:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <prvProcessReceivedCommands+0x40>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	080063f5 	.word	0x080063f5
 80063d4:	080063f5 	.word	0x080063f5
 80063d8:	0800645d 	.word	0x0800645d
 80063dc:	08006471 	.word	0x08006471
 80063e0:	080064bb 	.word	0x080064bb
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	080063f5 	.word	0x080063f5
 80063ec:	0800645d 	.word	0x0800645d
 80063f0:	08006471 	.word	0x08006471
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	18d1      	adds	r1, r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	69f8      	ldr	r0, [r7, #28]
 8006414:	f7ff ff7a 	bl	800630c <prvInsertTimerInActiveList>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d063      	beq.n	80064e6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	4413      	add	r3, r2
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	4619      	mov	r1, r3
 8006438:	69f8      	ldr	r0, [r7, #28]
 800643a:	f7ff fe71 	bl	8006120 <prvReloadTimer>
 800643e:	e008      	b.n	8006452 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	b2da      	uxtb	r2, r3
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	69f8      	ldr	r0, [r7, #28]
 8006458:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800645a:	e044      	b.n	80064e6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006462:	f023 0301 	bic.w	r3, r3, #1
 8006466:	b2da      	uxtb	r2, r3
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800646e:	e03a      	b.n	80064e6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	b2da      	uxtb	r2, r3
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	617b      	str	r3, [r7, #20]
    }
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	18d1      	adds	r1, r2, r3
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	69f8      	ldr	r0, [r7, #28]
 80064b4:	f7ff ff2a 	bl	800630c <prvInsertTimerInActiveList>
                        break;
 80064b8:	e015      	b.n	80064e6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80064c8:	69f8      	ldr	r0, [r7, #28]
 80064ca:	f000 fc29 	bl	8006d20 <vPortFree>
 80064ce:	e00a      	b.n	80064e6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80064e2:	e000      	b.n	80064e6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80064e4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064e6:	4b08      	ldr	r3, [pc, #32]	; (8006508 <prvProcessReceivedCommands+0x178>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f107 0108 	add.w	r1, r7, #8
 80064ee:	2200      	movs	r2, #0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fd ff93 	bl	800441c <xQueueReceive>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f47f af4d 	bne.w	8006398 <prvProcessReceivedCommands+0x8>
        }
    }
 80064fe:	bf00      	nop
 8006500:	bf00      	nop
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	2000029c 	.word	0x2000029c

0800650c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006512:	e009      	b.n	8006528 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <prvSwitchTimerLists+0x44>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800651e:	f04f 31ff 	mov.w	r1, #4294967295
 8006522:	6838      	ldr	r0, [r7, #0]
 8006524:	f7ff fe1e 	bl	8006164 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006528:	4b09      	ldr	r3, [pc, #36]	; (8006550 <prvSwitchTimerLists+0x44>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f0      	bne.n	8006514 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006532:	4b07      	ldr	r3, [pc, #28]	; (8006550 <prvSwitchTimerLists+0x44>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <prvSwitchTimerLists+0x48>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a04      	ldr	r2, [pc, #16]	; (8006550 <prvSwitchTimerLists+0x44>)
 800653e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006540:	4a04      	ldr	r2, [pc, #16]	; (8006554 <prvSwitchTimerLists+0x48>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6013      	str	r3, [r2, #0]
    }
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000294 	.word	0x20000294
 8006554:	20000298 	.word	0x20000298

08006558 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800655c:	f000 fa02 	bl	8006964 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006560:	4b12      	ldr	r3, [pc, #72]	; (80065ac <prvCheckForValidListAndQueue+0x54>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d11d      	bne.n	80065a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006568:	4811      	ldr	r0, [pc, #68]	; (80065b0 <prvCheckForValidListAndQueue+0x58>)
 800656a:	f7fd fc15 	bl	8003d98 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800656e:	4811      	ldr	r0, [pc, #68]	; (80065b4 <prvCheckForValidListAndQueue+0x5c>)
 8006570:	f7fd fc12 	bl	8003d98 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006574:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <prvCheckForValidListAndQueue+0x60>)
 8006576:	4a0e      	ldr	r2, [pc, #56]	; (80065b0 <prvCheckForValidListAndQueue+0x58>)
 8006578:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <prvCheckForValidListAndQueue+0x64>)
 800657c:	4a0d      	ldr	r2, [pc, #52]	; (80065b4 <prvCheckForValidListAndQueue+0x5c>)
 800657e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006580:	2200      	movs	r2, #0
 8006582:	210c      	movs	r1, #12
 8006584:	200a      	movs	r0, #10
 8006586:	f7fd fd27 	bl	8003fd8 <xQueueGenericCreate>
 800658a:	4603      	mov	r3, r0
 800658c:	4a07      	ldr	r2, [pc, #28]	; (80065ac <prvCheckForValidListAndQueue+0x54>)
 800658e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006590:	4b06      	ldr	r3, [pc, #24]	; (80065ac <prvCheckForValidListAndQueue+0x54>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <prvCheckForValidListAndQueue+0x54>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4908      	ldr	r1, [pc, #32]	; (80065c0 <prvCheckForValidListAndQueue+0x68>)
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe f9fa 	bl	8004998 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80065a4:	f000 fa0e 	bl	80069c4 <vPortExitCritical>
    }
 80065a8:	bf00      	nop
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	2000029c 	.word	0x2000029c
 80065b0:	2000026c 	.word	0x2000026c
 80065b4:	20000280 	.word	0x20000280
 80065b8:	20000294 	.word	0x20000294
 80065bc:	20000298 	.word	0x20000298
 80065c0:	08007208 	.word	0x08007208

080065c4 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <pvTimerGetTimerID+0x28>
        __asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
    }
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80065ec:	f000 f9ba 	bl	8006964 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80065f6:	f000 f9e5 	bl	80069c4 <vPortExitCritical>

        return pvReturn;
 80065fa:	693b      	ldr	r3, [r7, #16]
    }
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3b04      	subs	r3, #4
 8006614:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800661c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3b04      	subs	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f023 0201 	bic.w	r2, r3, #1
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3b04      	subs	r3, #4
 8006632:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006634:	4a0c      	ldr	r2, [pc, #48]	; (8006668 <pxPortInitialiseStack+0x64>)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3b14      	subs	r3, #20
 800663e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3b04      	subs	r3, #4
 800664a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f06f 0202 	mvn.w	r2, #2
 8006652:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3b20      	subs	r3, #32
 8006658:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800665a:	68fb      	ldr	r3, [r7, #12]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	0800666d 	.word	0x0800666d

0800666c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006676:	4b12      	ldr	r3, [pc, #72]	; (80066c0 <prvTaskExitError+0x54>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667e:	d00a      	beq.n	8006696 <prvTaskExitError+0x2a>
        __asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
    }
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <prvTaskExitError+0x28>
        __asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60bb      	str	r3, [r7, #8]
    }
 80066a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80066aa:	bf00      	nop
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0fc      	beq.n	80066ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	20000018 	.word	0x20000018
	...

080066d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <pxCurrentTCBConst2>)
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	6808      	ldr	r0, [r1, #0]
 80066d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	f380 8809 	msr	PSP, r0
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8811 	msr	BASEPRI, r0
 80066ea:	4770      	bx	lr
 80066ec:	f3af 8000 	nop.w

080066f0 <pxCurrentTCBConst2>:
 80066f0:	20000168 	.word	0x20000168
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80066f8:	4808      	ldr	r0, [pc, #32]	; (800671c <prvPortStartFirstTask+0x24>)
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	6800      	ldr	r0, [r0, #0]
 80066fe:	f380 8808 	msr	MSP, r0
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8814 	msr	CONTROL, r0
 800670a:	b662      	cpsie	i
 800670c:	b661      	cpsie	f
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	df00      	svc	0
 8006718:	bf00      	nop
 800671a:	0000      	.short	0x0000
 800671c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop

08006724 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800672a:	4b46      	ldr	r3, [pc, #280]	; (8006844 <xPortStartScheduler+0x120>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a46      	ldr	r2, [pc, #280]	; (8006848 <xPortStartScheduler+0x124>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10a      	bne.n	800674a <xPortStartScheduler+0x26>
        __asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	613b      	str	r3, [r7, #16]
    }
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800674a:	4b3e      	ldr	r3, [pc, #248]	; (8006844 <xPortStartScheduler+0x120>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a3f      	ldr	r2, [pc, #252]	; (800684c <xPortStartScheduler+0x128>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10a      	bne.n	800676a <xPortStartScheduler+0x46>
        __asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	60fb      	str	r3, [r7, #12]
    }
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800676a:	4b39      	ldr	r3, [pc, #228]	; (8006850 <xPortStartScheduler+0x12c>)
 800676c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	22ff      	movs	r2, #255	; 0xff
 800677a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800678c:	b2da      	uxtb	r2, r3
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <xPortStartScheduler+0x130>)
 8006790:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006792:	4b31      	ldr	r3, [pc, #196]	; (8006858 <xPortStartScheduler+0x134>)
 8006794:	2207      	movs	r2, #7
 8006796:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006798:	e009      	b.n	80067ae <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800679a:	4b2f      	ldr	r3, [pc, #188]	; (8006858 <xPortStartScheduler+0x134>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3b01      	subs	r3, #1
 80067a0:	4a2d      	ldr	r2, [pc, #180]	; (8006858 <xPortStartScheduler+0x134>)
 80067a2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b80      	cmp	r3, #128	; 0x80
 80067b8:	d0ef      	beq.n	800679a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067ba:	4b27      	ldr	r3, [pc, #156]	; (8006858 <xPortStartScheduler+0x134>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f1c3 0307 	rsb	r3, r3, #7
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d00a      	beq.n	80067dc <xPortStartScheduler+0xb8>
        __asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	60bb      	str	r3, [r7, #8]
    }
 80067d8:	bf00      	nop
 80067da:	e7fe      	b.n	80067da <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067dc:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <xPortStartScheduler+0x134>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	021b      	lsls	r3, r3, #8
 80067e2:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <xPortStartScheduler+0x134>)
 80067e4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067e6:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <xPortStartScheduler+0x134>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067ee:	4a1a      	ldr	r2, [pc, #104]	; (8006858 <xPortStartScheduler+0x134>)
 80067f0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80067fa:	4b18      	ldr	r3, [pc, #96]	; (800685c <xPortStartScheduler+0x138>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a17      	ldr	r2, [pc, #92]	; (800685c <xPortStartScheduler+0x138>)
 8006800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006804:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006806:	4b15      	ldr	r3, [pc, #84]	; (800685c <xPortStartScheduler+0x138>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a14      	ldr	r2, [pc, #80]	; (800685c <xPortStartScheduler+0x138>)
 800680c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006810:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006812:	f000 f95b 	bl	8006acc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <xPortStartScheduler+0x13c>)
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800681c:	f000 f97a 	bl	8006b14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006820:	4b10      	ldr	r3, [pc, #64]	; (8006864 <xPortStartScheduler+0x140>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a0f      	ldr	r2, [pc, #60]	; (8006864 <xPortStartScheduler+0x140>)
 8006826:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800682a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800682c:	f7ff ff64 	bl	80066f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006830:	f7fe fd2a 	bl	8005288 <vTaskSwitchContext>
    prvTaskExitError();
 8006834:	f7ff ff1a 	bl	800666c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	e000ed00 	.word	0xe000ed00
 8006848:	410fc271 	.word	0x410fc271
 800684c:	410fc270 	.word	0x410fc270
 8006850:	e000e400 	.word	0xe000e400
 8006854:	200002a8 	.word	0x200002a8
 8006858:	200002ac 	.word	0x200002ac
 800685c:	e000ed20 	.word	0xe000ed20
 8006860:	20000018 	.word	0x20000018
 8006864:	e000ef34 	.word	0xe000ef34

08006868 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800686e:	4b37      	ldr	r3, [pc, #220]	; (800694c <vInitPrioGroupValue+0xe4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a37      	ldr	r2, [pc, #220]	; (8006950 <vInitPrioGroupValue+0xe8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d10a      	bne.n	800688e <vInitPrioGroupValue+0x26>
        __asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	613b      	str	r3, [r7, #16]
    }
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800688e:	4b2f      	ldr	r3, [pc, #188]	; (800694c <vInitPrioGroupValue+0xe4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a30      	ldr	r2, [pc, #192]	; (8006954 <vInitPrioGroupValue+0xec>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10a      	bne.n	80068ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
    }
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068ae:	4b2a      	ldr	r3, [pc, #168]	; (8006958 <vInitPrioGroupValue+0xf0>)
 80068b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	22ff      	movs	r2, #255	; 0xff
 80068be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	4b22      	ldr	r3, [pc, #136]	; (800695c <vInitPrioGroupValue+0xf4>)
 80068d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068d6:	4b22      	ldr	r3, [pc, #136]	; (8006960 <vInitPrioGroupValue+0xf8>)
 80068d8:	2207      	movs	r2, #7
 80068da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068dc:	e009      	b.n	80068f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80068de:	4b20      	ldr	r3, [pc, #128]	; (8006960 <vInitPrioGroupValue+0xf8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	4a1e      	ldr	r2, [pc, #120]	; (8006960 <vInitPrioGroupValue+0xf8>)
 80068e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068f2:	78fb      	ldrb	r3, [r7, #3]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fa:	2b80      	cmp	r3, #128	; 0x80
 80068fc:	d0ef      	beq.n	80068de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068fe:	4b18      	ldr	r3, [pc, #96]	; (8006960 <vInitPrioGroupValue+0xf8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f1c3 0307 	rsb	r3, r3, #7
 8006906:	2b04      	cmp	r3, #4
 8006908:	d00a      	beq.n	8006920 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	60bb      	str	r3, [r7, #8]
    }
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006920:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <vInitPrioGroupValue+0xf8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	4a0e      	ldr	r2, [pc, #56]	; (8006960 <vInitPrioGroupValue+0xf8>)
 8006928:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800692a:	4b0d      	ldr	r3, [pc, #52]	; (8006960 <vInitPrioGroupValue+0xf8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006932:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <vInitPrioGroupValue+0xf8>)
 8006934:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	e000ed00 	.word	0xe000ed00
 8006950:	410fc271 	.word	0x410fc271
 8006954:	410fc270 	.word	0x410fc270
 8006958:	e000e400 	.word	0xe000e400
 800695c:	200002a8 	.word	0x200002a8
 8006960:	200002ac 	.word	0x200002ac

08006964 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
        __asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	607b      	str	r3, [r7, #4]
    }
 800697c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800697e:	4b0f      	ldr	r3, [pc, #60]	; (80069bc <vPortEnterCritical+0x58>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a0d      	ldr	r2, [pc, #52]	; (80069bc <vPortEnterCritical+0x58>)
 8006986:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006988:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <vPortEnterCritical+0x58>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10f      	bne.n	80069b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <vPortEnterCritical+0x5c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	603b      	str	r3, [r7, #0]
    }
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <vPortEnterCritical+0x4a>
    }
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	20000018 	.word	0x20000018
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80069ca:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <vPortExitCritical+0x50>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <vPortExitCritical+0x24>
        __asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	607b      	str	r3, [r7, #4]
    }
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <vPortExitCritical+0x50>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <vPortExitCritical+0x50>)
 80069f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80069f2:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <vPortExitCritical+0x42>
 80069fa:	2300      	movs	r3, #0
 80069fc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f383 8811 	msr	BASEPRI, r3
    }
 8006a04:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20000018 	.word	0x20000018
	...

08006a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006a20:	f3ef 8009 	mrs	r0, PSP
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <pxCurrentTCBConst>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f01e 0f10 	tst.w	lr, #16
 8006a30:	bf08      	it	eq
 8006a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	6010      	str	r0, [r2, #0]
 8006a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a44:	f380 8811 	msr	BASEPRI, r0
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f7fe fc1a 	bl	8005288 <vTaskSwitchContext>
 8006a54:	f04f 0000 	mov.w	r0, #0
 8006a58:	f380 8811 	msr	BASEPRI, r0
 8006a5c:	bc09      	pop	{r0, r3}
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	6808      	ldr	r0, [r1, #0]
 8006a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a66:	f01e 0f10 	tst.w	lr, #16
 8006a6a:	bf08      	it	eq
 8006a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a70:	f380 8809 	msr	PSP, r0
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w

08006a80 <pxCurrentTCBConst>:
 8006a80:	20000168 	.word	0x20000168
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
        __asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
    }
 8006aa0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006aa2:	f7fe fadb 	bl	800505c <xTaskIncrementTick>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <SysTick_Handler+0x40>)
 8006aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f383 8811 	msr	BASEPRI, r3
    }
 8006abe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <vPortSetupTimerInterrupt+0x38>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <vPortSetupTimerInterrupt+0x3c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <vPortSetupTimerInterrupt+0x40>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	099b      	lsrs	r3, r3, #6
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <vPortSetupTimerInterrupt+0x44>)
 8006aea:	3b01      	subs	r3, #1
 8006aec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	e000e010 	.word	0xe000e010
 8006b04:	e000e018 	.word	0xe000e018
 8006b08:	20000004 	.word	0x20000004
 8006b0c:	10624dd3 	.word	0x10624dd3
 8006b10:	e000e014 	.word	0xe000e014

08006b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b24 <vPortEnableVFP+0x10>
 8006b18:	6801      	ldr	r1, [r0, #0]
 8006b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b1e:	6001      	str	r1, [r0, #0]
 8006b20:	4770      	bx	lr
 8006b22:	0000      	.short	0x0000
 8006b24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop

08006b2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006b32:	f3ef 8305 	mrs	r3, IPSR
 8006b36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b0f      	cmp	r3, #15
 8006b3c:	d914      	bls.n	8006b68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b3e:	4a17      	ldr	r2, [pc, #92]	; (8006b9c <vPortValidateInterruptPriority+0x70>)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b48:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <vPortValidateInterruptPriority+0x74>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	7afa      	ldrb	r2, [r7, #11]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d20a      	bcs.n	8006b68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	607b      	str	r3, [r7, #4]
    }
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b68:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <vPortValidateInterruptPriority+0x78>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b70:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <vPortValidateInterruptPriority+0x7c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d90a      	bls.n	8006b8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	603b      	str	r3, [r7, #0]
    }
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <vPortValidateInterruptPriority+0x60>
    }
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	e000e3f0 	.word	0xe000e3f0
 8006ba0:	200002a8 	.word	0x200002a8
 8006ba4:	e000ed0c 	.word	0xe000ed0c
 8006ba8:	200002ac 	.word	0x200002ac

08006bac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	; 0x28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006bb8:	f7fe f92a 	bl	8004e10 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006bbc:	4b53      	ldr	r3, [pc, #332]	; (8006d0c <pvPortMalloc+0x160>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006bc4:	f000 f908 	bl	8006dd8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d012      	beq.n	8006bf4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006bce:	2208      	movs	r2, #8
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	3308      	adds	r3, #8
 8006bda:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d804      	bhi.n	8006bf0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	4413      	add	r3, r2
 8006bec:	607b      	str	r3, [r7, #4]
 8006bee:	e001      	b.n	8006bf4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	db70      	blt.n	8006cdc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d06d      	beq.n	8006cdc <pvPortMalloc+0x130>
 8006c00:	4b43      	ldr	r3, [pc, #268]	; (8006d10 <pvPortMalloc+0x164>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d868      	bhi.n	8006cdc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006c0a:	4b42      	ldr	r3, [pc, #264]	; (8006d14 <pvPortMalloc+0x168>)
 8006c0c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006c0e:	4b41      	ldr	r3, [pc, #260]	; (8006d14 <pvPortMalloc+0x168>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c14:	e004      	b.n	8006c20 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d903      	bls.n	8006c32 <pvPortMalloc+0x86>
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f1      	bne.n	8006c16 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006c32:	4b36      	ldr	r3, [pc, #216]	; (8006d0c <pvPortMalloc+0x160>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d04f      	beq.n	8006cdc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2208      	movs	r2, #8
 8006c42:	4413      	add	r3, r2
 8006c44:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	1ad2      	subs	r2, r2, r3
 8006c56:	2308      	movs	r3, #8
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d91f      	bls.n	8006c9e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <pvPortMalloc+0xda>
        __asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	613b      	str	r3, [r7, #16]
    }
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	1ad2      	subs	r2, r2, r3
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c98:	6978      	ldr	r0, [r7, #20]
 8006c9a:	f000 f8f9 	bl	8006e90 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c9e:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <pvPortMalloc+0x164>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	4a19      	ldr	r2, [pc, #100]	; (8006d10 <pvPortMalloc+0x164>)
 8006caa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cac:	4b18      	ldr	r3, [pc, #96]	; (8006d10 <pvPortMalloc+0x164>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <pvPortMalloc+0x16c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d203      	bcs.n	8006cc0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cb8:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <pvPortMalloc+0x164>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a16      	ldr	r2, [pc, #88]	; (8006d18 <pvPortMalloc+0x16c>)
 8006cbe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006cd2:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <pvPortMalloc+0x170>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	4a10      	ldr	r2, [pc, #64]	; (8006d1c <pvPortMalloc+0x170>)
 8006cda:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006cdc:	f7fe f8a6 	bl	8004e2c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <pvPortMalloc+0x154>
        __asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	60fb      	str	r3, [r7, #12]
    }
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <pvPortMalloc+0x152>
    return pvReturn;
 8006d00:	69fb      	ldr	r3, [r7, #28]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3728      	adds	r7, #40	; 0x28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20012eb8 	.word	0x20012eb8
 8006d10:	20012ebc 	.word	0x20012ebc
 8006d14:	20012eb0 	.word	0x20012eb0
 8006d18:	20012ec0 	.word	0x20012ec0
 8006d1c:	20012ec4 	.word	0x20012ec4

08006d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d049      	beq.n	8006dc6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006d32:	2308      	movs	r3, #8
 8006d34:	425b      	negs	r3, r3
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4413      	add	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	db0a      	blt.n	8006d5e <vPortFree+0x3e>
        __asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	60fb      	str	r3, [r7, #12]
    }
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <vPortFree+0x5c>
        __asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	60bb      	str	r3, [r7, #8]
    }
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	0fdb      	lsrs	r3, r3, #31
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01c      	beq.n	8006dc6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d118      	bne.n	8006dc6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006da0:	f7fe f836 	bl	8004e10 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <vPortFree+0xb0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4413      	add	r3, r2
 8006dae:	4a08      	ldr	r2, [pc, #32]	; (8006dd0 <vPortFree+0xb0>)
 8006db0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006db2:	6938      	ldr	r0, [r7, #16]
 8006db4:	f000 f86c 	bl	8006e90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <vPortFree+0xb4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	4a05      	ldr	r2, [pc, #20]	; (8006dd4 <vPortFree+0xb4>)
 8006dc0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006dc2:	f7fe f833 	bl	8004e2c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006dc6:	bf00      	nop
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20012ebc 	.word	0x20012ebc
 8006dd4:	20012ec8 	.word	0x20012ec8

08006dd8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dde:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006de2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006de4:	4b25      	ldr	r3, [pc, #148]	; (8006e7c <prvHeapInit+0xa4>)
 8006de6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3307      	adds	r3, #7
 8006df6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	4a1d      	ldr	r2, [pc, #116]	; (8006e7c <prvHeapInit+0xa4>)
 8006e08:	4413      	add	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e10:	4a1b      	ldr	r2, [pc, #108]	; (8006e80 <prvHeapInit+0xa8>)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006e16:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <prvHeapInit+0xa8>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006e24:	2208      	movs	r2, #8
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <prvHeapInit+0xac>)
 8006e38:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <prvHeapInit+0xac>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006e42:	4b10      	ldr	r3, [pc, #64]	; (8006e84 <prvHeapInit+0xac>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	1ad2      	subs	r2, r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e58:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <prvHeapInit+0xac>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4a08      	ldr	r2, [pc, #32]	; (8006e88 <prvHeapInit+0xb0>)
 8006e66:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a07      	ldr	r2, [pc, #28]	; (8006e8c <prvHeapInit+0xb4>)
 8006e6e:	6013      	str	r3, [r2, #0]
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	200002b0 	.word	0x200002b0
 8006e80:	20012eb0 	.word	0x20012eb0
 8006e84:	20012eb8 	.word	0x20012eb8
 8006e88:	20012ec0 	.word	0x20012ec0
 8006e8c:	20012ebc 	.word	0x20012ebc

08006e90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e98:	4b28      	ldr	r3, [pc, #160]	; (8006f3c <prvInsertBlockIntoFreeList+0xac>)
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	e002      	b.n	8006ea4 <prvInsertBlockIntoFreeList+0x14>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d8f7      	bhi.n	8006e9e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	4413      	add	r3, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d108      	bne.n	8006ed2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	441a      	add	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	441a      	add	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d118      	bne.n	8006f18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <prvInsertBlockIntoFreeList+0xb0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d00d      	beq.n	8006f0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	441a      	add	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e008      	b.n	8006f20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <prvInsertBlockIntoFreeList+0xb0>)
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e003      	b.n	8006f20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d002      	beq.n	8006f2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	20012eb0 	.word	0x20012eb0
 8006f40:	20012eb8 	.word	0x20012eb8

08006f44 <__libc_init_array>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	4d0d      	ldr	r5, [pc, #52]	; (8006f7c <__libc_init_array+0x38>)
 8006f48:	4c0d      	ldr	r4, [pc, #52]	; (8006f80 <__libc_init_array+0x3c>)
 8006f4a:	1b64      	subs	r4, r4, r5
 8006f4c:	10a4      	asrs	r4, r4, #2
 8006f4e:	2600      	movs	r6, #0
 8006f50:	42a6      	cmp	r6, r4
 8006f52:	d109      	bne.n	8006f68 <__libc_init_array+0x24>
 8006f54:	4d0b      	ldr	r5, [pc, #44]	; (8006f84 <__libc_init_array+0x40>)
 8006f56:	4c0c      	ldr	r4, [pc, #48]	; (8006f88 <__libc_init_array+0x44>)
 8006f58:	f000 f82e 	bl	8006fb8 <_init>
 8006f5c:	1b64      	subs	r4, r4, r5
 8006f5e:	10a4      	asrs	r4, r4, #2
 8006f60:	2600      	movs	r6, #0
 8006f62:	42a6      	cmp	r6, r4
 8006f64:	d105      	bne.n	8006f72 <__libc_init_array+0x2e>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6c:	4798      	blx	r3
 8006f6e:	3601      	adds	r6, #1
 8006f70:	e7ee      	b.n	8006f50 <__libc_init_array+0xc>
 8006f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f76:	4798      	blx	r3
 8006f78:	3601      	adds	r6, #1
 8006f7a:	e7f2      	b.n	8006f62 <__libc_init_array+0x1e>
 8006f7c:	08007230 	.word	0x08007230
 8006f80:	08007230 	.word	0x08007230
 8006f84:	08007230 	.word	0x08007230
 8006f88:	08007234 	.word	0x08007234

08006f8c <memcpy>:
 8006f8c:	440a      	add	r2, r1
 8006f8e:	4291      	cmp	r1, r2
 8006f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f94:	d100      	bne.n	8006f98 <memcpy+0xc>
 8006f96:	4770      	bx	lr
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fa2:	4291      	cmp	r1, r2
 8006fa4:	d1f9      	bne.n	8006f9a <memcpy+0xe>
 8006fa6:	bd10      	pop	{r4, pc}

08006fa8 <memset>:
 8006fa8:	4402      	add	r2, r0
 8006faa:	4603      	mov	r3, r0
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d100      	bne.n	8006fb2 <memset+0xa>
 8006fb0:	4770      	bx	lr
 8006fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb6:	e7f9      	b.n	8006fac <memset+0x4>

08006fb8 <_init>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr

08006fc4 <_fini>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr
