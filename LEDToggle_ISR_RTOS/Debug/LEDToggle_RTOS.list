
LEDToggle_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006028  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062cc  080062cc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d4  080062d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d4  080062d4  000162d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080062dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013490  20000014  080062f0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200134a4  080062f0  000234a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144f2  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df0  00000000  00000000  00034536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00037328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00038600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f10  00000000  00000000  00039770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141be  00000000  00000000  00051680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099259  00000000  00000000  0006583e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fea97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f34  00000000  00000000  000feae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061b0 	.word	0x080061b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080061b0 	.word	0x080061b0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ed8 	.word	0x20012ed8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	next_task_handle = NULL;
 800057e:	4b3a      	ldr	r3, [pc, #232]	; (8000668 <main+0xf0>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fb3c 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f888 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8f2 	bl	8000774 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  ret = xTaskCreate(led_green_handler,"Blink_LED_green_Task",200,NULL,3, &led_green_handle);
 8000590:	4b36      	ldr	r3, [pc, #216]	; (800066c <main+0xf4>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2303      	movs	r3, #3
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4934      	ldr	r1, [pc, #208]	; (8000670 <main+0xf8>)
 800059e:	4835      	ldr	r0, [pc, #212]	; (8000674 <main+0xfc>)
 80005a0:	f002 f93c 	bl	800281c <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]
  configASSERT(ret==pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x48>
  next_task_handle = led_green_handle;
 80005c2:	4b2a      	ldr	r3, [pc, #168]	; (800066c <main+0xf4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a28      	ldr	r2, [pc, #160]	; (8000668 <main+0xf0>)
 80005c8:	6013      	str	r3, [r2, #0]

  ret = xTaskCreate(led_yellow_handler,"Blink_LED_yellow_Task",200,NULL,2, &led_yellow_handle);
 80005ca:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <main+0x100>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	4929      	ldr	r1, [pc, #164]	; (800067c <main+0x104>)
 80005d8:	4829      	ldr	r0, [pc, #164]	; (8000680 <main+0x108>)
 80005da:	f002 f91f 	bl	800281c <xTaskCreate>
 80005de:	6178      	str	r0, [r7, #20]
  configASSERT(ret==pdPASS);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x84>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x82>

  ret = xTaskCreate(led_red_handler,"Blink_LED_red_Task",200,NULL,1, &led_red_handle);
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <main+0x10c>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2301      	movs	r3, #1
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	491f      	ldr	r1, [pc, #124]	; (8000688 <main+0x110>)
 800060a:	4820      	ldr	r0, [pc, #128]	; (800068c <main+0x114>)
 800060c:	f002 f906 	bl	800281c <xTaskCreate>
 8000610:	6178      	str	r0, [r7, #20]
  configASSERT(ret==pdPASS);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d00a      	beq.n	800062e <main+0xb6>
        __asm volatile
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	60bb      	str	r3, [r7, #8]
    }
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <main+0xb4>

  ret = xTaskCreate(button_handler,"Button_press_Task",200,NULL,4, &button_handle);
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <main+0x118>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	; 0xc8
 800063a:	4916      	ldr	r1, [pc, #88]	; (8000694 <main+0x11c>)
 800063c:	4816      	ldr	r0, [pc, #88]	; (8000698 <main+0x120>)
 800063e:	f002 f8ed 	bl	800281c <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]
  configASSERT(ret==pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <main+0xe8>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
    }
 800065c:	bf00      	nop
 800065e:	e7fe      	b.n	800065e <main+0xe6>

  vTaskStartScheduler();
 8000660:	f002 fb4a 	bl	8002cf8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0xec>
 8000666:	bf00      	nop
 8000668:	20000040 	.word	0x20000040
 800066c:	20000030 	.word	0x20000030
 8000670:	080061c8 	.word	0x080061c8
 8000674:	08000871 	.word	0x08000871
 8000678:	20000034 	.word	0x20000034
 800067c:	080061e0 	.word	0x080061e0
 8000680:	080008c9 	.word	0x080008c9
 8000684:	20000038 	.word	0x20000038
 8000688:	080061f8 	.word	0x080061f8
 800068c:	08000921 	.word	0x08000921
 8000690:	2000003c 	.word	0x2000003c
 8000694:	0800620c 	.word	0x0800620c
 8000698:	08000981 	.word	0x08000981

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 fd78 	bl	80061a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a28      	ldr	r2, [pc, #160]	; (800076c <SystemClock_Config+0xd0>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <SystemClock_Config+0xd0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xd4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xd4>)
 80006ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xd4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000710:	2310      	movs	r3, #16
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000714:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000718:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071a:	2304      	movs	r3, #4
 800071c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071e:	2307      	movs	r3, #7
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fd5e 	bl	80011e8 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000732:	f000 f95f 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2102      	movs	r1, #2
 8000752:	4618      	mov	r0, r3
 8000754:	f000 ffc0 	bl	80016d8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800075e:	f000 f949 	bl	80009f4 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_GPIO_Init+0xf0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a34      	ldr	r2, [pc, #208]	; (8000864 <MX_GPIO_Init+0xf0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_GPIO_Init+0xf0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a26      	ldr	r2, [pc, #152]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_Y_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	21e0      	movs	r1, #224	; 0xe0
 80007fe:	481a      	ldr	r0, [pc, #104]	; (8000868 <MX_GPIO_Init+0xf4>)
 8000800:	f000 fcbe 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSHBTN_Pin */
  GPIO_InitStruct.Pin = PUSHBTN_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSHBTN_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0xf8>)
 800081a:	f000 fb15 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800081e:	230c      	movs	r3, #12
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800082e:	2307      	movs	r3, #7
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <MX_GPIO_Init+0xf4>)
 800083a:	f000 fb05 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_Y_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_Y_Pin|LED_R_Pin;
 800083e:	23e0      	movs	r3, #224	; 0xe0
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_GPIO_Init+0xf4>)
 8000856:	f000 faf7 	bl	8000e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800

08000870 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void *parameters){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	6078      	str	r0, [r7, #4]
	BaseType_t notificationStatus;

	while (1){
		HAL_GPIO_TogglePin(GPIOA,LED_G_Pin);
 8000878:	2120      	movs	r1, #32
 800087a:	4810      	ldr	r0, [pc, #64]	; (80008bc <led_green_handler+0x4c>)
 800087c:	f000 fc99 	bl	80011b2 <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		notificationStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f002 ffd3 	bl	8003838 <xTaskGenericNotifyWait>
 8000892:	60f8      	str	r0, [r7, #12]
		if(notificationStatus==pdPASS){
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d1ee      	bne.n	8000878 <led_green_handler+0x8>
			vTaskSuspendAll();
 800089a:	f002 fa8f 	bl	8002dbc <vTaskSuspendAll>
			next_task_handle = led_yellow_handle;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <led_green_handler+0x50>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <led_green_handler+0x54>)
 80008a4:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80008a6:	f002 fa97 	bl	8002dd8 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA,LED_G_Pin,GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2120      	movs	r1, #32
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <led_green_handler+0x4c>)
 80008b0:	f000 fc66 	bl	8001180 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f002 f939 	bl	8002b2c <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA,LED_G_Pin);
 80008ba:	e7dd      	b.n	8000878 <led_green_handler+0x8>
 80008bc:	40020000 	.word	0x40020000
 80008c0:	20000034 	.word	0x20000034
 80008c4:	20000040 	.word	0x20000040

080008c8 <led_yellow_handler>:
		}

	}
}

static void led_yellow_handler(void *parameters){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	6078      	str	r0, [r7, #4]
	BaseType_t notificationStatus;
		while (1){
			HAL_GPIO_TogglePin(GPIOA,LED_Y_Pin);
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	4810      	ldr	r0, [pc, #64]	; (8000914 <led_yellow_handler+0x4c>)
 80008d4:	f000 fc6d 	bl	80011b2 <HAL_GPIO_TogglePin>
			//HAL_Delay(1000);
			notificationStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80008d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	2300      	movs	r3, #0
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2000      	movs	r0, #0
 80008e6:	f002 ffa7 	bl	8003838 <xTaskGenericNotifyWait>
 80008ea:	60f8      	str	r0, [r7, #12]
			if(notificationStatus==pdPASS){
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d1ee      	bne.n	80008d0 <led_yellow_handler+0x8>
				vTaskSuspendAll();
 80008f2:	f002 fa63 	bl	8002dbc <vTaskSuspendAll>
				next_task_handle = led_red_handle;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <led_yellow_handler+0x50>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <led_yellow_handler+0x54>)
 80008fc:	6013      	str	r3, [r2, #0]
				xTaskResumeAll();
 80008fe:	f002 fa6b 	bl	8002dd8 <xTaskResumeAll>
				HAL_GPIO_WritePin(GPIOA,LED_Y_Pin,GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <led_yellow_handler+0x4c>)
 8000908:	f000 fc3a 	bl	8001180 <HAL_GPIO_WritePin>
				vTaskDelete(NULL);
 800090c:	2000      	movs	r0, #0
 800090e:	f002 f90d 	bl	8002b2c <vTaskDelete>
			HAL_GPIO_TogglePin(GPIOA,LED_Y_Pin);
 8000912:	e7dd      	b.n	80008d0 <led_yellow_handler+0x8>
 8000914:	40020000 	.word	0x40020000
 8000918:	20000038 	.word	0x20000038
 800091c:	20000040 	.word	0x20000040

08000920 <led_red_handler>:
			}
		}
}

static void led_red_handler(void *parameters){
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af02      	add	r7, sp, #8
 8000926:	6078      	str	r0, [r7, #4]
	BaseType_t notificationStatus;
		while (1){
			HAL_GPIO_TogglePin(GPIOA,LED_R_Pin);
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <led_red_handler+0x54>)
 800092c:	f000 fc41 	bl	80011b2 <HAL_GPIO_TogglePin>
			//HAL_Delay(1000);
			notificationStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2300      	movs	r3, #0
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2000      	movs	r0, #0
 800093e:	f002 ff7b 	bl	8003838 <xTaskGenericNotifyWait>
 8000942:	60f8      	str	r0, [r7, #12]
			if(notificationStatus==pdPASS){
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d1ee      	bne.n	8000928 <led_red_handler+0x8>
				vTaskSuspendAll();
 800094a:	f002 fa37 	bl	8002dbc <vTaskSuspendAll>
				next_task_handle = NULL;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <led_red_handler+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
				xTaskResumeAll();
 8000954:	f002 fa40 	bl	8002dd8 <xTaskResumeAll>
				HAL_GPIO_WritePin(GPIOA,LED_R_Pin,GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <led_red_handler+0x54>)
 800095e:	f000 fc0f 	bl	8001180 <HAL_GPIO_WritePin>
				vTaskDelete(button_handle);
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <led_red_handler+0x5c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f002 f8e0 	bl	8002b2c <vTaskDelete>
				vTaskDelete(NULL);
 800096c:	2000      	movs	r0, #0
 800096e:	f002 f8dd 	bl	8002b2c <vTaskDelete>
			HAL_GPIO_TogglePin(GPIOA,LED_R_Pin);
 8000972:	e7d9      	b.n	8000928 <led_red_handler+0x8>
 8000974:	40020000 	.word	0x40020000
 8000978:	20000040 	.word	0x20000040
 800097c:	2000003c 	.word	0x2000003c

08000980 <button_handler>:
			}
		}
}
static void button_handler(void *parameters){
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
	uint8_t buttonRead = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	73bb      	strb	r3, [r7, #14]
	uint8_t prevButton = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]
	while(1){
		buttonRead =  HAL_GPIO_ReadPin(PUSHBTN_GPIO_Port,PUSHBTN_Pin);
 8000990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <button_handler+0x48>)
 8000996:	f000 fbdb 	bl	8001150 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	73bb      	strb	r3, [r7, #14]
		if(buttonRead == 0){
 800099e:	7bbb      	ldrb	r3, [r7, #14]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d10b      	bne.n	80009bc <button_handler+0x3c>
			if(prevButton==1){
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d108      	bne.n	80009bc <button_handler+0x3c>
				xTaskNotify(next_task_handle,0,eNoAction);
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <button_handler+0x4c>)
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	f002 ffc6 	bl	8003948 <xTaskGenericNotify>
			}


		}
		prevButton=buttonRead;
 80009bc:	7bbb      	ldrb	r3, [r7, #14]
 80009be:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 80009c0:	200a      	movs	r0, #10
 80009c2:	f002 f961 	bl	8002c88 <vTaskDelay>
		buttonRead =  HAL_GPIO_ReadPin(PUSHBTN_GPIO_Port,PUSHBTN_Pin);
 80009c6:	e7e3      	b.n	8000990 <button_handler+0x10>
 80009c8:	40020800 	.word	0x40020800
 80009cc:	20000040 	.word	0x20000040

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 f92f 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40000c00 	.word	0x40000c00

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a3e:	f003 fceb 	bl	8004418 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <HAL_InitTick+0xe4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a32      	ldr	r2, [pc, #200]	; (8000b34 <HAL_InitTick+0xe4>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <HAL_InitTick+0xe4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7c:	f107 0210 	add.w	r2, r7, #16
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f832 	bl	8001af0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d103      	bne.n	8000a9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a96:	f001 f817 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8000a9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a9c:	e004      	b.n	8000aa8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a9e:	f001 f813 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <HAL_InitTick+0xe8>)
 8000aac:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab0:	0c9b      	lsrs	r3, r3, #18
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <HAL_InitTick+0xec>)
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <HAL_InitTick+0xf0>)
 8000aba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_InitTick+0xec>)
 8000abe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <HAL_InitTick+0xec>)
 8000ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_InitTick+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_InitTick+0xec>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <HAL_InitTick+0xec>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000adc:	4817      	ldr	r0, [pc, #92]	; (8000b3c <HAL_InitTick+0xec>)
 8000ade:	f001 f839 	bl	8001b54 <HAL_TIM_Base_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d11b      	bne.n	8000b28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000af0:	4812      	ldr	r0, [pc, #72]	; (8000b3c <HAL_InitTick+0xec>)
 8000af2:	f001 f889 	bl	8001c08 <HAL_TIM_Base_Start_IT>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000afc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d111      	bne.n	8000b28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b04:	2032      	movs	r0, #50	; 0x32
 8000b06:	f000 f991 	bl	8000e2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d808      	bhi.n	8000b22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2032      	movs	r0, #50	; 0x32
 8000b16:	f000 f96d 	bl	8000df4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_InitTick+0xf4>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e002      	b.n	8000b28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3738      	adds	r7, #56	; 0x38
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	431bde83 	.word	0x431bde83
 8000b3c:	20000044 	.word	0x20000044
 8000b40:	40000c00 	.word	0x40000c00
 8000b44:	20000004 	.word	0x20000004

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <TIM5_IRQHandler+0x10>)
 8000b7a:	f001 f8a7 	bl	8001ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000044 	.word	0x20000044

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb2:	490e      	ldr	r1, [pc, #56]	; (8000bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc8:	4c0b      	ldr	r4, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd7 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f005 fa9f 	bl	800611c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fccb 	bl	8000578 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bf0:	080062dc 	.word	0x080062dc
  ldr r2, =_sbss
 8000bf4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000bf8:	200134a4 	.word	0x200134a4

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f8d8 	bl	8000dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ff0e 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fee4 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	2000008c 	.word	0x2000008c

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000008c 	.word	0x2000008c

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff4c 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e06:	f7ff ff61 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f7ff ffb1 	bl	8000d78 <NVIC_EncodePriority>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff80 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff54 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e159      	b.n	8001118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8148 	bne.w	8001112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d130      	bne.n	8000efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80a2 	beq.w	8001112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b57      	ldr	r3, [pc, #348]	; (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a56      	ldr	r2, [pc, #344]	; (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b54      	ldr	r3, [pc, #336]	; (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fea:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x2ec>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a49      	ldr	r2, [pc, #292]	; (8001138 <HAL_GPIO_Init+0x2f0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x202>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a48      	ldr	r2, [pc, #288]	; (800113c <HAL_GPIO_Init+0x2f4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x1fe>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a47      	ldr	r2, [pc, #284]	; (8001140 <HAL_GPIO_Init+0x2f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x1fa>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a46      	ldr	r2, [pc, #280]	; (8001144 <HAL_GPIO_Init+0x2fc>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x1f6>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a45      	ldr	r2, [pc, #276]	; (8001148 <HAL_GPIO_Init+0x300>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x1f2>
 8001036:	2304      	movs	r3, #4
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103a:	2307      	movs	r3, #7
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x204>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <HAL_GPIO_Init+0x2ec>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b38      	ldr	r3, [pc, #224]	; (800114c <HAL_GPIO_Init+0x304>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a2f      	ldr	r2, [pc, #188]	; (800114c <HAL_GPIO_Init+0x304>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_GPIO_Init+0x304>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a24      	ldr	r2, [pc, #144]	; (800114c <HAL_GPIO_Init+0x304>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_GPIO_Init+0x304>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1a      	ldr	r2, [pc, #104]	; (800114c <HAL_GPIO_Init+0x304>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_GPIO_Init+0x304>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <HAL_GPIO_Init+0x304>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f aea2 	bls.w	8000e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e001      	b.n	8001172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c4:	887a      	ldrh	r2, [r7, #2]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	041a      	lsls	r2, r3, #16
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	400b      	ands	r3, r1
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e267      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d075      	beq.n	80012f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001206:	4b88      	ldr	r3, [pc, #544]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b04      	cmp	r3, #4
 8001210:	d00c      	beq.n	800122c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001212:	4b85      	ldr	r3, [pc, #532]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121a:	2b08      	cmp	r3, #8
 800121c:	d112      	bne.n	8001244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121e:	4b82      	ldr	r3, [pc, #520]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800122a:	d10b      	bne.n	8001244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	4b7e      	ldr	r3, [pc, #504]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d05b      	beq.n	80012f0 <HAL_RCC_OscConfig+0x108>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d157      	bne.n	80012f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e242      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d106      	bne.n	800125c <HAL_RCC_OscConfig+0x74>
 800124e:	4b76      	ldr	r3, [pc, #472]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a75      	ldr	r2, [pc, #468]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e01d      	b.n	8001298 <HAL_RCC_OscConfig+0xb0>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x98>
 8001266:	4b70      	ldr	r3, [pc, #448]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6f      	ldr	r2, [pc, #444]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b6d      	ldr	r3, [pc, #436]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a6c      	ldr	r2, [pc, #432]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e00b      	b.n	8001298 <HAL_RCC_OscConfig+0xb0>
 8001280:	4b69      	ldr	r3, [pc, #420]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a68      	ldr	r2, [pc, #416]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b66      	ldr	r3, [pc, #408]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a65      	ldr	r2, [pc, #404]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d013      	beq.n	80012c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fce4 	bl	8000c6c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fce0 	bl	8000c6c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e207      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	4b5b      	ldr	r3, [pc, #364]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0xc0>
 80012c6:	e014      	b.n	80012f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fcd0 	bl	8000c6c <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fccc 	bl	8000c6c <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1f3      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e2:	4b51      	ldr	r3, [pc, #324]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0xe8>
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d063      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fe:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00b      	beq.n	8001322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001312:	2b08      	cmp	r3, #8
 8001314:	d11c      	bne.n	8001350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d116      	bne.n	8001350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_RCC_OscConfig+0x152>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d001      	beq.n	800133a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e1c7      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4937      	ldr	r1, [pc, #220]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	e03a      	b.n	80013c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d020      	beq.n	800139a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <HAL_RCC_OscConfig+0x244>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135e:	f7ff fc85 	bl	8000c6c <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fc81 	bl	8000c6c <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e1a8      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4925      	ldr	r1, [pc, #148]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
 8001398:	e015      	b.n	80013c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_RCC_OscConfig+0x244>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc64 	bl	8000c6c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a8:	f7ff fc60 	bl	8000c6c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e187      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d036      	beq.n	8001440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d016      	beq.n	8001408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_RCC_OscConfig+0x248>)
 80013dc:	2201      	movs	r2, #1
 80013de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e0:	f7ff fc44 	bl	8000c6c <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc40 	bl	8000c6c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e167      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_RCC_OscConfig+0x240>)
 80013fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x200>
 8001406:	e01b      	b.n	8001440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_RCC_OscConfig+0x248>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff fc2d 	bl	8000c6c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001414:	e00e      	b.n	8001434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff fc29 	bl	8000c6c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d907      	bls.n	8001434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e150      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
 8001428:	40023800 	.word	0x40023800
 800142c:	42470000 	.word	0x42470000
 8001430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1ea      	bne.n	8001416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 8097 	beq.w	800157c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001452:	4b81      	ldr	r3, [pc, #516]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b7d      	ldr	r3, [pc, #500]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a7c      	ldr	r2, [pc, #496]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b7a      	ldr	r3, [pc, #488]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800147a:	2301      	movs	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147e:	4b77      	ldr	r3, [pc, #476]	; (800165c <HAL_RCC_OscConfig+0x474>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d118      	bne.n	80014bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148a:	4b74      	ldr	r3, [pc, #464]	; (800165c <HAL_RCC_OscConfig+0x474>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a73      	ldr	r2, [pc, #460]	; (800165c <HAL_RCC_OscConfig+0x474>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001496:	f7ff fbe9 	bl	8000c6c <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149e:	f7ff fbe5 	bl	8000c6c <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e10c      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	4b6a      	ldr	r3, [pc, #424]	; (800165c <HAL_RCC_OscConfig+0x474>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2ea>
 80014c4:	4b64      	ldr	r3, [pc, #400]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	4a63      	ldr	r2, [pc, #396]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6713      	str	r3, [r2, #112]	; 0x70
 80014d0:	e01c      	b.n	800150c <HAL_RCC_OscConfig+0x324>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x30c>
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4a5e      	ldr	r2, [pc, #376]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6713      	str	r3, [r2, #112]	; 0x70
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a5b      	ldr	r2, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0x324>
 80014f4:	4b58      	ldr	r3, [pc, #352]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a57      	ldr	r2, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001500:	4b55      	ldr	r3, [pc, #340]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a54      	ldr	r2, [pc, #336]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001506:	f023 0304 	bic.w	r3, r3, #4
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d015      	beq.n	8001540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fbaa 	bl	8000c6c <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	e00a      	b.n	8001532 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151c:	f7ff fba6 	bl	8000c6c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e0cb      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	4b49      	ldr	r3, [pc, #292]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0ee      	beq.n	800151c <HAL_RCC_OscConfig+0x334>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff fb94 	bl	8000c6c <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	e00a      	b.n	800155e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001548:	f7ff fb90 	bl	8000c6c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e0b5      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155e:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1ee      	bne.n	8001548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001570:	4b39      	ldr	r3, [pc, #228]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a38      	ldr	r2, [pc, #224]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80a1 	beq.w	80016c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b08      	cmp	r3, #8
 8001590:	d05c      	beq.n	800164c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d141      	bne.n	800161e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_RCC_OscConfig+0x478>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb64 	bl	8000c6c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff fb60 	bl	8000c6c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e087      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69da      	ldr	r2, [r3, #28]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	3b01      	subs	r3, #1
 80015e0:	041b      	lsls	r3, r3, #16
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	061b      	lsls	r3, r3, #24
 80015ea:	491b      	ldr	r1, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x478>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb39 	bl	8000c6c <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fb35 	bl	8000c6c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e05c      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x416>
 800161c:	e054      	b.n	80016c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_RCC_OscConfig+0x478>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fb22 	bl	8000c6c <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff fb1e 	bl	8000c6c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e045      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_RCC_OscConfig+0x470>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x444>
 800164a:	e03d      	b.n	80016c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e038      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000
 8001660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x4ec>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d028      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d121      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d11a      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800169a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800169c:	4293      	cmp	r3, r2
 800169e:	d111      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	085b      	lsrs	r3, r3, #1
 80016ac:	3b01      	subs	r3, #1
 80016ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d107      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800

080016d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0cc      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ec:	4b68      	ldr	r3, [pc, #416]	; (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d90c      	bls.n	8001714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b65      	ldr	r3, [pc, #404]	; (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	4b63      	ldr	r3, [pc, #396]	; (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0b8      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800172c:	4b59      	ldr	r3, [pc, #356]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a58      	ldr	r2, [pc, #352]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a52      	ldr	r2, [pc, #328]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800174e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	494d      	ldr	r1, [pc, #308]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d044      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d119      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e07f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d003      	beq.n	8001796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001792:	2b03      	cmp	r3, #3
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001796:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e067      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b6:	4b37      	ldr	r3, [pc, #220]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f023 0203 	bic.w	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4934      	ldr	r1, [pc, #208]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c8:	f7ff fa50 	bl	8000c6c <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d0:	f7ff fa4c 	bl	8000c6c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e04f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 020c 	and.w	r2, r3, #12
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d1eb      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d20c      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e032      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4916      	ldr	r1, [pc, #88]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185e:	f000 f821 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	490a      	ldr	r1, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_RCC_ClockConfig+0x1c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f8e6 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00
 8001894:	40023800 	.word	0x40023800
 8001898:	080062a8 	.word	0x080062a8
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a8:	b094      	sub	sp, #80	; 0x50
 80018aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
 80018b0:	2300      	movs	r3, #0
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018b4:	2300      	movs	r3, #0
 80018b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018bc:	4b79      	ldr	r3, [pc, #484]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d00d      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x40>
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	f200 80e1 	bhi.w	8001a90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x34>
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d003      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x3a>
 80018d6:	e0db      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018dc:	e0db      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018de:	4b73      	ldr	r3, [pc, #460]	; (8001aac <HAL_RCC_GetSysClockFreq+0x208>)
 80018e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018e2:	e0d8      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e4:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ee:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d063      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fa:	4b6a      	ldr	r3, [pc, #424]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	099b      	lsrs	r3, r3, #6
 8001900:	2200      	movs	r2, #0
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
 8001904:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
 8001912:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001916:	4622      	mov	r2, r4
 8001918:	462b      	mov	r3, r5
 800191a:	f04f 0000 	mov.w	r0, #0
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	0159      	lsls	r1, r3, #5
 8001924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001928:	0150      	lsls	r0, r2, #5
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4621      	mov	r1, r4
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	6139      	str	r1, [r7, #16]
 8001934:	4629      	mov	r1, r5
 8001936:	eb63 0301 	sbc.w	r3, r3, r1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001948:	4659      	mov	r1, fp
 800194a:	018b      	lsls	r3, r1, #6
 800194c:	4651      	mov	r1, sl
 800194e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001952:	4651      	mov	r1, sl
 8001954:	018a      	lsls	r2, r1, #6
 8001956:	4651      	mov	r1, sl
 8001958:	ebb2 0801 	subs.w	r8, r2, r1
 800195c:	4659      	mov	r1, fp
 800195e:	eb63 0901 	sbc.w	r9, r3, r1
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800196e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001976:	4690      	mov	r8, r2
 8001978:	4699      	mov	r9, r3
 800197a:	4623      	mov	r3, r4
 800197c:	eb18 0303 	adds.w	r3, r8, r3
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	462b      	mov	r3, r5
 8001984:	eb49 0303 	adc.w	r3, r9, r3
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001996:	4629      	mov	r1, r5
 8001998:	024b      	lsls	r3, r1, #9
 800199a:	4621      	mov	r1, r4
 800199c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019a0:	4621      	mov	r1, r4
 80019a2:	024a      	lsls	r2, r1, #9
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019aa:	2200      	movs	r2, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019b4:	f7fe fc5e 	bl	8000274 <__aeabi_uldivmod>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4613      	mov	r3, r2
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c0:	e058      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	2200      	movs	r2, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	4611      	mov	r1, r2
 80019ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
 80019d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019dc:	4642      	mov	r2, r8
 80019de:	464b      	mov	r3, r9
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	0159      	lsls	r1, r3, #5
 80019ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ee:	0150      	lsls	r0, r2, #5
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4641      	mov	r1, r8
 80019f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019fa:	4649      	mov	r1, r9
 80019fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a14:	ebb2 040a 	subs.w	r4, r2, sl
 8001a18:	eb63 050b 	sbc.w	r5, r3, fp
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	00eb      	lsls	r3, r5, #3
 8001a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a2a:	00e2      	lsls	r2, r4, #3
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	4643      	mov	r3, r8
 8001a32:	18e3      	adds	r3, r4, r3
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	464b      	mov	r3, r9
 8001a38:	eb45 0303 	adc.w	r3, r5, r3
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	028b      	lsls	r3, r1, #10
 8001a4e:	4621      	mov	r1, r4
 8001a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a54:	4621      	mov	r1, r4
 8001a56:	028a      	lsls	r2, r1, #10
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	61fa      	str	r2, [r7, #28]
 8001a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a68:	f7fe fc04 	bl	8000274 <__aeabi_uldivmod>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4613      	mov	r3, r2
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3750      	adds	r7, #80	; 0x50
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	007a1200 	.word	0x007a1200

08001ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001acc:	f7ff fff0 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0a9b      	lsrs	r3, r3, #10
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	080062b8 	.word	0x080062b8

08001af0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220f      	movs	r2, #15
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_RCC_GetClockConfig+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e041      	b.n	8001bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f839 	bl	8001bf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f000 f9ca 	bl	8001f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d001      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e044      	b.n	8001caa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d018      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4a:	d013      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_TIM_Base_Start_IT+0xb4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00e      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d004      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d111      	bne.n	8001c98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d010      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c96:	e007      	b.n	8001ca8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40010000 	.word	0x40010000
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	40000800 	.word	0x40000800
 8001cc4:	40000c00 	.word	0x40000c00
 8001cc8:	40014000 	.word	0x40014000

08001ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d122      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d11b      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0202 	mvn.w	r2, #2
 8001cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8ee 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8e0 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8f1 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0204 	mvn.w	r2, #4
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8c4 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8b6 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8c7 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0208 	mvn.w	r2, #8
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2204      	movs	r2, #4
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f89a 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f88c 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f89d 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0210 	mvn.w	r2, #16
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f870 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f862 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f873 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0201 	mvn.w	r2, #1
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fdc0 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b80      	cmp	r3, #128	; 0x80
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8e2 	bl	8002040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f838 	bl	8001f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0220 	mvn.w	r2, #32
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8ac 	bl	800202c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	; (8002010 <TIM_Base_SetConfig+0xe4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00f      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d00b      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a31      	ldr	r2, [pc, #196]	; (8002014 <TIM_Base_SetConfig+0xe8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a30      	ldr	r2, [pc, #192]	; (8002018 <TIM_Base_SetConfig+0xec>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a2f      	ldr	r2, [pc, #188]	; (800201c <TIM_Base_SetConfig+0xf0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d108      	bne.n	8001f76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <TIM_Base_SetConfig+0xe4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d017      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a22      	ldr	r2, [pc, #136]	; (8002014 <TIM_Base_SetConfig+0xe8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <TIM_Base_SetConfig+0xec>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00f      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a20      	ldr	r2, [pc, #128]	; (800201c <TIM_Base_SetConfig+0xf0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <TIM_Base_SetConfig+0xf4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <TIM_Base_SetConfig+0xf8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d003      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <TIM_Base_SetConfig+0xfc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <TIM_Base_SetConfig+0xe4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d103      	bne.n	8001ffc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	615a      	str	r2, [r3, #20]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40010000 	.word	0x40010000
 8002014:	40000400 	.word	0x40000400
 8002018:	40000800 	.word	0x40000800
 800201c:	40000c00 	.word	0x40000c00
 8002020:	40014000 	.word	0x40014000
 8002024:	40014400 	.word	0x40014400
 8002028:	40014800 	.word	0x40014800

0800202c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f103 0208 	add.w	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f103 0208 	add.w	r2, r3, #8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f103 0208 	add.w	r2, r3, #8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d103      	bne.n	8002116 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e00c      	b.n	8002130 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3308      	adds	r3, #8
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e002      	b.n	8002124 <vListInsert+0x2e>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	d2f6      	bcs.n	800211e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6892      	ldr	r2, [r2, #8]
 800217e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6852      	ldr	r2, [r2, #4]
 8002188:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d103      	bne.n	800219c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021c6:	2301      	movs	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <xQueueGenericReset+0x2e>
        __asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	60fb      	str	r3, [r7, #12]
    }
 80021e6:	bf00      	nop
 80021e8:	e7fe      	b.n	80021e8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d05d      	beq.n	80022ac <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d059      	beq.n	80022ac <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2100      	movs	r1, #0
 8002202:	fba3 2302 	umull	r2, r3, r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d000      	beq.n	800220c <xQueueGenericReset+0x50>
 800220a:	2101      	movs	r1, #1
 800220c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d14c      	bne.n	80022ac <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002212:	f002 f97f 	bl	8004514 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	441a      	add	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2200      	movs	r2, #0
 8002230:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	3b01      	subs	r3, #1
 8002244:	6939      	ldr	r1, [r7, #16]
 8002246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	441a      	add	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	22ff      	movs	r2, #255	; 0xff
 800225e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d114      	bne.n	8002292 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01a      	beq.n	80022a6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	3310      	adds	r3, #16
 8002274:	4618      	mov	r0, r3
 8002276:	f001 f8af 	bl	80033d8 <xTaskRemoveFromEventList>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d012      	beq.n	80022a6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <xQueueGenericReset+0x11c>)
 8002282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	e009      	b.n	80022a6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3310      	adds	r3, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fedc 	bl	8002054 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	3324      	adds	r3, #36	; 0x24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fed7 	bl	8002054 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022a6:	f002 f965 	bl	8004574 <vPortExitCritical>
 80022aa:	e001      	b.n	80022b0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <xQueueGenericReset+0x110>
        __asm volatile
 80022b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	60bb      	str	r3, [r7, #8]
    }
 80022c8:	bf00      	nop
 80022ca:	e7fe      	b.n	80022ca <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022cc:	697b      	ldr	r3, [r7, #20]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000ed04 	.word	0xe000ed04

080022dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d02e      	beq.n	8002352 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022f4:	2100      	movs	r1, #0
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	fba3 2302 	umull	r2, r3, r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d000      	beq.n	8002304 <xQueueGenericCreate+0x28>
 8002302:	2101      	movs	r1, #1
 8002304:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002306:	2b00      	cmp	r3, #0
 8002308:	d123      	bne.n	8002352 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002312:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002316:	d81c      	bhi.n	8002352 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	3350      	adds	r3, #80	; 0x50
 8002326:	4618      	mov	r0, r3
 8002328:	f002 f9e0 	bl	80046ec <pvPortMalloc>
 800232c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01c      	beq.n	800236e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3350      	adds	r3, #80	; 0x50
 800233c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f814 	bl	8002378 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002350:	e00d      	b.n	800236e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <xQueueGenericCreate+0x92>
        __asm volatile
 8002358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	613b      	str	r3, [r7, #16]
    }
 800236a:	bf00      	nop
 800236c:	e7fe      	b.n	800236c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800236e:	69fb      	ldr	r3, [r7, #28]
    }
 8002370:	4618      	mov	r0, r3
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d103      	bne.n	8002394 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e002      	b.n	800239a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023a6:	2101      	movs	r1, #1
 80023a8:	69b8      	ldr	r0, [r7, #24]
 80023aa:	f7ff ff07 	bl	80021bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	2073      	movs	r0, #115	; 0x73
 80023be:	f003 f85d 	bl	800547c <SEGGER_SYSVIEW_RecordU32x3>
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b08f      	sub	sp, #60	; 0x3c
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10a      	bne.n	80023fc <xQueueReceive+0x30>
        __asm volatile
 80023e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ea:	f383 8811 	msr	BASEPRI, r3
 80023ee:	f3bf 8f6f 	isb	sy
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	623b      	str	r3, [r7, #32]
    }
 80023f8:	bf00      	nop
 80023fa:	e7fe      	b.n	80023fa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <xQueueReceive+0x3e>
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <xQueueReceive+0x42>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <xQueueReceive+0x44>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <xQueueReceive+0x5e>
        __asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	61fb      	str	r3, [r7, #28]
    }
 8002426:	bf00      	nop
 8002428:	e7fe      	b.n	8002428 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800242a:	f001 f9e7 	bl	80037fc <xTaskGetSchedulerState>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <xQueueReceive+0x6e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <xQueueReceive+0x72>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <xQueueReceive+0x74>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <xQueueReceive+0x8e>
        __asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	61bb      	str	r3, [r7, #24]
    }
 8002456:	bf00      	nop
 8002458:	e7fe      	b.n	8002458 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800245a:	f002 f85b 	bl	8004514 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	2b00      	cmp	r3, #0
 8002468:	d02f      	beq.n	80024ca <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800246e:	f000 f8bd 	bl	80025ec <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fd09 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 800247a:	4604      	mov	r4, r0
 800247c:	2000      	movs	r0, #0
 800247e:	f003 fd05 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 8002482:	4602      	mov	r2, r0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2101      	movs	r1, #1
 8002488:	9100      	str	r1, [sp, #0]
 800248a:	4621      	mov	r1, r4
 800248c:	205c      	movs	r0, #92	; 0x5c
 800248e:	f003 f86b 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	1e5a      	subs	r2, r3, #1
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00f      	beq.n	80024c2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	3310      	adds	r3, #16
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 ff96 	bl	80033d8 <xTaskRemoveFromEventList>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024b2:	4b4d      	ldr	r3, [pc, #308]	; (80025e8 <xQueueReceive+0x21c>)
 80024b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024c2:	f002 f857 	bl	8004574 <vPortExitCritical>
                return pdPASS;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e08a      	b.n	80025e0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d113      	bne.n	80024f8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024d0:	f002 f850 	bl	8004574 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fcd8 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 80024dc:	4604      	mov	r4, r0
 80024de:	2000      	movs	r0, #0
 80024e0:	f003 fcd4 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2101      	movs	r1, #1
 80024ea:	9100      	str	r1, [sp, #0]
 80024ec:	4621      	mov	r1, r4
 80024ee:	205c      	movs	r0, #92	; 0x5c
 80024f0:	f003 f83a 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e073      	b.n	80025e0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	4618      	mov	r0, r3
 8002504:	f001 f840 	bl	8003588 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002508:	2301      	movs	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800250c:	f002 f832 	bl	8004574 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002510:	f000 fc54 	bl	8002dbc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002514:	f001 fffe 	bl	8004514 <vPortEnterCritical>
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800251e:	b25b      	sxtb	r3, r3
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d103      	bne.n	800252e <xQueueReceive+0x162>
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002534:	b25b      	sxtb	r3, r3
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d103      	bne.n	8002544 <xQueueReceive+0x178>
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002544:	f002 f816 	bl	8004574 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002548:	1d3a      	adds	r2, r7, #4
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f001 f82f 	bl	80035b4 <xTaskCheckForTimeOut>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d124      	bne.n	80025a6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800255c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800255e:	f000 f8bd 	bl	80026dc <prvIsQueueEmpty>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d018      	beq.n	800259a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	3324      	adds	r3, #36	; 0x24
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fec5 	bl	8003300 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002578:	f000 f85e 	bl	8002638 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800257c:	f000 fc2c 	bl	8002dd8 <xTaskResumeAll>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	f47f af69 	bne.w	800245a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <xQueueReceive+0x21c>)
 800258a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	e75f      	b.n	800245a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800259a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800259c:	f000 f84c 	bl	8002638 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025a0:	f000 fc1a 	bl	8002dd8 <xTaskResumeAll>
 80025a4:	e759      	b.n	800245a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a8:	f000 f846 	bl	8002638 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025ac:	f000 fc14 	bl	8002dd8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b2:	f000 f893 	bl	80026dc <prvIsQueueEmpty>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f43f af4e 	beq.w	800245a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 fc63 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 80025c6:	4604      	mov	r4, r0
 80025c8:	2000      	movs	r0, #0
 80025ca:	f003 fc5f 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2101      	movs	r1, #1
 80025d4:	9100      	str	r1, [sp, #0]
 80025d6:	4621      	mov	r1, r4
 80025d8:	205c      	movs	r0, #92	; 0x5c
 80025da:	f002 ffc5 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80025de:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3734      	adds	r7, #52	; 0x34
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}
 80025e8:	e000ed04 	.word	0xe000ed04

080025ec <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	441a      	add	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	d303      	bcc.n	8002620 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	461a      	mov	r2, r3
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	f003 fdaa 	bl	8006184 <memcpy>
    }
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002640:	f001 ff68 	bl	8004514 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800264a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800264c:	e011      	b.n	8002672 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3324      	adds	r3, #36	; 0x24
 800265a:	4618      	mov	r0, r3
 800265c:	f000 febc 	bl	80033d8 <xTaskRemoveFromEventList>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002666:	f001 f80b 	bl	8003680 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	3b01      	subs	r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	dce9      	bgt.n	800264e <prvUnlockQueue+0x16>
 800267a:	e000      	b.n	800267e <prvUnlockQueue+0x46>
                    break;
 800267c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	22ff      	movs	r2, #255	; 0xff
 8002682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002686:	f001 ff75 	bl	8004574 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800268a:	f001 ff43 	bl	8004514 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002694:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002696:	e011      	b.n	80026bc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3310      	adds	r3, #16
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fe97 	bl	80033d8 <xTaskRemoveFromEventList>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026b0:	f000 ffe6 	bl	8003680 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026b4:	7bbb      	ldrb	r3, [r7, #14]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	dce9      	bgt.n	8002698 <prvUnlockQueue+0x60>
 80026c4:	e000      	b.n	80026c8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026c6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	22ff      	movs	r2, #255	; 0xff
 80026cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80026d0:	f001 ff50 	bl	8004574 <vPortExitCritical>
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026e4:	f001 ff16 	bl	8004514 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d102      	bne.n	80026f6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e001      	b.n	80026fa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026fa:	f001 ff3b 	bl	8004574 <vPortExitCritical>

    return xReturn;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	60fb      	str	r3, [r7, #12]
    }
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d024      	beq.n	8002782 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e01e      	b.n	800277c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800273e:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <vQueueAddToRegistry+0xa8>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d105      	bne.n	800275a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <vQueueAddToRegistry+0xa8>)
 8002754:	4413      	add	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
                    break;
 8002758:	e013      	b.n	8002782 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <vQueueAddToRegistry+0x6e>
 8002760:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <vQueueAddToRegistry+0xa8>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <vQueueAddToRegistry+0xa8>)
 8002772:	4413      	add	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b07      	cmp	r3, #7
 8002780:	d9dd      	bls.n	800273e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00f      	beq.n	80027a8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4618      	mov	r0, r3
 8002798:	f003 fb78 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 800279c:	4601      	mov	r1, r0
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	2071      	movs	r0, #113	; 0x71
 80027a4:	f002 fe10 	bl	80053c8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000090 	.word	0x20000090

080027b4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027c4:	f001 fea6 	bl	8004514 <vPortEnterCritical>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d103      	bne.n	80027de <vQueueWaitForMessageRestricted+0x2a>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d103      	bne.n	80027f4 <vQueueWaitForMessageRestricted+0x40>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f4:	f001 febe 	bl	8004574 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3324      	adds	r3, #36	; 0x24
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fd9d 	bl	8003348 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7ff ff12 	bl	8002638 <prvUnlockQueue>
    }
 8002814:	bf00      	nop
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	; 0x30
 8002820:	af04      	add	r7, sp, #16
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4618      	mov	r0, r3
 8002832:	f001 ff5b 	bl	80046ec <pvPortMalloc>
 8002836:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d013      	beq.n	8002866 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800283e:	2058      	movs	r0, #88	; 0x58
 8002840:	f001 ff54 	bl	80046ec <pvPortMalloc>
 8002844:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800284c:	2258      	movs	r2, #88	; 0x58
 800284e:	2100      	movs	r1, #0
 8002850:	69f8      	ldr	r0, [r7, #28]
 8002852:	f003 fca5 	bl	80061a0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
 800285c:	e005      	b.n	800286a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	f001 fffe 	bl	8004860 <vPortFree>
 8002864:	e001      	b.n	800286a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002870:	88fa      	ldrh	r2, [r7, #6]
 8002872:	2300      	movs	r3, #0
 8002874:	9303      	str	r3, [sp, #12]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	9302      	str	r3, [sp, #8]
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f80e 	bl	80028a8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800288c:	69f8      	ldr	r0, [r7, #28]
 800288e:	f000 f899 	bl	80029c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002892:	2301      	movs	r3, #1
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	e002      	b.n	800289e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
 800289c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800289e:	69bb      	ldr	r3, [r7, #24]
    }
 80028a0:	4618      	mov	r0, r3
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	461a      	mov	r2, r3
 80028c0:	21a5      	movs	r1, #165	; 0xa5
 80028c2:	f003 fc6d 	bl	80061a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028d0:	3b01      	subs	r3, #1
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f023 0307 	bic.w	r3, r3, #7
 80028de:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <prvInitialiseNewTask+0x58>
        __asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	617b      	str	r3, [r7, #20]
    }
 80028fc:	bf00      	nop
 80028fe:	e7fe      	b.n	80028fe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01e      	beq.n	8002944 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	e012      	b.n	8002932 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	7819      	ldrb	r1, [r3, #0]
 8002914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	3334      	adds	r3, #52	; 0x34
 800291c:	460a      	mov	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d006      	beq.n	800293a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	3301      	adds	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	2b09      	cmp	r3, #9
 8002936:	d9e9      	bls.n	800290c <prvInitialiseNewTask+0x64>
 8002938:	e000      	b.n	800293c <prvInitialiseNewTask+0x94>
            {
                break;
 800293a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	2b04      	cmp	r3, #4
 8002948:	d90a      	bls.n	8002960 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	613b      	str	r3, [r7, #16]
    }
 800295c:	bf00      	nop
 800295e:	e7fe      	b.n	800295e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	2b04      	cmp	r3, #4
 8002964:	d901      	bls.n	800296a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002966:	2304      	movs	r3, #4
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002974:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	3304      	adds	r3, #4
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fb8a 	bl	8002094 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	3318      	adds	r3, #24
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fb85 	bl	8002094 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	f1c3 0205 	rsb	r2, r3, #5
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	69b8      	ldr	r0, [r7, #24]
 80029a6:	f001 fc07 	bl	80041b8 <pxPortInitialiseStack>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029bc:	bf00      	nop
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029c4:	b5b0      	push	{r4, r5, r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029cc:	f001 fda2 	bl	8004514 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029d0:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <prvAddNewTaskToReadyList+0x14c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3301      	adds	r3, #1
 80029d6:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <prvAddNewTaskToReadyList+0x14c>)
 80029d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029da:	4b4e      	ldr	r3, [pc, #312]	; (8002b14 <prvAddNewTaskToReadyList+0x150>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029e2:	4a4c      	ldr	r2, [pc, #304]	; (8002b14 <prvAddNewTaskToReadyList+0x150>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029e8:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <prvAddNewTaskToReadyList+0x14c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d110      	bne.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029f0:	f000 fe6a 	bl	80036c8 <prvInitialiseTaskLists>
 80029f4:	e00d      	b.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029f6:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <prvAddNewTaskToReadyList+0x154>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029fe:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <prvAddNewTaskToReadyList+0x150>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d802      	bhi.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a0c:	4a41      	ldr	r2, [pc, #260]	; (8002b14 <prvAddNewTaskToReadyList+0x150>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a12:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <prvAddNewTaskToReadyList+0x158>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	4a40      	ldr	r2, [pc, #256]	; (8002b1c <prvAddNewTaskToReadyList+0x158>)
 8002a1a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <prvAddNewTaskToReadyList+0x158>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <prvAddNewTaskToReadyList+0x94>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 f967 	bl	8005d00 <SEGGER_SYSVIEW_OnTaskCreate>
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	461d      	mov	r5, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461c      	mov	r4, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	1ae3      	subs	r3, r4, r3
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	462b      	mov	r3, r5
 8002a54:	f002 f816 	bl	8004a84 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 f9d4 	bl	8005e08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2201      	movs	r2, #1
 8002a66:	409a      	lsls	r2, r3
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <prvAddNewTaskToReadyList+0x15c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	; (8002b20 <prvAddNewTaskToReadyList+0x15c>)
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a76:	492b      	ldr	r1, [pc, #172]	; (8002b24 <prvAddNewTaskToReadyList+0x160>)
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	3304      	adds	r3, #4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	3204      	adds	r2, #4
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	1d1a      	adds	r2, r3, #4
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <prvAddNewTaskToReadyList+0x160>)
 8002ab6:	441a      	add	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	615a      	str	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac0:	4918      	ldr	r1, [pc, #96]	; (8002b24 <prvAddNewTaskToReadyList+0x160>)
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	4814      	ldr	r0, [pc, #80]	; (8002b24 <prvAddNewTaskToReadyList+0x160>)
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4403      	add	r3, r0
 8002adc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ade:	f001 fd49 	bl	8004574 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <prvAddNewTaskToReadyList+0x154>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00e      	beq.n	8002b08 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <prvAddNewTaskToReadyList+0x150>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d207      	bcs.n	8002b08 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <prvAddNewTaskToReadyList+0x164>)
 8002afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b10:	200001a8 	.word	0x200001a8
 8002b14:	200000d0 	.word	0x200000d0
 8002b18:	200001b4 	.word	0x200001b4
 8002b1c:	200001c4 	.word	0x200001c4
 8002b20:	200001b0 	.word	0x200001b0
 8002b24:	200000d4 	.word	0x200000d4
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002b34:	f001 fcee 	bl	8004514 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <vTaskDelete+0x18>
 8002b3e:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <vTaskDelete+0x134>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e000      	b.n	8002b46 <vTaskDelete+0x1a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fb0b 	bl	8002168 <uxListRemove>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d115      	bne.n	8002b84 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5c:	4941      	ldr	r1, [pc, #260]	; (8002c64 <vTaskDelete+0x138>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <vTaskDelete+0x58>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	2201      	movs	r2, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <vTaskDelete+0x13c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	4a39      	ldr	r2, [pc, #228]	; (8002c68 <vTaskDelete+0x13c>)
 8002b82:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3318      	adds	r3, #24
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fae9 	bl	8002168 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002b96:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <vTaskDelete+0x140>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	4a33      	ldr	r2, [pc, #204]	; (8002c6c <vTaskDelete+0x140>)
 8002b9e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <vTaskDelete+0x134>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d118      	bne.n	8002bdc <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3304      	adds	r3, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	482f      	ldr	r0, [pc, #188]	; (8002c70 <vTaskDelete+0x144>)
 8002bb2:	f7ff fa7c 	bl	80020ae <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002bb6:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <vTaskDelete+0x148>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <vTaskDelete+0x148>)
 8002bbe:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 f962 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	2022      	movs	r0, #34	; 0x22
 8002bce:	f002 fbbf 	bl	8005350 <SEGGER_SYSVIEW_RecordU32>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 ffbd 	bl	8004b54 <SYSVIEW_DeleteTask>
 8002bda:	e013      	b.n	8002c04 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002bdc:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <vTaskDelete+0x14c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <vTaskDelete+0x14c>)
 8002be4:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 f94f 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	2022      	movs	r0, #34	; 0x22
 8002bf4:	f002 fbac 	bl	8005350 <SEGGER_SYSVIEW_RecordU32>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 ffaa 	bl	8004b54 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002c00:	f000 fde0 	bl	80037c4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002c04:	f001 fcb6 	bl	8004574 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <vTaskDelete+0x134>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d002      	beq.n	8002c18 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fdc6 	bl	80037a4 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <vTaskDelete+0x150>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01b      	beq.n	8002c58 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <vTaskDelete+0x134>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d116      	bne.n	8002c58 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <vTaskDelete+0x154>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <vTaskDelete+0x11c>
        __asm volatile
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	60bb      	str	r3, [r7, #8]
    }
 8002c44:	bf00      	nop
 8002c46:	e7fe      	b.n	8002c46 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <vTaskDelete+0x158>)
 8002c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	200000d0 	.word	0x200000d0
 8002c64:	200000d4 	.word	0x200000d4
 8002c68:	200001b0 	.word	0x200001b0
 8002c6c:	200001c4 	.word	0x200001c4
 8002c70:	2000017c 	.word	0x2000017c
 8002c74:	20000190 	.word	0x20000190
 8002c78:	200001a8 	.word	0x200001a8
 8002c7c:	200001b4 	.word	0x200001b4
 8002c80:	200001d0 	.word	0x200001d0
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01b      	beq.n	8002cd2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <vTaskDelay+0x68>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <vTaskDelay+0x30>
        __asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	60bb      	str	r3, [r7, #8]
    }
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002cb8:	f000 f880 	bl	8002dbc <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	2023      	movs	r0, #35	; 0x23
 8002cc0:	f002 fb46 	bl	8005350 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 ff72 	bl	8003bb0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ccc:	f000 f884 	bl	8002dd8 <xTaskResumeAll>
 8002cd0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d107      	bne.n	8002ce8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <vTaskDelay+0x6c>)
 8002cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	200001d0 	.word	0x200001d0
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002cfe:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <vTaskStartScheduler+0xa4>)
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	2282      	movs	r2, #130	; 0x82
 8002d0a:	4925      	ldr	r1, [pc, #148]	; (8002da0 <vTaskStartScheduler+0xa8>)
 8002d0c:	4825      	ldr	r0, [pc, #148]	; (8002da4 <vTaskStartScheduler+0xac>)
 8002d0e:	f7ff fd85 	bl	800281c <xTaskCreate>
 8002d12:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d102      	bne.n	8002d20 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d1a:	f000 ffc9 	bl	8003cb0 <xTimerCreateTimerTask>
 8002d1e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d124      	bne.n	8002d70 <vTaskStartScheduler+0x78>
        __asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	60bb      	str	r3, [r7, #8]
    }
 8002d38:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <vTaskStartScheduler+0xb0>)
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d42:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <vTaskStartScheduler+0xb4>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <vTaskStartScheduler+0xb8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <vTaskStartScheduler+0xbc>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <vTaskStartScheduler+0xa4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d102      	bne.n	8002d60 <vTaskStartScheduler+0x68>
 8002d5a:	f002 ffb5 	bl	8005cc8 <SEGGER_SYSVIEW_OnIdle>
 8002d5e:	e004      	b.n	8002d6a <vTaskStartScheduler+0x72>
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <vTaskStartScheduler+0xbc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 f80d 	bl	8005d84 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d6a:	f001 fab3 	bl	80042d4 <xPortStartScheduler>
 8002d6e:	e00e      	b.n	8002d8e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d10a      	bne.n	8002d8e <vTaskStartScheduler+0x96>
        __asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	607b      	str	r3, [r7, #4]
    }
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <vTaskStartScheduler+0xc0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200001cc 	.word	0x200001cc
 8002da0:	08006220 	.word	0x08006220
 8002da4:	08003699 	.word	0x08003699
 8002da8:	200001c8 	.word	0x200001c8
 8002dac:	200001b4 	.word	0x200001b4
 8002db0:	200001ac 	.word	0x200001ac
 8002db4:	200000d0 	.word	0x200000d0
 8002db8:	2000000c 	.word	0x2000000c

08002dbc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <vTaskSuspendAll+0x18>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	4a03      	ldr	r2, [pc, #12]	; (8002dd4 <vTaskSuspendAll+0x18>)
 8002dc8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	200001d0 	.word	0x200001d0

08002dd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002de6:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <xTaskResumeAll+0x1dc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <xTaskResumeAll+0x2c>
        __asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	607b      	str	r3, [r7, #4]
    }
 8002e00:	bf00      	nop
 8002e02:	e7fe      	b.n	8002e02 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e04:	f001 fb86 	bl	8004514 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <xTaskResumeAll+0x1dc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <xTaskResumeAll+0x1dc>)
 8002e10:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e12:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <xTaskResumeAll+0x1dc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 80c4 	bne.w	8002fa4 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e1c:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <xTaskResumeAll+0x1e0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80bf 	beq.w	8002fa4 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e26:	e08e      	b.n	8002f46 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e28:	4b64      	ldr	r3, [pc, #400]	; (8002fbc <xTaskResumeAll+0x1e4>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	6a12      	ldr	r2, [r2, #32]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	69d2      	ldr	r2, [r2, #28]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3318      	adds	r3, #24
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d103      	bne.n	8002e5e <xTaskResumeAll+0x86>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2200      	movs	r2, #0
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	68d2      	ldr	r2, [r2, #12]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	6892      	ldr	r2, [r2, #8]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d103      	bne.n	8002e9c <xTaskResumeAll+0xc4>
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	615a      	str	r2, [r3, #20]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1e5a      	subs	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 ffaa 	bl	8005e08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	2201      	movs	r2, #1
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <xTaskResumeAll+0x1e8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	4a3f      	ldr	r2, [pc, #252]	; (8002fc0 <xTaskResumeAll+0x1e8>)
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eca:	493e      	ldr	r1, [pc, #248]	; (8002fc4 <xTaskResumeAll+0x1ec>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	3204      	adds	r2, #4
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	1d1a      	adds	r2, r3, #4
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4a2e      	ldr	r2, [pc, #184]	; (8002fc4 <xTaskResumeAll+0x1ec>)
 8002f0a:	441a      	add	r2, r3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	492b      	ldr	r1, [pc, #172]	; (8002fc4 <xTaskResumeAll+0x1ec>)
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1c59      	adds	r1, r3, #1
 8002f24:	4827      	ldr	r0, [pc, #156]	; (8002fc4 <xTaskResumeAll+0x1ec>)
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4403      	add	r3, r0
 8002f30:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <xTaskResumeAll+0x1f0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d302      	bcc.n	8002f46 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <xTaskResumeAll+0x1f4>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <xTaskResumeAll+0x1e4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f47f af6c 	bne.w	8002e28 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f56:	f000 fc35 	bl	80037c4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <xTaskResumeAll+0x1f8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d010      	beq.n	8002f88 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f66:	f000 f847 	bl	8002ff8 <xTaskIncrementTick>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <xTaskResumeAll+0x1f4>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f1      	bne.n	8002f66 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <xTaskResumeAll+0x1f8>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <xTaskResumeAll+0x1f4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002f90:	2301      	movs	r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <xTaskResumeAll+0x1fc>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002fa4:	f001 fae6 	bl	8004574 <vPortExitCritical>

    return xAlreadyYielded;
 8002fa8:	69bb      	ldr	r3, [r7, #24]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200001d0 	.word	0x200001d0
 8002fb8:	200001a8 	.word	0x200001a8
 8002fbc:	20000168 	.word	0x20000168
 8002fc0:	200001b0 	.word	0x200001b0
 8002fc4:	200000d4 	.word	0x200000d4
 8002fc8:	200000d0 	.word	0x200000d0
 8002fcc:	200001bc 	.word	0x200001bc
 8002fd0:	200001b8 	.word	0x200001b8
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <xTaskGetTickCount+0x1c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002fe4:	687b      	ldr	r3, [r7, #4]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	200001ac 	.word	0x200001ac

08002ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003002:	4b7f      	ldr	r3, [pc, #508]	; (8003200 <xTaskIncrementTick+0x208>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 80f0 	bne.w	80031ec <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800300c:	4b7d      	ldr	r3, [pc, #500]	; (8003204 <xTaskIncrementTick+0x20c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003014:	4a7b      	ldr	r2, [pc, #492]	; (8003204 <xTaskIncrementTick+0x20c>)
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d120      	bne.n	8003062 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003020:	4b79      	ldr	r3, [pc, #484]	; (8003208 <xTaskIncrementTick+0x210>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <xTaskIncrementTick+0x48>
        __asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	607b      	str	r3, [r7, #4]
    }
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <xTaskIncrementTick+0x46>
 8003040:	4b71      	ldr	r3, [pc, #452]	; (8003208 <xTaskIncrementTick+0x210>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	4b71      	ldr	r3, [pc, #452]	; (800320c <xTaskIncrementTick+0x214>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6f      	ldr	r2, [pc, #444]	; (8003208 <xTaskIncrementTick+0x210>)
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4a6f      	ldr	r2, [pc, #444]	; (800320c <xTaskIncrementTick+0x214>)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b6e      	ldr	r3, [pc, #440]	; (8003210 <xTaskIncrementTick+0x218>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	4a6d      	ldr	r2, [pc, #436]	; (8003210 <xTaskIncrementTick+0x218>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	f000 fbb1 	bl	80037c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003062:	4b6c      	ldr	r3, [pc, #432]	; (8003214 <xTaskIncrementTick+0x21c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a3a      	ldr	r2, [r7, #32]
 8003068:	429a      	cmp	r2, r3
 800306a:	f0c0 80aa 	bcc.w	80031c2 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800306e:	4b66      	ldr	r3, [pc, #408]	; (8003208 <xTaskIncrementTick+0x210>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003078:	4b66      	ldr	r3, [pc, #408]	; (8003214 <xTaskIncrementTick+0x21c>)
 800307a:	f04f 32ff 	mov.w	r2, #4294967295
 800307e:	601a      	str	r2, [r3, #0]
                    break;
 8003080:	e09f      	b.n	80031c2 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003082:	4b61      	ldr	r3, [pc, #388]	; (8003208 <xTaskIncrementTick+0x210>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003092:	6a3a      	ldr	r2, [r7, #32]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	429a      	cmp	r2, r3
 8003098:	d203      	bcs.n	80030a2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800309a:	4a5e      	ldr	r2, [pc, #376]	; (8003214 <xTaskIncrementTick+0x21c>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80030a0:	e08f      	b.n	80031c2 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	68d2      	ldr	r2, [r2, #12]
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	6892      	ldr	r2, [r2, #8]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	3304      	adds	r3, #4
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d103      	bne.n	80030d0 <xTaskIncrementTick+0xd8>
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	1e5a      	subs	r2, r3, #1
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01e      	beq.n	8003126 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	6a12      	ldr	r2, [r2, #32]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	69d2      	ldr	r2, [r2, #28]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3318      	adds	r3, #24
 800310a:	429a      	cmp	r2, r3
 800310c:	d103      	bne.n	8003116 <xTaskIncrementTick+0x11e>
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	6a1a      	ldr	r2, [r3, #32]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2200      	movs	r2, #0
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4618      	mov	r0, r3
 800312a:	f002 fe6d 	bl	8005e08 <SEGGER_SYSVIEW_OnTaskStartReady>
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	2201      	movs	r2, #1
 8003134:	409a      	lsls	r2, r3
 8003136:	4b38      	ldr	r3, [pc, #224]	; (8003218 <xTaskIncrementTick+0x220>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	4a36      	ldr	r2, [pc, #216]	; (8003218 <xTaskIncrementTick+0x220>)
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	4935      	ldr	r1, [pc, #212]	; (800321c <xTaskIncrementTick+0x224>)
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3304      	adds	r3, #4
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	60da      	str	r2, [r3, #12]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	3204      	adds	r2, #4
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	1d1a      	adds	r2, r3, #4
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4a26      	ldr	r2, [pc, #152]	; (800321c <xTaskIncrementTick+0x224>)
 8003184:	441a      	add	r2, r3
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	615a      	str	r2, [r3, #20]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318e:	4923      	ldr	r1, [pc, #140]	; (800321c <xTaskIncrementTick+0x224>)
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1c59      	adds	r1, r3, #1
 800319e:	481f      	ldr	r0, [pc, #124]	; (800321c <xTaskIncrementTick+0x224>)
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4403      	add	r3, r0
 80031aa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <xTaskIncrementTick+0x228>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	429a      	cmp	r2, r3
 80031b8:	f67f af59 	bls.w	800306e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80031bc:	2301      	movs	r3, #1
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031c0:	e755      	b.n	800306e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <xTaskIncrementTick+0x228>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	4914      	ldr	r1, [pc, #80]	; (800321c <xTaskIncrementTick+0x224>)
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d901      	bls.n	80031de <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80031da:	2301      	movs	r3, #1
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <xTaskIncrementTick+0x22c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80031e6:	2301      	movs	r3, #1
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ea:	e004      	b.n	80031f6 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031ec:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <xTaskIncrementTick+0x230>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a0d      	ldr	r2, [pc, #52]	; (8003228 <xTaskIncrementTick+0x230>)
 80031f4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3728      	adds	r7, #40	; 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	200001d0 	.word	0x200001d0
 8003204:	200001ac 	.word	0x200001ac
 8003208:	20000160 	.word	0x20000160
 800320c:	20000164 	.word	0x20000164
 8003210:	200001c0 	.word	0x200001c0
 8003214:	200001c8 	.word	0x200001c8
 8003218:	200001b0 	.word	0x200001b0
 800321c:	200000d4 	.word	0x200000d4
 8003220:	200000d0 	.word	0x200000d0
 8003224:	200001bc 	.word	0x200001bc
 8003228:	200001b8 	.word	0x200001b8

0800322c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <vTaskSwitchContext+0xbc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <vTaskSwitchContext+0xc0>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003240:	e04d      	b.n	80032de <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <vTaskSwitchContext+0xc0>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003248:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <vTaskSwitchContext+0xc4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003256:	7afb      	ldrb	r3, [r7, #11]
 8003258:	f1c3 031f 	rsb	r3, r3, #31
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	4925      	ldr	r1, [pc, #148]	; (80032f4 <vTaskSwitchContext+0xc8>)
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	607b      	str	r3, [r7, #4]
    }
 8003284:	bf00      	nop
 8003286:	e7fe      	b.n	8003286 <vTaskSwitchContext+0x5a>
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <vTaskSwitchContext+0xc8>)
 8003294:	4413      	add	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	3308      	adds	r3, #8
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d104      	bne.n	80032b8 <vTaskSwitchContext+0x8c>
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <vTaskSwitchContext+0xcc>)
 80032c0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <vTaskSwitchContext+0xcc>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <vTaskSwitchContext+0xd0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d102      	bne.n	80032d4 <vTaskSwitchContext+0xa8>
 80032ce:	f002 fcfb 	bl	8005cc8 <SEGGER_SYSVIEW_OnIdle>
}
 80032d2:	e004      	b.n	80032de <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <vTaskSwitchContext+0xcc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f002 fd53 	bl	8005d84 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200001d0 	.word	0x200001d0
 80032ec:	200001bc 	.word	0x200001bc
 80032f0:	200001b0 	.word	0x200001b0
 80032f4:	200000d4 	.word	0x200000d4
 80032f8:	200000d0 	.word	0x200000d0
 80032fc:	200001cc 	.word	0x200001cc

08003300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	60fb      	str	r3, [r7, #12]
    }
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <vTaskPlaceOnEventList+0x44>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3318      	adds	r3, #24
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe fee1 	bl	80020f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003334:	2101      	movs	r1, #1
 8003336:	6838      	ldr	r0, [r7, #0]
 8003338:	f000 fc3a 	bl	8003bb0 <prvAddCurrentTaskToDelayedList>
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	200000d0 	.word	0x200000d0

08003348 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	613b      	str	r3, [r7, #16]
    }
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	61da      	str	r2, [r3, #28]
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	6892      	ldr	r2, [r2, #8]
 8003386:	621a      	str	r2, [r3, #32]
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	3218      	adds	r2, #24
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f103 0218 	add.w	r2, r3, #24
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295
 80033bc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80033be:	2024      	movs	r0, #36	; 0x24
 80033c0:	f001 ffa8 	bl	8005314 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	68b8      	ldr	r0, [r7, #8]
 80033c8:	f000 fbf2 	bl	8003bb0 <prvAddCurrentTaskToDelayedList>
    }
 80033cc:	bf00      	nop
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	200000d0 	.word	0x200000d0

080033d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	60fb      	str	r3, [r7, #12]
    }
 8003400:	bf00      	nop
 8003402:	e7fe      	b.n	8003402 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	6a3a      	ldr	r2, [r7, #32]
 8003410:	6a12      	ldr	r2, [r2, #32]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	69d2      	ldr	r2, [r2, #28]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	3318      	adds	r3, #24
 8003426:	429a      	cmp	r2, r3
 8003428:	d103      	bne.n	8003432 <xTaskRemoveFromEventList+0x5a>
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	6a1a      	ldr	r2, [r3, #32]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	2200      	movs	r2, #0
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1e5a      	subs	r2, r3, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003442:	4b4b      	ldr	r3, [pc, #300]	; (8003570 <xTaskRemoveFromEventList+0x198>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d162      	bne.n	8003510 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	68d2      	ldr	r2, [r2, #12]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	6a3a      	ldr	r2, [r7, #32]
 8003460:	6892      	ldr	r2, [r2, #8]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	3304      	adds	r3, #4
 800346c:	429a      	cmp	r2, r3
 800346e:	d103      	bne.n	8003478 <xTaskRemoveFromEventList+0xa0>
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2200      	movs	r2, #0
 800347c:	615a      	str	r2, [r3, #20]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1e5a      	subs	r2, r3, #1
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	4618      	mov	r0, r3
 800348c:	f002 fcbc 	bl	8005e08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	2201      	movs	r2, #1
 8003496:	409a      	lsls	r2, r3
 8003498:	4b36      	ldr	r3, [pc, #216]	; (8003574 <xTaskRemoveFromEventList+0x19c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	4a35      	ldr	r2, [pc, #212]	; (8003574 <xTaskRemoveFromEventList+0x19c>)
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a6:	4934      	ldr	r1, [pc, #208]	; (8003578 <xTaskRemoveFromEventList+0x1a0>)
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3304      	adds	r3, #4
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	6a3a      	ldr	r2, [r7, #32]
 80034cc:	3204      	adds	r2, #4
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	1d1a      	adds	r2, r3, #4
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4a24      	ldr	r2, [pc, #144]	; (8003578 <xTaskRemoveFromEventList+0x1a0>)
 80034e6:	441a      	add	r2, r3
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	615a      	str	r2, [r3, #20]
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f0:	4921      	ldr	r1, [pc, #132]	; (8003578 <xTaskRemoveFromEventList+0x1a0>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	1c59      	adds	r1, r3, #1
 8003500:	481d      	ldr	r0, [pc, #116]	; (8003578 <xTaskRemoveFromEventList+0x1a0>)
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4403      	add	r3, r0
 800350c:	6019      	str	r1, [r3, #0]
 800350e:	e01b      	b.n	8003548 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <xTaskRemoveFromEventList+0x1a4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	61da      	str	r2, [r3, #28]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	621a      	str	r2, [r3, #32]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	6a3a      	ldr	r2, [r7, #32]
 800352a:	3218      	adds	r2, #24
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f103 0218 	add.w	r2, r3, #24
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <xTaskRemoveFromEventList+0x1a4>)
 800353c:	629a      	str	r2, [r3, #40]	; 0x28
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <xTaskRemoveFromEventList+0x1a4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	4a0d      	ldr	r2, [pc, #52]	; (800357c <xTaskRemoveFromEventList+0x1a4>)
 8003546:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <xTaskRemoveFromEventList+0x1a8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	429a      	cmp	r2, r3
 8003554:	d905      	bls.n	8003562 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003556:	2301      	movs	r3, #1
 8003558:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <xTaskRemoveFromEventList+0x1ac>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e001      	b.n	8003566 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003568:	4618      	mov	r0, r3
 800356a:	3728      	adds	r7, #40	; 0x28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200001d0 	.word	0x200001d0
 8003574:	200001b0 	.word	0x200001b0
 8003578:	200000d4 	.word	0x200000d4
 800357c:	20000168 	.word	0x20000168
 8003580:	200000d0 	.word	0x200000d0
 8003584:	200001bc 	.word	0x200001bc

08003588 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <vTaskInternalSetTimeOutState+0x24>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <vTaskInternalSetTimeOutState+0x28>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	605a      	str	r2, [r3, #4]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	200001c0 	.word	0x200001c0
 80035b0:	200001ac 	.word	0x200001ac

080035b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	613b      	str	r3, [r7, #16]
    }
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	60fb      	str	r3, [r7, #12]
    }
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035f6:	f000 ff8d 	bl	8004514 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <xTaskCheckForTimeOut+0xc4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	d102      	bne.n	800361a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	e026      	b.n	8003668 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <xTaskCheckForTimeOut+0xc8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d00a      	beq.n	800363c <xTaskCheckForTimeOut+0x88>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	429a      	cmp	r2, r3
 800362e:	d305      	bcc.n	800363c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e015      	b.n	8003668 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	429a      	cmp	r2, r3
 8003644:	d20b      	bcs.n	800365e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	1ad2      	subs	r2, r2, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ff98 	bl	8003588 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	e004      	b.n	8003668 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003664:	2301      	movs	r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003668:	f000 ff84 	bl	8004574 <vPortExitCritical>

    return xReturn;
 800366c:	69fb      	ldr	r3, [r7, #28]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	200001ac 	.word	0x200001ac
 800367c:	200001c0 	.word	0x200001c0

08003680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <vTaskMissedYield+0x14>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]
}
 800368a:	bf00      	nop
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	200001bc 	.word	0x200001bc

08003698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80036a0:	f000 f852 	bl	8003748 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <prvIdleTask+0x28>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d9f9      	bls.n	80036a0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <prvIdleTask+0x2c>)
 80036ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80036bc:	e7f0      	b.n	80036a0 <prvIdleTask+0x8>
 80036be:	bf00      	nop
 80036c0:	200000d4 	.word	0x200000d4
 80036c4:	e000ed04 	.word	0xe000ed04

080036c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	e00c      	b.n	80036ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <prvInitialiseTaskLists+0x60>)
 80036e0:	4413      	add	r3, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fcb6 	bl	8002054 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3301      	adds	r3, #1
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d9ef      	bls.n	80036d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036f4:	480d      	ldr	r0, [pc, #52]	; (800372c <prvInitialiseTaskLists+0x64>)
 80036f6:	f7fe fcad 	bl	8002054 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036fa:	480d      	ldr	r0, [pc, #52]	; (8003730 <prvInitialiseTaskLists+0x68>)
 80036fc:	f7fe fcaa 	bl	8002054 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003700:	480c      	ldr	r0, [pc, #48]	; (8003734 <prvInitialiseTaskLists+0x6c>)
 8003702:	f7fe fca7 	bl	8002054 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003706:	480c      	ldr	r0, [pc, #48]	; (8003738 <prvInitialiseTaskLists+0x70>)
 8003708:	f7fe fca4 	bl	8002054 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800370c:	480b      	ldr	r0, [pc, #44]	; (800373c <prvInitialiseTaskLists+0x74>)
 800370e:	f7fe fca1 	bl	8002054 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <prvInitialiseTaskLists+0x78>)
 8003714:	4a05      	ldr	r2, [pc, #20]	; (800372c <prvInitialiseTaskLists+0x64>)
 8003716:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <prvInitialiseTaskLists+0x7c>)
 800371a:	4a05      	ldr	r2, [pc, #20]	; (8003730 <prvInitialiseTaskLists+0x68>)
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	200000d4 	.word	0x200000d4
 800372c:	20000138 	.word	0x20000138
 8003730:	2000014c 	.word	0x2000014c
 8003734:	20000168 	.word	0x20000168
 8003738:	2000017c 	.word	0x2000017c
 800373c:	20000194 	.word	0x20000194
 8003740:	20000160 	.word	0x20000160
 8003744:	20000164 	.word	0x20000164

08003748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800374e:	e019      	b.n	8003784 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003750:	f000 fee0 	bl	8004514 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <prvCheckTasksWaitingTermination+0x50>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fd01 	bl	8002168 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <prvCheckTasksWaitingTermination+0x54>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3b01      	subs	r3, #1
 800376c:	4a0b      	ldr	r2, [pc, #44]	; (800379c <prvCheckTasksWaitingTermination+0x54>)
 800376e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <prvCheckTasksWaitingTermination+0x58>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3b01      	subs	r3, #1
 8003776:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <prvCheckTasksWaitingTermination+0x58>)
 8003778:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800377a:	f000 fefb 	bl	8004574 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f810 	bl	80037a4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <prvCheckTasksWaitingTermination+0x58>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e1      	bne.n	8003750 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000017c 	.word	0x2000017c
 800379c:	200001a8 	.word	0x200001a8
 80037a0:	20000190 	.word	0x20000190

080037a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 f855 	bl	8004860 <vPortFree>
            vPortFree( pxTCB );
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f001 f852 	bl	8004860 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <prvResetNextTaskUnblockTime+0x30>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d104      	bne.n	80037dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <prvResetNextTaskUnblockTime+0x34>)
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037da:	e005      	b.n	80037e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <prvResetNextTaskUnblockTime+0x30>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <prvResetNextTaskUnblockTime+0x34>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000160 	.word	0x20000160
 80037f8:	200001c8 	.word	0x200001c8

080037fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <xTaskGetSchedulerState+0x34>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800380a:	2301      	movs	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	e008      	b.n	8003822 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <xTaskGetSchedulerState+0x38>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003818:	2302      	movs	r3, #2
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	e001      	b.n	8003822 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003822:	687b      	ldr	r3, [r7, #4]
    }
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	200001b4 	.word	0x200001b4
 8003834:	200001d0 	.word	0x200001d0

08003838 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	613b      	str	r3, [r7, #16]
    }
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003862:	f000 fe57 	bl	8004514 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <xTaskGenericNotifyWait+0x108>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	3354      	adds	r3, #84	; 0x54
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d022      	beq.n	80038be <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003878:	4b31      	ldr	r3, [pc, #196]	; (8003940 <xTaskGenericNotifyWait+0x108>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	3214      	adds	r2, #20
 8003880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	43d2      	mvns	r2, r2
 8003888:	4011      	ands	r1, r2
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	3214      	adds	r2, #20
 800388e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003892:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <xTaskGenericNotifyWait+0x108>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	3354      	adds	r3, #84	; 0x54
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00b      	beq.n	80038be <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038a6:	2101      	movs	r1, #1
 80038a8:	6a38      	ldr	r0, [r7, #32]
 80038aa:	f000 f981 	bl	8003bb0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80038ae:	4b25      	ldr	r3, [pc, #148]	; (8003944 <xTaskGenericNotifyWait+0x10c>)
 80038b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80038be:	f000 fe59 	bl	8004574 <vPortExitCritical>

        taskENTER_CRITICAL();
 80038c2:	f000 fe27 	bl	8004514 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	2040      	movs	r0, #64	; 0x40
 80038d4:	f001 fe48 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <xTaskGenericNotifyWait+0x108>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	3214      	adds	r2, #20
 80038e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80038ee:	4b14      	ldr	r3, [pc, #80]	; (8003940 <xTaskGenericNotifyWait+0x108>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	3354      	adds	r3, #84	; 0x54
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d002      	beq.n	8003906 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e00e      	b.n	8003924 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <xTaskGenericNotifyWait+0x108>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	3214      	adds	r2, #20
 800390e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	43d2      	mvns	r2, r2
 8003916:	4011      	ands	r1, r2
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	3214      	adds	r2, #20
 800391c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003920:	2301      	movs	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <xTaskGenericNotifyWait+0x108>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	3354      	adds	r3, #84	; 0x54
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003932:	f000 fe1f 	bl	8004574 <vPortExitCritical>

        return xReturn;
 8003936:	697b      	ldr	r3, [r7, #20]
    }
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	200000d0 	.word	0x200000d0
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003948:	b580      	push	{r7, lr}
 800394a:	b090      	sub	sp, #64	; 0x40
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003956:	2301      	movs	r3, #1
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	623b      	str	r3, [r7, #32]
    }
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <xTaskGenericNotify+0x4a>
        __asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	61fb      	str	r3, [r7, #28]
    }
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003996:	f000 fdbd 	bl	8004514 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800399a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	3214      	adds	r2, #20
 80039a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ac:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80039ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4413      	add	r3, r2
 80039b4:	3354      	adds	r3, #84	; 0x54
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80039bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4413      	add	r3, r2
 80039c2:	3354      	adds	r3, #84	; 0x54
 80039c4:	2202      	movs	r2, #2
 80039c6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d83b      	bhi.n	8003a46 <xTaskGenericNotify+0xfe>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <xTaskGenericNotify+0x8c>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	08003a65 	.word	0x08003a65
 80039d8:	080039e9 	.word	0x080039e9
 80039dc:	08003a05 	.word	0x08003a05
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	08003a2b 	.word	0x08003a2b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	3214      	adds	r2, #20
 80039ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	ea42 0103 	orr.w	r1, r2, r3
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	3214      	adds	r2, #20
 80039fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a02:	e032      	b.n	8003a6a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	3214      	adds	r2, #20
 8003a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0e:	1c59      	adds	r1, r3, #1
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	3214      	adds	r2, #20
 8003a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a1a:	e026      	b.n	8003a6a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	3214      	adds	r2, #20
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a28:	e01f      	b.n	8003a6a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d006      	beq.n	8003a40 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	3214      	adds	r2, #20
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003a3e:	e014      	b.n	8003a6a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003a44:	e011      	b.n	8003a6a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003a46:	4b55      	ldr	r3, [pc, #340]	; (8003b9c <xTaskGenericNotify+0x254>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <xTaskGenericNotify+0x120>
        __asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	61bb      	str	r3, [r7, #24]
    }
 8003a60:	bf00      	nop
 8003a62:	e7fe      	b.n	8003a62 <xTaskGenericNotify+0x11a>
                    break;
 8003a64:	bf00      	nop
 8003a66:	e000      	b.n	8003a6a <xTaskGenericNotify+0x122>

                    break;
 8003a68:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f002 fa0d 	bl	8005e8c <SEGGER_SYSVIEW_ShrinkId>
 8003a72:	4601      	mov	r1, r0
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	203e      	movs	r0, #62	; 0x3e
 8003a80:	f001 fd72 	bl	8005568 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d17f      	bne.n	8003b8c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a98:	68d2      	ldr	r2, [r2, #12]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa2:	6892      	ldr	r2, [r2, #8]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	3304      	adds	r3, #4
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d103      	bne.n	8003aba <xTaskGenericNotify+0x172>
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	2200      	movs	r2, #0
 8003abe:	615a      	str	r2, [r3, #20]
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	1e5a      	subs	r2, r3, #1
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	4618      	mov	r0, r3
 8003ace:	f002 f99b 	bl	8005e08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <xTaskGenericNotify+0x258>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <xTaskGenericNotify+0x258>)
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	492e      	ldr	r1, [pc, #184]	; (8003ba4 <xTaskGenericNotify+0x25c>)
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	3304      	adds	r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	60da      	str	r2, [r3, #12]
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	3204      	adds	r2, #4
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	1d1a      	adds	r2, r3, #4
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	609a      	str	r2, [r3, #8]
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <xTaskGenericNotify+0x25c>)
 8003b28:	441a      	add	r2, r3
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	615a      	str	r2, [r3, #20]
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	491c      	ldr	r1, [pc, #112]	; (8003ba4 <xTaskGenericNotify+0x25c>)
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	1c59      	adds	r1, r3, #1
 8003b42:	4818      	ldr	r0, [pc, #96]	; (8003ba4 <xTaskGenericNotify+0x25c>)
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4403      	add	r3, r0
 8003b4e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <xTaskGenericNotify+0x226>
        __asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	617b      	str	r3, [r7, #20]
    }
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <xTaskGenericNotify+0x260>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d907      	bls.n	8003b8c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <xTaskGenericNotify+0x264>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b8c:	f000 fcf2 	bl	8004574 <vPortExitCritical>

        return xReturn;
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003b92:	4618      	mov	r0, r3
 8003b94:	3738      	adds	r7, #56	; 0x38
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200001ac 	.word	0x200001ac
 8003ba0:	200001b0 	.word	0x200001b0
 8003ba4:	200000d4 	.word	0x200000d4
 8003ba8:	200000d0 	.word	0x200000d0
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003bba:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc0:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe face 	bl	8002168 <uxListRemove>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	2201      	movs	r2, #1
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43da      	mvns	r2, r3
 8003be0:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xec>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4013      	ands	r3, r2
 8003be6:	4a2d      	ldr	r2, [pc, #180]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xec>)
 8003be8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d124      	bne.n	8003c3c <prvAddCurrentTaskToDelayedList+0x8c>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d021      	beq.n	8003c3c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bf8:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	6892      	ldr	r2, [r2, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	3204      	adds	r2, #4
 8003c1a:	605a      	str	r2, [r3, #4]
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	1d1a      	adds	r2, r3, #4
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	609a      	str	r2, [r3, #8]
 8003c26:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c2c:	615a      	str	r2, [r3, #20]
 8003c2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c3a:	e026      	b.n	8003c8a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d209      	bcs.n	8003c68 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7fe fa48 	bl	80020f6 <vListInsert>
}
 8003c66:	e010      	b.n	8003c8a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7fe fa3e 	bl	80020f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d202      	bcs.n	8003c8a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003c84:	4a09      	ldr	r2, [pc, #36]	; (8003cac <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6013      	str	r3, [r2, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200001ac 	.word	0x200001ac
 8003c98:	200000d0 	.word	0x200000d0
 8003c9c:	200001b0 	.word	0x200001b0
 8003ca0:	20000194 	.word	0x20000194
 8003ca4:	20000164 	.word	0x20000164
 8003ca8:	20000160 	.word	0x20000160
 8003cac:	200001c8 	.word	0x200001c8

08003cb0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003cba:	f000 fa47 	bl	800414c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <xTimerCreateTimerTask+0x54>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <xTimerCreateTimerTask+0x58>)
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	2302      	movs	r3, #2
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cd4:	490d      	ldr	r1, [pc, #52]	; (8003d0c <xTimerCreateTimerTask+0x5c>)
 8003cd6:	480e      	ldr	r0, [pc, #56]	; (8003d10 <xTimerCreateTimerTask+0x60>)
 8003cd8:	f7fe fda0 	bl	800281c <xTaskCreate>
 8003cdc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	603b      	str	r3, [r7, #0]
    }
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003cfa:	687b      	ldr	r3, [r7, #4]
    }
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000204 	.word	0x20000204
 8003d08:	20000208 	.word	0x20000208
 8003d0c:	08006228 	.word	0x08006228
 8003d10:	08003db9 	.word	0x08003db9

08003d14 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d20:	e008      	b.n	8003d34 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	699a      	ldr	r2, [r3, #24]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	18d1      	adds	r1, r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f8dd 	bl	8003f00 <prvInsertTimerInActiveList>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ea      	bne.n	8003d22 <prvReloadTimer+0xe>
        }
    }
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d62:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <prvProcessExpiredTimer+0x5c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe f9f9 	bl	8002168 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff ffc3 	bl	8003d14 <prvReloadTimer>
 8003d8e:	e008      	b.n	8003da2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	4798      	blx	r3
    }
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200001fc 	.word	0x200001fc

08003db8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dc0:	f107 0308 	add.w	r3, r7, #8
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f857 	bl	8003e78 <prvGetNextExpireTime>
 8003dca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f803 	bl	8003ddc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003dd6:	f000 f8d5 	bl	8003f84 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dda:	e7f1      	b.n	8003dc0 <prvTimerTask+0x8>

08003ddc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003de6:	f7fe ffe9 	bl	8002dbc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dea:	f107 0308 	add.w	r3, r7, #8
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f866 	bl	8003ec0 <prvSampleTimeNow>
 8003df4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d130      	bne.n	8003e5e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <prvProcessTimerOrBlockTask+0x3c>
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d806      	bhi.n	8003e18 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e0a:	f7fe ffe5 	bl	8002dd8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ffa1 	bl	8003d58 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e16:	e024      	b.n	8003e62 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <prvProcessTimerOrBlockTask+0x90>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <prvProcessTimerOrBlockTask+0x50>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <prvProcessTimerOrBlockTask+0x52>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <prvProcessTimerOrBlockTask+0x94>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f7fe fcb9 	bl	80027b4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e42:	f7fe ffc9 	bl	8002dd8 <xTaskResumeAll>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <prvProcessTimerOrBlockTask+0x98>)
 8003e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	f3bf 8f6f 	isb	sy
    }
 8003e5c:	e001      	b.n	8003e62 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e5e:	f7fe ffbb 	bl	8002dd8 <xTaskResumeAll>
    }
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000200 	.word	0x20000200
 8003e70:	20000204 	.word	0x20000204
 8003e74:	e000ed04 	.word	0xe000ed04

08003e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <prvGetNextExpireTime+0x44>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <prvGetNextExpireTime+0x16>
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	e000      	b.n	8003e90 <prvGetNextExpireTime+0x18>
 8003e8e:	2200      	movs	r2, #0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d105      	bne.n	8003ea8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e9c:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <prvGetNextExpireTime+0x44>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e001      	b.n	8003eac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003eac:	68fb      	ldr	r3, [r7, #12]
    }
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	200001fc 	.word	0x200001fc

08003ec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ec8:	f7ff f886 	bl	8002fd8 <xTaskGetTickCount>
 8003ecc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <prvSampleTimeNow+0x3c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d205      	bcs.n	8003ee4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ed8:	f000 f912 	bl	8004100 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e002      	b.n	8003eea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003eea:	4a04      	ldr	r2, [pc, #16]	; (8003efc <prvSampleTimeNow+0x3c>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	2000020c 	.word	0x2000020c

08003f00 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d812      	bhi.n	8003f4c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	1ad2      	subs	r2, r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d302      	bcc.n	8003f3a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	e01b      	b.n	8003f72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <prvInsertTimerInActiveList+0x7c>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f7fe f8d6 	bl	80020f6 <vListInsert>
 8003f4a:	e012      	b.n	8003f72 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d206      	bcs.n	8003f62 <prvInsertTimerInActiveList+0x62>
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d302      	bcc.n	8003f62 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	e007      	b.n	8003f72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <prvInsertTimerInActiveList+0x80>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7fe f8c2 	bl	80020f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f72:	697b      	ldr	r3, [r7, #20]
    }
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000200 	.word	0x20000200
 8003f80:	200001fc 	.word	0x200001fc

08003f84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f8a:	e0a6      	b.n	80040da <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f2c0 80a2 	blt.w	80040d8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe f8df 	bl	8002168 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff87 	bl	8003ec0 <prvSampleTimeNow>
 8003fb2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	f200 808e 	bhi.w	80040da <prvProcessReceivedCommands+0x156>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <prvProcessReceivedCommands+0x40>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003fe9 	.word	0x08003fe9
 8003fcc:	08004051 	.word	0x08004051
 8003fd0:	08004065 	.word	0x08004065
 8003fd4:	080040af 	.word	0x080040af
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003fe9 	.word	0x08003fe9
 8003fe0:	08004051 	.word	0x08004051
 8003fe4:	08004065 	.word	0x08004065
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	18d1      	adds	r1, r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	69f8      	ldr	r0, [r7, #28]
 8004008:	f7ff ff7a 	bl	8003f00 <prvInsertTimerInActiveList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d009      	beq.n	8004034 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	4413      	add	r3, r2
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4619      	mov	r1, r3
 800402c:	69f8      	ldr	r0, [r7, #28]
 800402e:	f7ff fe71 	bl	8003d14 <prvReloadTimer>
 8004032:	e008      	b.n	8004046 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	69f8      	ldr	r0, [r7, #28]
 800404c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800404e:	e044      	b.n	80040da <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004062:	e03a      	b.n	80040da <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	b2da      	uxtb	r2, r3
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	617b      	str	r3, [r7, #20]
    }
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	18d1      	adds	r1, r2, r3
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	69f8      	ldr	r0, [r7, #28]
 80040a8:	f7ff ff2a 	bl	8003f00 <prvInsertTimerInActiveList>
                        break;
 80040ac:	e015      	b.n	80040da <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80040bc:	69f8      	ldr	r0, [r7, #28]
 80040be:	f000 fbcf 	bl	8004860 <vPortFree>
 80040c2:	e00a      	b.n	80040da <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040d6:	e000      	b.n	80040da <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040d8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <prvProcessReceivedCommands+0x178>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f107 0108 	add.w	r1, r7, #8
 80040e2:	2200      	movs	r2, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe f971 	bl	80023cc <xQueueReceive>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f47f af4d 	bne.w	8003f8c <prvProcessReceivedCommands+0x8>
        }
    }
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000204 	.word	0x20000204

08004100 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004106:	e009      	b.n	800411c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <prvSwitchTimerLists+0x44>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004112:	f04f 31ff 	mov.w	r1, #4294967295
 8004116:	6838      	ldr	r0, [r7, #0]
 8004118:	f7ff fe1e 	bl	8003d58 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <prvSwitchTimerLists+0x44>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <prvSwitchTimerLists+0x44>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <prvSwitchTimerLists+0x48>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <prvSwitchTimerLists+0x44>)
 8004132:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <prvSwitchTimerLists+0x48>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
    }
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	200001fc 	.word	0x200001fc
 8004148:	20000200 	.word	0x20000200

0800414c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004150:	f000 f9e0 	bl	8004514 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <prvCheckForValidListAndQueue+0x54>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d11d      	bne.n	8004198 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800415c:	4811      	ldr	r0, [pc, #68]	; (80041a4 <prvCheckForValidListAndQueue+0x58>)
 800415e:	f7fd ff79 	bl	8002054 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004162:	4811      	ldr	r0, [pc, #68]	; (80041a8 <prvCheckForValidListAndQueue+0x5c>)
 8004164:	f7fd ff76 	bl	8002054 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <prvCheckForValidListAndQueue+0x60>)
 800416a:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <prvCheckForValidListAndQueue+0x58>)
 800416c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <prvCheckForValidListAndQueue+0x64>)
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <prvCheckForValidListAndQueue+0x5c>)
 8004172:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004174:	2200      	movs	r2, #0
 8004176:	210c      	movs	r1, #12
 8004178:	200a      	movs	r0, #10
 800417a:	f7fe f8af 	bl	80022dc <xQueueGenericCreate>
 800417e:	4603      	mov	r3, r0
 8004180:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <prvCheckForValidListAndQueue+0x54>)
 8004182:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <prvCheckForValidListAndQueue+0x54>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800418c:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <prvCheckForValidListAndQueue+0x54>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4908      	ldr	r1, [pc, #32]	; (80041b4 <prvCheckForValidListAndQueue+0x68>)
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fab8 	bl	8002708 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004198:	f000 f9ec 	bl	8004574 <vPortExitCritical>
    }
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000204 	.word	0x20000204
 80041a4:	200001d4 	.word	0x200001d4
 80041a8:	200001e8 	.word	0x200001e8
 80041ac:	200001fc 	.word	0x200001fc
 80041b0:	20000200 	.word	0x20000200
 80041b4:	08006230 	.word	0x08006230

080041b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3b04      	subs	r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3b04      	subs	r3, #4
 80041d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3b04      	subs	r3, #4
 80041e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041e8:	4a0c      	ldr	r2, [pc, #48]	; (800421c <pxPortInitialiseStack+0x64>)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b14      	subs	r3, #20
 80041f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b04      	subs	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f06f 0202 	mvn.w	r2, #2
 8004206:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3b20      	subs	r3, #32
 800420c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800420e:	68fb      	ldr	r3, [r7, #12]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	08004221 	.word	0x08004221

08004220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <prvTaskExitError+0x54>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d00a      	beq.n	800424a <prvTaskExitError+0x2a>
        __asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60fb      	str	r3, [r7, #12]
    }
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <prvTaskExitError+0x28>
        __asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60bb      	str	r3, [r7, #8]
    }
 800425c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800425e:	bf00      	nop
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0fc      	beq.n	8004260 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	20000010 	.word	0x20000010
	...

08004280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <pxCurrentTCBConst2>)
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	6808      	ldr	r0, [r1, #0]
 8004286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428a:	f380 8809 	msr	PSP, r0
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	4770      	bx	lr
 800429c:	f3af 8000 	nop.w

080042a0 <pxCurrentTCBConst2>:
 80042a0:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop

080042a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80042a8:	4808      	ldr	r0, [pc, #32]	; (80042cc <prvPortStartFirstTask+0x24>)
 80042aa:	6800      	ldr	r0, [r0, #0]
 80042ac:	6800      	ldr	r0, [r0, #0]
 80042ae:	f380 8808 	msr	MSP, r0
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f380 8814 	msr	CONTROL, r0
 80042ba:	b662      	cpsie	i
 80042bc:	b661      	cpsie	f
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	df00      	svc	0
 80042c8:	bf00      	nop
 80042ca:	0000      	.short	0x0000
 80042cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop

080042d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042da:	4b46      	ldr	r3, [pc, #280]	; (80043f4 <xPortStartScheduler+0x120>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a46      	ldr	r2, [pc, #280]	; (80043f8 <xPortStartScheduler+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10a      	bne.n	80042fa <xPortStartScheduler+0x26>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	613b      	str	r3, [r7, #16]
    }
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042fa:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <xPortStartScheduler+0x120>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a3f      	ldr	r2, [pc, #252]	; (80043fc <xPortStartScheduler+0x128>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d10a      	bne.n	800431a <xPortStartScheduler+0x46>
        __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	60fb      	str	r3, [r7, #12]
    }
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800431a:	4b39      	ldr	r3, [pc, #228]	; (8004400 <xPortStartScheduler+0x12c>)
 800431c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	22ff      	movs	r2, #255	; 0xff
 800432a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <xPortStartScheduler+0x130>)
 8004340:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004342:	4b31      	ldr	r3, [pc, #196]	; (8004408 <xPortStartScheduler+0x134>)
 8004344:	2207      	movs	r2, #7
 8004346:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004348:	e009      	b.n	800435e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800434a:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <xPortStartScheduler+0x134>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3b01      	subs	r3, #1
 8004350:	4a2d      	ldr	r2, [pc, #180]	; (8004408 <xPortStartScheduler+0x134>)
 8004352:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	b2db      	uxtb	r3, r3
 800435c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	2b80      	cmp	r3, #128	; 0x80
 8004368:	d0ef      	beq.n	800434a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800436a:	4b27      	ldr	r3, [pc, #156]	; (8004408 <xPortStartScheduler+0x134>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1c3 0307 	rsb	r3, r3, #7
 8004372:	2b04      	cmp	r3, #4
 8004374:	d00a      	beq.n	800438c <xPortStartScheduler+0xb8>
        __asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	60bb      	str	r3, [r7, #8]
    }
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800438c:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <xPortStartScheduler+0x134>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <xPortStartScheduler+0x134>)
 8004394:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004396:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <xPortStartScheduler+0x134>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800439e:	4a1a      	ldr	r2, [pc, #104]	; (8004408 <xPortStartScheduler+0x134>)
 80043a0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043aa:	4b18      	ldr	r3, [pc, #96]	; (800440c <xPortStartScheduler+0x138>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <xPortStartScheduler+0x138>)
 80043b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <xPortStartScheduler+0x138>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a14      	ldr	r2, [pc, #80]	; (800440c <xPortStartScheduler+0x138>)
 80043bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043c2:	f000 f963 	bl	800468c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <xPortStartScheduler+0x13c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043cc:	f000 f982 	bl	80046d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043d0:	4b10      	ldr	r3, [pc, #64]	; (8004414 <xPortStartScheduler+0x140>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0f      	ldr	r2, [pc, #60]	; (8004414 <xPortStartScheduler+0x140>)
 80043d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043dc:	f7ff ff64 	bl	80042a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043e0:	f7fe ff24 	bl	800322c <vTaskSwitchContext>
    prvTaskExitError();
 80043e4:	f7ff ff1c 	bl	8004220 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	e000ed00 	.word	0xe000ed00
 80043f8:	410fc271 	.word	0x410fc271
 80043fc:	410fc270 	.word	0x410fc270
 8004400:	e000e400 	.word	0xe000e400
 8004404:	20000210 	.word	0x20000210
 8004408:	20000214 	.word	0x20000214
 800440c:	e000ed20 	.word	0xe000ed20
 8004410:	20000010 	.word	0x20000010
 8004414:	e000ef34 	.word	0xe000ef34

08004418 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800441e:	4b37      	ldr	r3, [pc, #220]	; (80044fc <vInitPrioGroupValue+0xe4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a37      	ldr	r2, [pc, #220]	; (8004500 <vInitPrioGroupValue+0xe8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d10a      	bne.n	800443e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	613b      	str	r3, [r7, #16]
    }
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800443e:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <vInitPrioGroupValue+0xe4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a30      	ldr	r2, [pc, #192]	; (8004504 <vInitPrioGroupValue+0xec>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10a      	bne.n	800445e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
    }
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <vInitPrioGroupValue+0xf0>)
 8004460:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b22      	ldr	r3, [pc, #136]	; (800450c <vInitPrioGroupValue+0xf4>)
 8004484:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <vInitPrioGroupValue+0xf8>)
 8004488:	2207      	movs	r2, #7
 800448a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800448c:	e009      	b.n	80044a2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <vInitPrioGroupValue+0xf8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <vInitPrioGroupValue+0xf8>)
 8004496:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b80      	cmp	r3, #128	; 0x80
 80044ac:	d0ef      	beq.n	800448e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <vInitPrioGroupValue+0xf8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d00a      	beq.n	80044d0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60bb      	str	r3, [r7, #8]
    }
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <vInitPrioGroupValue+0xf8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <vInitPrioGroupValue+0xf8>)
 80044d8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <vInitPrioGroupValue+0xf8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <vInitPrioGroupValue+0xf8>)
 80044e4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	e000ed00 	.word	0xe000ed00
 8004500:	410fc271 	.word	0x410fc271
 8004504:	410fc270 	.word	0x410fc270
 8004508:	e000e400 	.word	0xe000e400
 800450c:	20000210 	.word	0x20000210
 8004510:	20000214 	.word	0x20000214

08004514 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
        __asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	607b      	str	r3, [r7, #4]
    }
 800452c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <vPortEnterCritical+0x58>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	4a0d      	ldr	r2, [pc, #52]	; (800456c <vPortEnterCritical+0x58>)
 8004536:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <vPortEnterCritical+0x58>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d10f      	bne.n	8004560 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <vPortEnterCritical+0x5c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <vPortEnterCritical+0x4c>
        __asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	603b      	str	r3, [r7, #0]
    }
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <vPortEnterCritical+0x4a>
    }
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20000010 	.word	0x20000010
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <vPortExitCritical+0x50>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <vPortExitCritical+0x24>
        __asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	607b      	str	r3, [r7, #4]
    }
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <vPortExitCritical+0x50>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3b01      	subs	r3, #1
 800459e:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <vPortExitCritical+0x50>)
 80045a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <vPortExitCritical+0x50>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <vPortExitCritical+0x42>
 80045aa:	2300      	movs	r3, #0
 80045ac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80045b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000010 	.word	0x20000010
	...

080045d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045d0:	f3ef 8009 	mrs	r0, PSP
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <pxCurrentTCBConst>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f01e 0f10 	tst.w	lr, #16
 80045e0:	bf08      	it	eq
 80045e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	6010      	str	r0, [r2, #0]
 80045ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045f4:	f380 8811 	msr	BASEPRI, r0
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f7fe fe14 	bl	800322c <vTaskSwitchContext>
 8004604:	f04f 0000 	mov.w	r0, #0
 8004608:	f380 8811 	msr	BASEPRI, r0
 800460c:	bc09      	pop	{r0, r3}
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	6808      	ldr	r0, [r1, #0]
 8004612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004616:	f01e 0f10 	tst.w	lr, #16
 800461a:	bf08      	it	eq
 800461c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004620:	f380 8809 	msr	PSP, r0
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst>:
 8004630:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
    }
 8004650:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004652:	f001 fabf 	bl	8005bd4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004656:	f7fe fccf 	bl	8002ff8 <xTaskIncrementTick>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d006      	beq.n	800466e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004660:	f001 fb16 	bl	8005c90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004664:	4b08      	ldr	r3, [pc, #32]	; (8004688 <SysTick_Handler+0x50>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e001      	b.n	8004672 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800466e:	f001 faf3 	bl	8005c58 <SEGGER_SYSVIEW_RecordExitISR>
 8004672:	2300      	movs	r3, #0
 8004674:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f383 8811 	msr	BASEPRI, r3
    }
 800467c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <vPortSetupTimerInterrupt+0x34>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <vPortSetupTimerInterrupt+0x38>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <vPortSetupTimerInterrupt+0x3c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <vPortSetupTimerInterrupt+0x40>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <vPortSetupTimerInterrupt+0x44>)
 80046aa:	3b01      	subs	r3, #1
 80046ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ae:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <vPortSetupTimerInterrupt+0x34>)
 80046b0:	2207      	movs	r2, #7
 80046b2:	601a      	str	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	e000e010 	.word	0xe000e010
 80046c4:	e000e018 	.word	0xe000e018
 80046c8:	20000000 	.word	0x20000000
 80046cc:	10624dd3 	.word	0x10624dd3
 80046d0:	e000e014 	.word	0xe000e014

080046d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046e4 <vPortEnableVFP+0x10>
 80046d8:	6801      	ldr	r1, [r0, #0]
 80046da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046de:	6001      	str	r1, [r0, #0]
 80046e0:	4770      	bx	lr
 80046e2:	0000      	.short	0x0000
 80046e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop

080046ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80046f8:	f7fe fb60 	bl	8002dbc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80046fc:	4b53      	ldr	r3, [pc, #332]	; (800484c <pvPortMalloc+0x160>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004704:	f000 f908 	bl	8004918 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d012      	beq.n	8004734 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800470e:	2208      	movs	r2, #8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	3308      	adds	r3, #8
 800471a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	43db      	mvns	r3, r3
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	429a      	cmp	r2, r3
 8004724:	d804      	bhi.n	8004730 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	4413      	add	r3, r2
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	e001      	b.n	8004734 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	db70      	blt.n	800481c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d06d      	beq.n	800481c <pvPortMalloc+0x130>
 8004740:	4b43      	ldr	r3, [pc, #268]	; (8004850 <pvPortMalloc+0x164>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d868      	bhi.n	800481c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800474a:	4b42      	ldr	r3, [pc, #264]	; (8004854 <pvPortMalloc+0x168>)
 800474c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <pvPortMalloc+0x168>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004754:	e004      	b.n	8004760 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d903      	bls.n	8004772 <pvPortMalloc+0x86>
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f1      	bne.n	8004756 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <pvPortMalloc+0x160>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	429a      	cmp	r2, r3
 800477a:	d04f      	beq.n	800481c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2208      	movs	r2, #8
 8004782:	4413      	add	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	1ad2      	subs	r2, r2, r3
 8004796:	2308      	movs	r3, #8
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	429a      	cmp	r2, r3
 800479c:	d91f      	bls.n	80047de <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800479e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <pvPortMalloc+0xda>
        __asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
    }
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	1ad2      	subs	r2, r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047d8:	6978      	ldr	r0, [r7, #20]
 80047da:	f000 f8f9 	bl	80049d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047de:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <pvPortMalloc+0x164>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	4a19      	ldr	r2, [pc, #100]	; (8004850 <pvPortMalloc+0x164>)
 80047ea:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047ec:	4b18      	ldr	r3, [pc, #96]	; (8004850 <pvPortMalloc+0x164>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <pvPortMalloc+0x16c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d203      	bcs.n	8004800 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047f8:	4b15      	ldr	r3, [pc, #84]	; (8004850 <pvPortMalloc+0x164>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a16      	ldr	r2, [pc, #88]	; (8004858 <pvPortMalloc+0x16c>)
 80047fe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004812:	4b12      	ldr	r3, [pc, #72]	; (800485c <pvPortMalloc+0x170>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3301      	adds	r3, #1
 8004818:	4a10      	ldr	r2, [pc, #64]	; (800485c <pvPortMalloc+0x170>)
 800481a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800481c:	f7fe fadc 	bl	8002dd8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <pvPortMalloc+0x154>
        __asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	60fb      	str	r3, [r7, #12]
    }
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <pvPortMalloc+0x152>
    return pvReturn;
 8004840:	69fb      	ldr	r3, [r7, #28]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3728      	adds	r7, #40	; 0x28
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20012e20 	.word	0x20012e20
 8004850:	20012e24 	.word	0x20012e24
 8004854:	20012e18 	.word	0x20012e18
 8004858:	20012e28 	.word	0x20012e28
 800485c:	20012e2c 	.word	0x20012e2c

08004860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d049      	beq.n	8004906 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004872:	2308      	movs	r3, #8
 8004874:	425b      	negs	r3, r3
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4413      	add	r3, r2
 800487a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	db0a      	blt.n	800489e <vPortFree+0x3e>
        __asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60fb      	str	r3, [r7, #12]
    }
 800489a:	bf00      	nop
 800489c:	e7fe      	b.n	800489c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <vPortFree+0x5c>
        __asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	60bb      	str	r3, [r7, #8]
    }
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	0fdb      	lsrs	r3, r3, #31
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01c      	beq.n	8004906 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d118      	bne.n	8004906 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80048e0:	f7fe fa6c 	bl	8002dbc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <vPortFree+0xb0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4413      	add	r3, r2
 80048ee:	4a08      	ldr	r2, [pc, #32]	; (8004910 <vPortFree+0xb0>)
 80048f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048f2:	6938      	ldr	r0, [r7, #16]
 80048f4:	f000 f86c 	bl	80049d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048f8:	4b06      	ldr	r3, [pc, #24]	; (8004914 <vPortFree+0xb4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3301      	adds	r3, #1
 80048fe:	4a05      	ldr	r2, [pc, #20]	; (8004914 <vPortFree+0xb4>)
 8004900:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004902:	f7fe fa69 	bl	8002dd8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20012e24 	.word	0x20012e24
 8004914:	20012e30 	.word	0x20012e30

08004918 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800491e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004922:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004924:	4b25      	ldr	r3, [pc, #148]	; (80049bc <prvHeapInit+0xa4>)
 8004926:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00c      	beq.n	800494c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3307      	adds	r3, #7
 8004936:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0307 	bic.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <prvHeapInit+0xa4>)
 8004948:	4413      	add	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004950:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <prvHeapInit+0xa8>)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004956:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <prvHeapInit+0xa8>)
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4413      	add	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004964:	2208      	movs	r2, #8
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <prvHeapInit+0xac>)
 8004978:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <prvHeapInit+0xac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004982:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <prvHeapInit+0xac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <prvHeapInit+0xac>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <prvHeapInit+0xb0>)
 80049a6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <prvHeapInit+0xb4>)
 80049ae:	6013      	str	r3, [r2, #0]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	20000218 	.word	0x20000218
 80049c0:	20012e18 	.word	0x20012e18
 80049c4:	20012e20 	.word	0x20012e20
 80049c8:	20012e28 	.word	0x20012e28
 80049cc:	20012e24 	.word	0x20012e24

080049d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049d8:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <prvInsertBlockIntoFreeList+0xac>)
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e002      	b.n	80049e4 <prvInsertBlockIntoFreeList+0x14>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d8f7      	bhi.n	80049de <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	4413      	add	r3, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d108      	bne.n	8004a12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	441a      	add	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	441a      	add	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d118      	bne.n	8004a58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <prvInsertBlockIntoFreeList+0xb0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d00d      	beq.n	8004a4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	441a      	add	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e008      	b.n	8004a60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <prvInsertBlockIntoFreeList+0xb0>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e003      	b.n	8004a60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d002      	beq.n	8004a6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20012e18 	.word	0x20012e18
 8004a80:	20012e20 	.word	0x20012e20

08004a84 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004a92:	2205      	movs	r2, #5
 8004a94:	492b      	ldr	r1, [pc, #172]	; (8004b44 <SYSVIEW_AddTask+0xc0>)
 8004a96:	68b8      	ldr	r0, [r7, #8]
 8004a98:	f001 fb64 	bl	8006164 <memcmp>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d04b      	beq.n	8004b3a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004aa2:	4b29      	ldr	r3, [pc, #164]	; (8004b48 <SYSVIEW_AddTask+0xc4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b07      	cmp	r3, #7
 8004aa8:	d903      	bls.n	8004ab2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004aaa:	4828      	ldr	r0, [pc, #160]	; (8004b4c <SYSVIEW_AddTask+0xc8>)
 8004aac:	f001 fada 	bl	8006064 <SEGGER_SYSVIEW_Warn>
    return;
 8004ab0:	e044      	b.n	8004b3c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ab2:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <SYSVIEW_AddTask+0xc4>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4926      	ldr	r1, [pc, #152]	; (8004b50 <SYSVIEW_AddTask+0xcc>)
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <SYSVIEW_AddTask+0xc4>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4921      	ldr	r1, [pc, #132]	; (8004b50 <SYSVIEW_AddTask+0xcc>)
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004adc:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <SYSVIEW_AddTask+0xc4>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	491b      	ldr	r1, [pc, #108]	; (8004b50 <SYSVIEW_AddTask+0xcc>)
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	3308      	adds	r3, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <SYSVIEW_AddTask+0xc4>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4916      	ldr	r1, [pc, #88]	; (8004b50 <SYSVIEW_AddTask+0xcc>)
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	330c      	adds	r3, #12
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <SYSVIEW_AddTask+0xc4>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4910      	ldr	r1, [pc, #64]	; (8004b50 <SYSVIEW_AddTask+0xcc>)
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3310      	adds	r3, #16
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <SYSVIEW_AddTask+0xc4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <SYSVIEW_AddTask+0xc4>)
 8004b26:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f8ca 	bl	8004ccc <SYSVIEW_SendTaskInfo>
 8004b38:	e000      	b.n	8004b3c <SYSVIEW_AddTask+0xb8>
    return;
 8004b3a:	bf00      	nop

}
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	08006238 	.word	0x08006238
 8004b48:	20012ed4 	.word	0x20012ed4
 8004b4c:	08006240 	.word	0x08006240
 8004b50:	20012e34 	.word	0x20012e34

08004b54 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004b5c:	4b59      	ldr	r3, [pc, #356]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80ab 	beq.w	8004cbc <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e00d      	b.n	8004b88 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004b6c:	4956      	ldr	r1, [pc, #344]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d008      	beq.n	8004b94 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	4b4e      	ldr	r3, [pc, #312]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d3ec      	bcc.n	8004b6c <SYSVIEW_DeleteTask+0x18>
 8004b92:	e000      	b.n	8004b96 <SYSVIEW_DeleteTask+0x42>
      break;
 8004b94:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004b96:	4b4b      	ldr	r3, [pc, #300]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d111      	bne.n	8004bc6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4a46      	ldr	r2, [pc, #280]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004bae:	4413      	add	r3, r2
 8004bb0:	2214      	movs	r2, #20
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 faf3 	bl	80061a0 <memset>
    _NumTasks--;
 8004bba:	4b42      	ldr	r3, [pc, #264]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	4a40      	ldr	r2, [pc, #256]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e07b      	b.n	8004cbe <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004bc6:	4b3f      	ldr	r3, [pc, #252]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d276      	bcs.n	8004cbe <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004bd0:	4b3c      	ldr	r3, [pc, #240]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	493c      	ldr	r1, [pc, #240]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	4838      	ldr	r0, [pc, #224]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4403      	add	r3, r0
 8004bf2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004bf4:	4b33      	ldr	r3, [pc, #204]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	1e5a      	subs	r2, r3, #1
 8004bfa:	4933      	ldr	r1, [pc, #204]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	3304      	adds	r3, #4
 8004c08:	6819      	ldr	r1, [r3, #0]
 8004c0a:	482f      	ldr	r0, [pc, #188]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4403      	add	r3, r0
 8004c18:	3304      	adds	r3, #4
 8004c1a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004c1c:	4b29      	ldr	r3, [pc, #164]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	4929      	ldr	r1, [pc, #164]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3308      	adds	r3, #8
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	4825      	ldr	r0, [pc, #148]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4403      	add	r3, r0
 8004c40:	3308      	adds	r3, #8
 8004c42:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004c44:	4b1f      	ldr	r3, [pc, #124]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	491f      	ldr	r1, [pc, #124]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	330c      	adds	r3, #12
 8004c58:	6819      	ldr	r1, [r3, #0]
 8004c5a:	481b      	ldr	r0, [pc, #108]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4403      	add	r3, r0
 8004c68:	330c      	adds	r3, #12
 8004c6a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004c6c:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	4915      	ldr	r1, [pc, #84]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3310      	adds	r3, #16
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	4811      	ldr	r0, [pc, #68]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4403      	add	r3, r0
 8004c90:	3310      	adds	r3, #16
 8004c92:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	1e5a      	subs	r2, r3, #1
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <SYSVIEW_DeleteTask+0x174>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	2214      	movs	r2, #20
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 fa78 	bl	80061a0 <memset>
    _NumTasks--;
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <SYSVIEW_DeleteTask+0x170>)
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	e000      	b.n	8004cbe <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004cbc:	bf00      	nop
  }
}
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20012ed4 	.word	0x20012ed4
 8004cc8:	20012e34 	.word	0x20012e34

08004ccc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	2214      	movs	r2, #20
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 fa5c 	bl	80061a0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fe3d 	bl	8005980 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d06:	bf00      	nop
 8004d08:	3728      	adds	r7, #40	; 0x28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <_DoInit+0x98>)
 8004d18:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2203      	movs	r2, #3
 8004d24:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a20      	ldr	r2, [pc, #128]	; (8004dac <_DoInit+0x9c>)
 8004d2a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a20      	ldr	r2, [pc, #128]	; (8004db0 <_DoInit+0xa0>)
 8004d30:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d38:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <_DoInit+0x9c>)
 8004d50:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <_DoInit+0xa4>)
 8004d56:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3307      	adds	r3, #7
 8004d74:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <_DoInit+0xa8>)
 8004d76:	6810      	ldr	r0, [r2, #0]
 8004d78:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d7a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <_DoInit+0xac>)
 8004d82:	6810      	ldr	r0, [r2, #0]
 8004d84:	6018      	str	r0, [r3, #0]
 8004d86:	8891      	ldrh	r1, [r2, #4]
 8004d88:	7992      	ldrb	r2, [r2, #6]
 8004d8a:	8099      	strh	r1, [r3, #4]
 8004d8c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d8e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d98:	f3bf 8f5f 	dmb	sy
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20012ed8 	.word	0x20012ed8
 8004dac:	08006290 	.word	0x08006290
 8004db0:	20012f80 	.word	0x20012f80
 8004db4:	20013380 	.word	0x20013380
 8004db8:	0800629c 	.word	0x0800629c
 8004dbc:	080062a0 	.word	0x080062a0

08004dc0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	; 0x30
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004dcc:	4b3e      	ldr	r3, [pc, #248]	; (8004ec8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004dce:	623b      	str	r3, [r7, #32]
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <SEGGER_RTT_ReadNoLock+0x1e>
 8004dda:	f7ff ff99 	bl	8004d10 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4613      	mov	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	4413      	add	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	3360      	adds	r3, #96	; 0x60
 8004dea:	4a37      	ldr	r2, [pc, #220]	; (8004ec8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004dec:	4413      	add	r3, r2
 8004dee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e00:	2300      	movs	r3, #0
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d92b      	bls.n	8004e64 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	bf28      	it	cs
 8004e1e:	4613      	movcs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	4413      	add	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	6939      	ldr	r1, [r7, #16]
 8004e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e32:	f001 f9a7 	bl	8006184 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	4413      	add	r3, r2
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4413      	add	r3, r2
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d101      	bne.n	8004e64 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4293      	cmp	r3, r2
 8004e72:	bf28      	it	cs
 8004e74:	4613      	movcs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d019      	beq.n	8004eb2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	4413      	add	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	6939      	ldr	r1, [r7, #16]
 8004e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e8e:	f001 f979 	bl	8006184 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	4413      	add	r3, r2
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ebc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3730      	adds	r7, #48	; 0x30
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20012ed8 	.word	0x20012ed8

08004ecc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004edc:	e002      	b.n	8004ee4 <_EncodeStr+0x18>
    Len++;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f6      	bne.n	8004ede <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d901      	bls.n	8004efc <_EncodeStr+0x30>
    Len = Limit;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2bfe      	cmp	r3, #254	; 0xfe
 8004f00:	d806      	bhi.n	8004f10 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	60fa      	str	r2, [r7, #12]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e011      	b.n	8004f34 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	60fa      	str	r2, [r7, #12]
 8004f16:	22ff      	movs	r2, #255	; 0xff
 8004f18:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	60fa      	str	r2, [r7, #12]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	0a19      	lsrs	r1, r3, #8
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	60fa      	str	r2, [r7, #12]
 8004f30:	b2ca      	uxtb	r2, r1
 8004f32:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f38:	e00a      	b.n	8004f50 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	1c53      	adds	r3, r2, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1c59      	adds	r1, r3, #1
 8004f44:	60f9      	str	r1, [r7, #12]
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	701a      	strb	r2, [r3, #0]
    n++;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d3f0      	bcc.n	8004f3a <_EncodeStr+0x6e>
  }
  return pPayload;
 8004f58:	68fb      	ldr	r3, [r7, #12]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3304      	adds	r3, #4
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <_HandleIncomingPacket+0xe0>)
 8004f88:	7e1b      	ldrb	r3, [r3, #24]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	1cfb      	adds	r3, r7, #3
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4619      	mov	r1, r3
 8004f92:	f7ff ff15 	bl	8004dc0 <SEGGER_RTT_ReadNoLock>
 8004f96:	4603      	mov	r3, r0
 8004f98:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dd54      	ble.n	800504a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d032      	beq.n	800500c <_HandleIncomingPacket+0x8c>
 8004fa6:	2b80      	cmp	r3, #128	; 0x80
 8004fa8:	dc42      	bgt.n	8005030 <_HandleIncomingPacket+0xb0>
 8004faa:	2b07      	cmp	r3, #7
 8004fac:	dc16      	bgt.n	8004fdc <_HandleIncomingPacket+0x5c>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	dd3e      	ble.n	8005030 <_HandleIncomingPacket+0xb0>
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	2b06      	cmp	r3, #6
 8004fb6:	d83b      	bhi.n	8005030 <_HandleIncomingPacket+0xb0>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <_HandleIncomingPacket+0x40>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fe3 	.word	0x08004fe3
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004fef 	.word	0x08004fef
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffb 	.word	0x08004ffb
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	08005007 	.word	0x08005007
 8004fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8004fde:	d036      	beq.n	800504e <_HandleIncomingPacket+0xce>
 8004fe0:	e026      	b.n	8005030 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004fe2:	f000 fb53 	bl	800568c <SEGGER_SYSVIEW_Start>
      break;
 8004fe6:	e037      	b.n	8005058 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004fe8:	f000 fc0a 	bl	8005800 <SEGGER_SYSVIEW_Stop>
      break;
 8004fec:	e034      	b.n	8005058 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004fee:	f000 fdbf 	bl	8005b70 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004ff2:	e031      	b.n	8005058 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ff4:	f000 fda8 	bl	8005b48 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ff8:	e02e      	b.n	8005058 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004ffa:	f000 fc27 	bl	800584c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004ffe:	e02b      	b.n	8005058 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005000:	f000 fff2 	bl	8005fe8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005004:	e028      	b.n	8005058 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005006:	f000 ffd1 	bl	8005fac <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800500a:	e025      	b.n	8005058 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <_HandleIncomingPacket+0xe0>)
 800500e:	7e1b      	ldrb	r3, [r3, #24]
 8005010:	4618      	mov	r0, r3
 8005012:	1cfb      	adds	r3, r7, #3
 8005014:	2201      	movs	r2, #1
 8005016:	4619      	mov	r1, r3
 8005018:	f7ff fed2 	bl	8004dc0 <SEGGER_RTT_ReadNoLock>
 800501c:	4603      	mov	r3, r0
 800501e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	dd15      	ble.n	8005052 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	4618      	mov	r0, r3
 800502a:	f000 ff3f 	bl	8005eac <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800502e:	e010      	b.n	8005052 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	b25b      	sxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	da0e      	bge.n	8005056 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <_HandleIncomingPacket+0xe0>)
 800503a:	7e1b      	ldrb	r3, [r3, #24]
 800503c:	4618      	mov	r0, r3
 800503e:	1cfb      	adds	r3, r7, #3
 8005040:	2201      	movs	r2, #1
 8005042:	4619      	mov	r1, r3
 8005044:	f7ff febc 	bl	8004dc0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005048:	e005      	b.n	8005056 <_HandleIncomingPacket+0xd6>
    }
  }
 800504a:	bf00      	nop
 800504c:	e004      	b.n	8005058 <_HandleIncomingPacket+0xd8>
      break;
 800504e:	bf00      	nop
 8005050:	e002      	b.n	8005058 <_HandleIncomingPacket+0xd8>
      break;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <_HandleIncomingPacket+0xd8>
      break;
 8005056:	bf00      	nop
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20013390 	.word	0x20013390

08005064 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	; 0x30
 8005068:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800506a:	2301      	movs	r3, #1
 800506c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	3301      	adds	r3, #1
 8005072:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005078:	4b31      	ldr	r3, [pc, #196]	; (8005140 <_TrySendOverflowPacket+0xdc>)
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
 800507e:	e00b      	b.n	8005098 <_TrySendOverflowPacket+0x34>
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	62f9      	str	r1, [r7, #44]	; 0x2c
 800508a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	2b7f      	cmp	r3, #127	; 0x7f
 800509c:	d8f0      	bhi.n	8005080 <_TrySendOverflowPacket+0x1c>
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050ae:	4b25      	ldr	r3, [pc, #148]	; (8005144 <_TrySendOverflowPacket+0xe0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80050b4:	4b22      	ldr	r3, [pc, #136]	; (8005140 <_TrySendOverflowPacket+0xdc>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	e00b      	b.n	80050e0 <_TrySendOverflowPacket+0x7c>
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	6279      	str	r1, [r7, #36]	; 0x24
 80050d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	09db      	lsrs	r3, r3, #7
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	2b7f      	cmp	r3, #127	; 0x7f
 80050e4:	d8f0      	bhi.n	80050c8 <_TrySendOverflowPacket+0x64>
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	627a      	str	r2, [r7, #36]	; 0x24
 80050ec:	6a3a      	ldr	r2, [r7, #32]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <_TrySendOverflowPacket+0xdc>)
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	4618      	mov	r0, r3
 80050fc:	1d3b      	adds	r3, r7, #4
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	461a      	mov	r2, r3
 8005104:	1d3b      	adds	r3, r7, #4
 8005106:	4619      	mov	r1, r3
 8005108:	f7fb f86a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800510c:	4603      	mov	r3, r0
 800510e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005116:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <_TrySendOverflowPacket+0xdc>)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <_TrySendOverflowPacket+0xdc>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	3b01      	subs	r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <_TrySendOverflowPacket+0xdc>)
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e004      	b.n	8005134 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800512a:	4b05      	ldr	r3, [pc, #20]	; (8005140 <_TrySendOverflowPacket+0xdc>)
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	3301      	adds	r3, #1
 8005130:	4a03      	ldr	r2, [pc, #12]	; (8005140 <_TrySendOverflowPacket+0xdc>)
 8005132:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005134:	693b      	ldr	r3, [r7, #16]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3730      	adds	r7, #48	; 0x30
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20013390 	.word	0x20013390
 8005144:	e0001004 	.word	0xe0001004

08005148 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005154:	4b6c      	ldr	r3, [pc, #432]	; (8005308 <_SendPacket+0x1c0>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d010      	beq.n	800517e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800515c:	4b6a      	ldr	r3, [pc, #424]	; (8005308 <_SendPacket+0x1c0>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80a3 	beq.w	80052ac <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005166:	4b68      	ldr	r3, [pc, #416]	; (8005308 <_SendPacket+0x1c0>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d109      	bne.n	8005182 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800516e:	f7ff ff79 	bl	8005064 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005172:	4b65      	ldr	r3, [pc, #404]	; (8005308 <_SendPacket+0x1c0>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b01      	cmp	r3, #1
 8005178:	f040 809a 	bne.w	80052b0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800517c:	e001      	b.n	8005182 <_SendPacket+0x3a>
    goto Send;
 800517e:	bf00      	nop
 8005180:	e000      	b.n	8005184 <_SendPacket+0x3c>
Send:
 8005182:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b1f      	cmp	r3, #31
 8005188:	d809      	bhi.n	800519e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800518a:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <_SendPacket+0x1c0>)
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 808b 	bne.w	80052b4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b17      	cmp	r3, #23
 80051a2:	d807      	bhi.n	80051b4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e03d      	b.n	8005230 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b7f      	cmp	r3, #127	; 0x7f
 80051c0:	d912      	bls.n	80051e8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	09da      	lsrs	r2, r3, #7
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	3a01      	subs	r2, #1
 80051da:	60fa      	str	r2, [r7, #12]
 80051dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e006      	b.n	80051f6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b7f      	cmp	r3, #127	; 0x7f
 80051fa:	d912      	bls.n	8005222 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	09da      	lsrs	r2, r3, #7
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3b01      	subs	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	3a01      	subs	r2, #1
 8005214:	60fa      	str	r2, [r7, #12]
 8005216:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800521a:	b2da      	uxtb	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e006      	b.n	8005230 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b01      	subs	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	b2da      	uxtb	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005230:	4b36      	ldr	r3, [pc, #216]	; (800530c <_SendPacket+0x1c4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005236:	4b34      	ldr	r3, [pc, #208]	; (8005308 <_SendPacket+0x1c0>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	e00b      	b.n	8005262 <_SendPacket+0x11a>
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	1c59      	adds	r1, r3, #1
 8005252:	6279      	str	r1, [r7, #36]	; 0x24
 8005254:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	09db      	lsrs	r3, r3, #7
 8005260:	623b      	str	r3, [r7, #32]
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	2b7f      	cmp	r3, #127	; 0x7f
 8005266:	d8f0      	bhi.n	800524a <_SendPacket+0x102>
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	627a      	str	r2, [r7, #36]	; 0x24
 800526e:	6a3a      	ldr	r2, [r7, #32]
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005278:	4b23      	ldr	r3, [pc, #140]	; (8005308 <_SendPacket+0x1c0>)
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	4618      	mov	r0, r3
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	461a      	mov	r2, r3
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	f7fa ffaa 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800528c:	4603      	mov	r3, r0
 800528e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005296:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <_SendPacket+0x1c0>)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	60d3      	str	r3, [r2, #12]
 800529c:	e00b      	b.n	80052b6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800529e:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <_SendPacket+0x1c0>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	3301      	adds	r3, #1
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4b18      	ldr	r3, [pc, #96]	; (8005308 <_SendPacket+0x1c0>)
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e004      	b.n	80052b6 <_SendPacket+0x16e>
    goto SendDone;
 80052ac:	bf00      	nop
 80052ae:	e002      	b.n	80052b6 <_SendPacket+0x16e>
      goto SendDone;
 80052b0:	bf00      	nop
 80052b2:	e000      	b.n	80052b6 <_SendPacket+0x16e>
      goto SendDone;
 80052b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <_SendPacket+0x1c0>)
 80052b8:	7e1b      	ldrb	r3, [r3, #24]
 80052ba:	4619      	mov	r1, r3
 80052bc:	4a14      	ldr	r2, [pc, #80]	; (8005310 <_SendPacket+0x1c8>)
 80052be:	460b      	mov	r3, r1
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	440b      	add	r3, r1
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4413      	add	r3, r2
 80052c8:	336c      	adds	r3, #108	; 0x6c
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <_SendPacket+0x1c0>)
 80052ce:	7e1b      	ldrb	r3, [r3, #24]
 80052d0:	4618      	mov	r0, r3
 80052d2:	490f      	ldr	r1, [pc, #60]	; (8005310 <_SendPacket+0x1c8>)
 80052d4:	4603      	mov	r3, r0
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	4403      	add	r3, r0
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	3370      	adds	r3, #112	; 0x70
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d00b      	beq.n	80052fe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <_SendPacket+0x1c0>)
 80052e8:	789b      	ldrb	r3, [r3, #2]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d107      	bne.n	80052fe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <_SendPacket+0x1c0>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80052f4:	f7ff fe44 	bl	8004f80 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80052f8:	4b03      	ldr	r3, [pc, #12]	; (8005308 <_SendPacket+0x1c0>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80052fe:	bf00      	nop
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20013390 	.word	0x20013390
 800530c:	e0001004 	.word	0xe0001004
 8005310:	20012ed8 	.word	0x20012ed8

08005314 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800531c:	f3ef 8311 	mrs	r3, BASEPRI
 8005320:	f04f 0120 	mov.w	r1, #32
 8005324:	f381 8811 	msr	BASEPRI, r1
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	4808      	ldr	r0, [pc, #32]	; (800534c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800532c:	f7ff fe1b 	bl	8004f66 <_PreparePacket>
 8005330:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	68b8      	ldr	r0, [r7, #8]
 8005338:	f7ff ff06 	bl	8005148 <_SendPacket>
  RECORD_END();
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f383 8811 	msr	BASEPRI, r3
}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	200133c0 	.word	0x200133c0

08005350 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800535a:	f3ef 8311 	mrs	r3, BASEPRI
 800535e:	f04f 0120 	mov.w	r1, #32
 8005362:	f381 8811 	msr	BASEPRI, r1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	4816      	ldr	r0, [pc, #88]	; (80053c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800536a:	f7ff fdfc 	bl	8004f66 <_PreparePacket>
 800536e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	e00b      	b.n	8005396 <SEGGER_SYSVIEW_RecordU32+0x46>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	1c59      	adds	r1, r3, #1
 8005386:	61f9      	str	r1, [r7, #28]
 8005388:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	09db      	lsrs	r3, r3, #7
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b7f      	cmp	r3, #127	; 0x7f
 800539a:	d8f0      	bhi.n	800537e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	61fa      	str	r2, [r7, #28]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	6938      	ldr	r0, [r7, #16]
 80053b2:	f7ff fec9 	bl	8005148 <_SendPacket>
  RECORD_END();
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f383 8811 	msr	BASEPRI, r3
}
 80053bc:	bf00      	nop
 80053be:	3720      	adds	r7, #32
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	200133c0 	.word	0x200133c0

080053c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08c      	sub	sp, #48	; 0x30
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80053d4:	f3ef 8311 	mrs	r3, BASEPRI
 80053d8:	f04f 0120 	mov.w	r1, #32
 80053dc:	f381 8811 	msr	BASEPRI, r1
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	4825      	ldr	r0, [pc, #148]	; (8005478 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80053e4:	f7ff fdbf 	bl	8004f66 <_PreparePacket>
 80053e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f6:	e00b      	b.n	8005410 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	1c59      	adds	r1, r3, #1
 8005400:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	09db      	lsrs	r3, r3, #7
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	2b7f      	cmp	r3, #127	; 0x7f
 8005414:	d8f0      	bhi.n	80053f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800541c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	e00b      	b.n	8005448 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	1c59      	adds	r1, r3, #1
 8005438:	6279      	str	r1, [r7, #36]	; 0x24
 800543a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	09db      	lsrs	r3, r3, #7
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2b7f      	cmp	r3, #127	; 0x7f
 800544c:	d8f0      	bhi.n	8005430 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	627a      	str	r2, [r7, #36]	; 0x24
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	6979      	ldr	r1, [r7, #20]
 8005462:	69b8      	ldr	r0, [r7, #24]
 8005464:	f7ff fe70 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f383 8811 	msr	BASEPRI, r3
}
 800546e:	bf00      	nop
 8005470:	3730      	adds	r7, #48	; 0x30
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200133c0 	.word	0x200133c0

0800547c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b08e      	sub	sp, #56	; 0x38
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800548a:	f3ef 8311 	mrs	r3, BASEPRI
 800548e:	f04f 0120 	mov.w	r1, #32
 8005492:	f381 8811 	msr	BASEPRI, r1
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	4832      	ldr	r0, [pc, #200]	; (8005564 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800549a:	f7ff fd64 	bl	8004f66 <_PreparePacket>
 800549e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30
 80054ac:	e00b      	b.n	80054c6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	6379      	str	r1, [r7, #52]	; 0x34
 80054b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	09db      	lsrs	r3, r3, #7
 80054c4:	633b      	str	r3, [r7, #48]	; 0x30
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ca:	d8f0      	bhi.n	80054ae <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	637a      	str	r2, [r7, #52]	; 0x34
 80054d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e4:	e00b      	b.n	80054fe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	09db      	lsrs	r3, r3, #7
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	2b7f      	cmp	r3, #127	; 0x7f
 8005502:	d8f0      	bhi.n	80054e6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	e00b      	b.n	8005536 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	1c59      	adds	r1, r3, #1
 8005526:	6279      	str	r1, [r7, #36]	; 0x24
 8005528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	09db      	lsrs	r3, r3, #7
 8005534:	623b      	str	r3, [r7, #32]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	2b7f      	cmp	r3, #127	; 0x7f
 800553a:	d8f0      	bhi.n	800551e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	627a      	str	r2, [r7, #36]	; 0x24
 8005542:	6a3a      	ldr	r2, [r7, #32]
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	6979      	ldr	r1, [r7, #20]
 8005550:	69b8      	ldr	r0, [r7, #24]
 8005552:	f7ff fdf9 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f383 8811 	msr	BASEPRI, r3
}
 800555c:	bf00      	nop
 800555e:	3738      	adds	r7, #56	; 0x38
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200133c0 	.word	0x200133c0

08005568 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005568:	b580      	push	{r7, lr}
 800556a:	b090      	sub	sp, #64	; 0x40
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005576:	f3ef 8311 	mrs	r3, BASEPRI
 800557a:	f04f 0120 	mov.w	r1, #32
 800557e:	f381 8811 	msr	BASEPRI, r1
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	4840      	ldr	r0, [pc, #256]	; (8005688 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005586:	f7ff fcee 	bl	8004f66 <_PreparePacket>
 800558a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	63bb      	str	r3, [r7, #56]	; 0x38
 8005598:	e00b      	b.n	80055b2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	b2da      	uxtb	r2, r3
 800559e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a0:	1c59      	adds	r1, r3, #1
 80055a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80055a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	09db      	lsrs	r3, r3, #7
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2b7f      	cmp	r3, #127	; 0x7f
 80055b6:	d8f0      	bhi.n	800559a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
 80055d0:	e00b      	b.n	80055ea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d8:	1c59      	adds	r1, r3, #1
 80055da:	6379      	str	r1, [r7, #52]	; 0x34
 80055dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	09db      	lsrs	r3, r3, #7
 80055e8:	633b      	str	r3, [r7, #48]	; 0x30
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	2b7f      	cmp	r3, #127	; 0x7f
 80055ee:	d8f0      	bhi.n	80055d2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	637a      	str	r2, [r7, #52]	; 0x34
 80055f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
 8005608:	e00b      	b.n	8005622 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	b2da      	uxtb	r2, r3
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	1c59      	adds	r1, r3, #1
 8005612:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	09db      	lsrs	r3, r3, #7
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	2b7f      	cmp	r3, #127	; 0x7f
 8005626:	d8f0      	bhi.n	800560a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800562e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
 800563c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563e:	623b      	str	r3, [r7, #32]
 8005640:	e00b      	b.n	800565a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	1c59      	adds	r1, r3, #1
 800564a:	6279      	str	r1, [r7, #36]	; 0x24
 800564c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	09db      	lsrs	r3, r3, #7
 8005658:	623b      	str	r3, [r7, #32]
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	2b7f      	cmp	r3, #127	; 0x7f
 800565e:	d8f0      	bhi.n	8005642 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	627a      	str	r2, [r7, #36]	; 0x24
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	6979      	ldr	r1, [r7, #20]
 8005674:	69b8      	ldr	r0, [r7, #24]
 8005676:	f7ff fd67 	bl	8005148 <_SendPacket>
  RECORD_END();
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f383 8811 	msr	BASEPRI, r3
}
 8005680:	bf00      	nop
 8005682:	3740      	adds	r7, #64	; 0x40
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	200133c0 	.word	0x200133c0

0800568c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b08c      	sub	sp, #48	; 0x30
 8005690:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005692:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005698:	f3ef 8311 	mrs	r3, BASEPRI
 800569c:	f04f 0120 	mov.w	r1, #32
 80056a0:	f381 8811 	msr	BASEPRI, r1
 80056a4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80056a6:	4b53      	ldr	r3, [pc, #332]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	220a      	movs	r2, #10
 80056ac:	4952      	ldr	r1, [pc, #328]	; (80057f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fa fd96 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80056ba:	200a      	movs	r0, #10
 80056bc:	f7ff fe2a 	bl	8005314 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056c0:	f3ef 8311 	mrs	r3, BASEPRI
 80056c4:	f04f 0120 	mov.w	r1, #32
 80056c8:	f381 8811 	msr	BASEPRI, r1
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	484b      	ldr	r0, [pc, #300]	; (80057fc <SEGGER_SYSVIEW_Start+0x170>)
 80056d0:	f7ff fc49 	bl	8004f66 <_PreparePacket>
 80056d4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056de:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e4:	e00b      	b.n	80056fe <SEGGER_SYSVIEW_Start+0x72>
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	09db      	lsrs	r3, r3, #7
 80056fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	2b7f      	cmp	r3, #127	; 0x7f
 8005702:	d8f0      	bhi.n	80056e6 <SEGGER_SYSVIEW_Start+0x5a>
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	62fa      	str	r2, [r7, #44]	; 0x2c
 800570a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	e00b      	b.n	8005738 <SEGGER_SYSVIEW_Start+0xac>
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	6279      	str	r1, [r7, #36]	; 0x24
 800572a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	09db      	lsrs	r3, r3, #7
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	2b7f      	cmp	r3, #127	; 0x7f
 800573c:	d8f0      	bhi.n	8005720 <SEGGER_SYSVIEW_Start+0x94>
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	627a      	str	r2, [r7, #36]	; 0x24
 8005744:	6a3a      	ldr	r2, [r7, #32]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e00b      	b.n	8005772 <SEGGER_SYSVIEW_Start+0xe6>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	61f9      	str	r1, [r7, #28]
 8005764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	09db      	lsrs	r3, r3, #7
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b7f      	cmp	r3, #127	; 0x7f
 8005776:	d8f0      	bhi.n	800575a <SEGGER_SYSVIEW_Start+0xce>
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	61fa      	str	r2, [r7, #28]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	e00b      	b.n	80057aa <SEGGER_SYSVIEW_Start+0x11e>
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	6179      	str	r1, [r7, #20]
 800579c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	09db      	lsrs	r3, r3, #7
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b7f      	cmp	r3, #127	; 0x7f
 80057ae:	d8f0      	bhi.n	8005792 <SEGGER_SYSVIEW_Start+0x106>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	617a      	str	r2, [r7, #20]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80057c0:	2218      	movs	r2, #24
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff fcbf 	bl	8005148 <_SendPacket>
      RECORD_END();
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80057d0:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <SEGGER_SYSVIEW_Start+0x168>)
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80057de:	f000 f9c7 	bl	8005b70 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80057e2:	f000 f9b1 	bl	8005b48 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80057e6:	f000 fbff 	bl	8005fe8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80057ea:	bf00      	nop
 80057ec:	3730      	adds	r7, #48	; 0x30
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20013390 	.word	0x20013390
 80057f8:	080062c0 	.word	0x080062c0
 80057fc:	200133c0 	.word	0x200133c0

08005800 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005806:	f3ef 8311 	mrs	r3, BASEPRI
 800580a:	f04f 0120 	mov.w	r1, #32
 800580e:	f381 8811 	msr	BASEPRI, r1
 8005812:	607b      	str	r3, [r7, #4]
 8005814:	480b      	ldr	r0, [pc, #44]	; (8005844 <SEGGER_SYSVIEW_Stop+0x44>)
 8005816:	f7ff fba6 	bl	8004f66 <_PreparePacket>
 800581a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800581c:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <SEGGER_SYSVIEW_Stop+0x48>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005824:	220b      	movs	r2, #11
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	6838      	ldr	r0, [r7, #0]
 800582a:	f7ff fc8d 	bl	8005148 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <SEGGER_SYSVIEW_Stop+0x48>)
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f383 8811 	msr	BASEPRI, r3
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	200133c0 	.word	0x200133c0
 8005848:	20013390 	.word	0x20013390

0800584c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	; 0x30
 8005850:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005852:	f3ef 8311 	mrs	r3, BASEPRI
 8005856:	f04f 0120 	mov.w	r1, #32
 800585a:	f381 8811 	msr	BASEPRI, r1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	4845      	ldr	r0, [pc, #276]	; (8005978 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005862:	f7ff fb80 	bl	8004f66 <_PreparePacket>
 8005866:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005870:	4b42      	ldr	r3, [pc, #264]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
 8005876:	e00b      	b.n	8005890 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	b2da      	uxtb	r2, r3
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	1c59      	adds	r1, r3, #1
 8005880:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	09db      	lsrs	r3, r3, #7
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	2b7f      	cmp	r3, #127	; 0x7f
 8005894:	d8f0      	bhi.n	8005878 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800589c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	4b34      	ldr	r3, [pc, #208]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	e00b      	b.n	80058ca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	1c59      	adds	r1, r3, #1
 80058ba:	6279      	str	r1, [r7, #36]	; 0x24
 80058bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	09db      	lsrs	r3, r3, #7
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	2b7f      	cmp	r3, #127	; 0x7f
 80058ce:	d8f0      	bhi.n	80058b2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	627a      	str	r2, [r7, #36]	; 0x24
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	e00b      	b.n	8005904 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	61f9      	str	r1, [r7, #28]
 80058f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	09db      	lsrs	r3, r3, #7
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b7f      	cmp	r3, #127	; 0x7f
 8005908:	d8f0      	bhi.n	80058ec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	61fa      	str	r2, [r7, #28]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e00b      	b.n	800593c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	b2da      	uxtb	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	1c59      	adds	r1, r3, #1
 800592c:	6179      	str	r1, [r7, #20]
 800592e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	09db      	lsrs	r3, r3, #7
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b7f      	cmp	r3, #127	; 0x7f
 8005940:	d8f0      	bhi.n	8005924 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	617a      	str	r2, [r7, #20]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005952:	2218      	movs	r2, #24
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	68b8      	ldr	r0, [r7, #8]
 8005958:	f7ff fbf6 	bl	8005148 <_SendPacket>
  RECORD_END();
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800596a:	4b04      	ldr	r3, [pc, #16]	; (800597c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	4798      	blx	r3
  }
}
 8005970:	bf00      	nop
 8005972:	3730      	adds	r7, #48	; 0x30
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	200133c0 	.word	0x200133c0
 800597c:	20013390 	.word	0x20013390

08005980 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b092      	sub	sp, #72	; 0x48
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005988:	f3ef 8311 	mrs	r3, BASEPRI
 800598c:	f04f 0120 	mov.w	r1, #32
 8005990:	f381 8811 	msr	BASEPRI, r1
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	486a      	ldr	r0, [pc, #424]	; (8005b40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005998:	f7ff fae5 	bl	8004f66 <_PreparePacket>
 800599c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	647b      	str	r3, [r7, #68]	; 0x44
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b66      	ldr	r3, [pc, #408]	; (8005b44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	643b      	str	r3, [r7, #64]	; 0x40
 80059b2:	e00b      	b.n	80059cc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80059b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	6479      	str	r1, [r7, #68]	; 0x44
 80059be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c8:	09db      	lsrs	r3, r3, #7
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
 80059cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ce:	2b7f      	cmp	r3, #127	; 0x7f
 80059d0:	d8f0      	bhi.n	80059b4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80059d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	647a      	str	r2, [r7, #68]	; 0x44
 80059d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ec:	e00b      	b.n	8005a06 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f4:	1c59      	adds	r1, r3, #1
 80059f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80059f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	09db      	lsrs	r3, r3, #7
 8005a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0a:	d8f0      	bhi.n	80059ee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	4619      	mov	r1, r3
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fa51 	bl	8004ecc <_EncodeStr>
 8005a2a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005a2c:	2209      	movs	r2, #9
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	6938      	ldr	r0, [r7, #16]
 8005a32:	f7ff fb89 	bl	8005148 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4a:	e00b      	b.n	8005a64 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	6379      	str	r1, [r7, #52]	; 0x34
 8005a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	09db      	lsrs	r3, r3, #7
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	2b7f      	cmp	r3, #127	; 0x7f
 8005a68:	d8f0      	bhi.n	8005a4c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	637a      	str	r2, [r7, #52]	; 0x34
 8005a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a84:	e00b      	b.n	8005a9e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	1c59      	adds	r1, r3, #1
 8005a8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	09db      	lsrs	r3, r3, #7
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa2:	d8f0      	bhi.n	8005a86 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	e00b      	b.n	8005ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	6279      	str	r1, [r7, #36]	; 0x24
 8005aca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	09db      	lsrs	r3, r3, #7
 8005ad6:	623b      	str	r3, [r7, #32]
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	2b7f      	cmp	r3, #127	; 0x7f
 8005adc:	d8f0      	bhi.n	8005ac0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	627a      	str	r2, [r7, #36]	; 0x24
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e00b      	b.n	8005b10 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	61f9      	str	r1, [r7, #28]
 8005b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	09db      	lsrs	r3, r3, #7
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b7f      	cmp	r3, #127	; 0x7f
 8005b14:	d8f0      	bhi.n	8005af8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	61fa      	str	r2, [r7, #28]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005b26:	2215      	movs	r2, #21
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	6938      	ldr	r0, [r7, #16]
 8005b2c:	f7ff fb0c 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f383 8811 	msr	BASEPRI, r3
}
 8005b36:	bf00      	nop
 8005b38:	3748      	adds	r7, #72	; 0x48
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	200133c0 	.word	0x200133c0
 8005b44:	20013390 	.word	0x20013390

08005b48 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005b4c:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005b5e:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	4798      	blx	r3
  }
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20013390 	.word	0x20013390

08005b70 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005b76:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d01a      	beq.n	8005bb4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005b7e:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d015      	beq.n	8005bb4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005b88:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4798      	blx	r3
 8005b90:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005b94:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005b96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	000a      	movs	r2, r1
 8005ba4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4621      	mov	r1, r4
 8005bac:	200d      	movs	r0, #13
 8005bae:	f7ff fc0b 	bl	80053c8 <SEGGER_SYSVIEW_RecordU32x2>
 8005bb2:	e006      	b.n	8005bc2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	200c      	movs	r0, #12
 8005bbc:	f7ff fbc8 	bl	8005350 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd90      	pop	{r4, r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20013390 	.word	0x20013390
 8005bd0:	e0001004 	.word	0xe0001004

08005bd4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005bda:	f3ef 8311 	mrs	r3, BASEPRI
 8005bde:	f04f 0120 	mov.w	r1, #32
 8005be2:	f381 8811 	msr	BASEPRI, r1
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	4819      	ldr	r0, [pc, #100]	; (8005c50 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005bea:	f7ff f9bc 	bl	8004f66 <_PreparePacket>
 8005bee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005bf4:	4b17      	ldr	r3, [pc, #92]	; (8005c54 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	e00b      	b.n	8005c20 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	6179      	str	r1, [r7, #20]
 8005c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	09db      	lsrs	r3, r3, #7
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b7f      	cmp	r3, #127	; 0x7f
 8005c24:	d8f0      	bhi.n	8005c08 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	617a      	str	r2, [r7, #20]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005c36:	2202      	movs	r2, #2
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	68b8      	ldr	r0, [r7, #8]
 8005c3c:	f7ff fa84 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f383 8811 	msr	BASEPRI, r3
}
 8005c46:	bf00      	nop
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200133c0 	.word	0x200133c0
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c62:	f04f 0120 	mov.w	r1, #32
 8005c66:	f381 8811 	msr	BASEPRI, r1
 8005c6a:	607b      	str	r3, [r7, #4]
 8005c6c:	4807      	ldr	r0, [pc, #28]	; (8005c8c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005c6e:	f7ff f97a 	bl	8004f66 <_PreparePacket>
 8005c72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005c74:	2203      	movs	r2, #3
 8005c76:	6839      	ldr	r1, [r7, #0]
 8005c78:	6838      	ldr	r0, [r7, #0]
 8005c7a:	f7ff fa65 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f383 8811 	msr	BASEPRI, r3
}
 8005c84:	bf00      	nop
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	200133c0 	.word	0x200133c0

08005c90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c96:	f3ef 8311 	mrs	r3, BASEPRI
 8005c9a:	f04f 0120 	mov.w	r1, #32
 8005c9e:	f381 8811 	msr	BASEPRI, r1
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	4807      	ldr	r0, [pc, #28]	; (8005cc4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005ca6:	f7ff f95e 	bl	8004f66 <_PreparePacket>
 8005caa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005cac:	2212      	movs	r2, #18
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6838      	ldr	r0, [r7, #0]
 8005cb2:	f7ff fa49 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f383 8811 	msr	BASEPRI, r3
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	200133c0 	.word	0x200133c0

08005cc8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005cce:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd2:	f04f 0120 	mov.w	r1, #32
 8005cd6:	f381 8811 	msr	BASEPRI, r1
 8005cda:	607b      	str	r3, [r7, #4]
 8005cdc:	4807      	ldr	r0, [pc, #28]	; (8005cfc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005cde:	f7ff f942 	bl	8004f66 <_PreparePacket>
 8005ce2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005ce4:	2211      	movs	r2, #17
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6838      	ldr	r0, [r7, #0]
 8005cea:	f7ff fa2d 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f383 8811 	msr	BASEPRI, r3
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	200133c0 	.word	0x200133c0

08005d00 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d08:	f3ef 8311 	mrs	r3, BASEPRI
 8005d0c:	f04f 0120 	mov.w	r1, #32
 8005d10:	f381 8811 	msr	BASEPRI, r1
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	4819      	ldr	r0, [pc, #100]	; (8005d7c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005d18:	f7ff f925 	bl	8004f66 <_PreparePacket>
 8005d1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d22:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e00b      	b.n	8005d4e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	1c59      	adds	r1, r3, #1
 8005d3e:	61f9      	str	r1, [r7, #28]
 8005d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	09db      	lsrs	r3, r3, #7
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	2b7f      	cmp	r3, #127	; 0x7f
 8005d52:	d8f0      	bhi.n	8005d36 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	61fa      	str	r2, [r7, #28]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005d64:	2208      	movs	r2, #8
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	6938      	ldr	r0, [r7, #16]
 8005d6a:	f7ff f9ed 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f383 8811 	msr	BASEPRI, r3
}
 8005d74:	bf00      	nop
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	200133c0 	.word	0x200133c0
 8005d80:	20013390 	.word	0x20013390

08005d84 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d90:	f04f 0120 	mov.w	r1, #32
 8005d94:	f381 8811 	msr	BASEPRI, r1
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	4819      	ldr	r0, [pc, #100]	; (8005e00 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005d9c:	f7ff f8e3 	bl	8004f66 <_PreparePacket>
 8005da0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005da6:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	e00b      	b.n	8005dd2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	1c59      	adds	r1, r3, #1
 8005dc2:	61f9      	str	r1, [r7, #28]
 8005dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	09db      	lsrs	r3, r3, #7
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd6:	d8f0      	bhi.n	8005dba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	61fa      	str	r2, [r7, #28]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005de8:	2204      	movs	r2, #4
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	6938      	ldr	r0, [r7, #16]
 8005dee:	f7ff f9ab 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f383 8811 	msr	BASEPRI, r3
}
 8005df8:	bf00      	nop
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	200133c0 	.word	0x200133c0
 8005e04:	20013390 	.word	0x20013390

08005e08 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e10:	f3ef 8311 	mrs	r3, BASEPRI
 8005e14:	f04f 0120 	mov.w	r1, #32
 8005e18:	f381 8811 	msr	BASEPRI, r1
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	4819      	ldr	r0, [pc, #100]	; (8005e84 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005e20:	f7ff f8a1 	bl	8004f66 <_PreparePacket>
 8005e24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e2a:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	e00b      	b.n	8005e56 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	1c59      	adds	r1, r3, #1
 8005e46:	61f9      	str	r1, [r7, #28]
 8005e48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	09db      	lsrs	r3, r3, #7
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b7f      	cmp	r3, #127	; 0x7f
 8005e5a:	d8f0      	bhi.n	8005e3e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	61fa      	str	r2, [r7, #28]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005e6c:	2206      	movs	r2, #6
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	6938      	ldr	r0, [r7, #16]
 8005e72:	f7ff f969 	bl	8005148 <_SendPacket>
  RECORD_END();
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f383 8811 	msr	BASEPRI, r3
}
 8005e7c:	bf00      	nop
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	200133c0 	.word	0x200133c0
 8005e88:	20013390 	.word	0x20013390

08005e8c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005e94:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	1ad3      	subs	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	20013390 	.word	0x20013390

08005eac <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08c      	sub	sp, #48	; 0x30
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005eb6:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d06d      	beq.n	8005f9a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005ebe:	4b39      	ldr	r3, [pc, #228]	; (8005fa4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec8:	e008      	b.n	8005edc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	3301      	adds	r3, #1
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d3f2      	bcc.n	8005eca <SEGGER_SYSVIEW_SendModule+0x1e>
 8005ee4:	e000      	b.n	8005ee8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005ee6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d055      	beq.n	8005f9a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005eee:	f3ef 8311 	mrs	r3, BASEPRI
 8005ef2:	f04f 0120 	mov.w	r1, #32
 8005ef6:	f381 8811 	msr	BASEPRI, r1
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	482a      	ldr	r0, [pc, #168]	; (8005fa8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005efe:	f7ff f832 	bl	8004f66 <_PreparePacket>
 8005f02:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	e00b      	b.n	8005f2a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	1c59      	adds	r1, r3, #1
 8005f1a:	6279      	str	r1, [r7, #36]	; 0x24
 8005f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	09db      	lsrs	r3, r3, #7
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2e:	d8f0      	bhi.n	8005f12 <SEGGER_SYSVIEW_SendModule+0x66>
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	627a      	str	r2, [r7, #36]	; 0x24
 8005f36:	6a3a      	ldr	r2, [r7, #32]
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	61fb      	str	r3, [r7, #28]
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	e00b      	b.n	8005f64 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	1c59      	adds	r1, r3, #1
 8005f54:	61f9      	str	r1, [r7, #28]
 8005f56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	09db      	lsrs	r3, r3, #7
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b7f      	cmp	r3, #127	; 0x7f
 8005f68:	d8f0      	bhi.n	8005f4c <SEGGER_SYSVIEW_SendModule+0xa0>
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	61fa      	str	r2, [r7, #28]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2280      	movs	r2, #128	; 0x80
 8005f80:	4619      	mov	r1, r3
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7fe ffa2 	bl	8004ecc <_EncodeStr>
 8005f88:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005f8a:	2216      	movs	r2, #22
 8005f8c:	68f9      	ldr	r1, [r7, #12]
 8005f8e:	6938      	ldr	r0, [r7, #16]
 8005f90:	f7ff f8da 	bl	8005148 <_SendPacket>
      RECORD_END();
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	3730      	adds	r7, #48	; 0x30
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	200133b8 	.word	0x200133b8
 8005fa8:	200133c0 	.word	0x200133c0

08005fac <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00f      	beq.n	8005fda <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005fba:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f2      	bne.n	8005fc0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200133b8 	.word	0x200133b8

08005fe8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005fee:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff2:	f04f 0120 	mov.w	r1, #32
 8005ff6:	f381 8811 	msr	BASEPRI, r1
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	4817      	ldr	r0, [pc, #92]	; (800605c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005ffe:	f7fe ffb2 	bl	8004f66 <_PreparePacket>
 8006002:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	4b14      	ldr	r3, [pc, #80]	; (8006060 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	e00b      	b.n	800602c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	b2da      	uxtb	r2, r3
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	1c59      	adds	r1, r3, #1
 800601c:	6179      	str	r1, [r7, #20]
 800601e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	09db      	lsrs	r3, r3, #7
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b7f      	cmp	r3, #127	; 0x7f
 8006030:	d8f0      	bhi.n	8006014 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	617a      	str	r2, [r7, #20]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006042:	221b      	movs	r2, #27
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68b8      	ldr	r0, [r7, #8]
 8006048:	f7ff f87e 	bl	8005148 <_SendPacket>
  RECORD_END();
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f383 8811 	msr	BASEPRI, r3
}
 8006052:	bf00      	nop
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200133c0 	.word	0x200133c0
 8006060:	200133bc 	.word	0x200133bc

08006064 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	; 0x28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800606c:	f3ef 8311 	mrs	r3, BASEPRI
 8006070:	f04f 0120 	mov.w	r1, #32
 8006074:	f381 8811 	msr	BASEPRI, r1
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	4827      	ldr	r0, [pc, #156]	; (8006118 <SEGGER_SYSVIEW_Warn+0xb4>)
 800607c:	f7fe ff73 	bl	8004f66 <_PreparePacket>
 8006080:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	6938      	ldr	r0, [r7, #16]
 8006088:	f7fe ff20 	bl	8004ecc <_EncodeStr>
 800608c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	2301      	movs	r3, #1
 8006094:	623b      	str	r3, [r7, #32]
 8006096:	e00b      	b.n	80060b0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	1c59      	adds	r1, r3, #1
 80060a0:	6279      	str	r1, [r7, #36]	; 0x24
 80060a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	09db      	lsrs	r3, r3, #7
 80060ae:	623b      	str	r3, [r7, #32]
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	2b7f      	cmp	r3, #127	; 0x7f
 80060b4:	d8f0      	bhi.n	8006098 <SEGGER_SYSVIEW_Warn+0x34>
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	627a      	str	r2, [r7, #36]	; 0x24
 80060bc:	6a3a      	ldr	r2, [r7, #32]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	e00b      	b.n	80060e8 <SEGGER_SYSVIEW_Warn+0x84>
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	1c59      	adds	r1, r3, #1
 80060d8:	61f9      	str	r1, [r7, #28]
 80060da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	09db      	lsrs	r3, r3, #7
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b7f      	cmp	r3, #127	; 0x7f
 80060ec:	d8f0      	bhi.n	80060d0 <SEGGER_SYSVIEW_Warn+0x6c>
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	61fa      	str	r2, [r7, #28]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060fe:	221a      	movs	r2, #26
 8006100:	68f9      	ldr	r1, [r7, #12]
 8006102:	6938      	ldr	r0, [r7, #16]
 8006104:	f7ff f820 	bl	8005148 <_SendPacket>
  RECORD_END();
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f383 8811 	msr	BASEPRI, r3
}
 800610e:	bf00      	nop
 8006110:	3728      	adds	r7, #40	; 0x28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	200133c0 	.word	0x200133c0

0800611c <__libc_init_array>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4d0d      	ldr	r5, [pc, #52]	; (8006154 <__libc_init_array+0x38>)
 8006120:	4c0d      	ldr	r4, [pc, #52]	; (8006158 <__libc_init_array+0x3c>)
 8006122:	1b64      	subs	r4, r4, r5
 8006124:	10a4      	asrs	r4, r4, #2
 8006126:	2600      	movs	r6, #0
 8006128:	42a6      	cmp	r6, r4
 800612a:	d109      	bne.n	8006140 <__libc_init_array+0x24>
 800612c:	4d0b      	ldr	r5, [pc, #44]	; (800615c <__libc_init_array+0x40>)
 800612e:	4c0c      	ldr	r4, [pc, #48]	; (8006160 <__libc_init_array+0x44>)
 8006130:	f000 f83e 	bl	80061b0 <_init>
 8006134:	1b64      	subs	r4, r4, r5
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	2600      	movs	r6, #0
 800613a:	42a6      	cmp	r6, r4
 800613c:	d105      	bne.n	800614a <__libc_init_array+0x2e>
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	f855 3b04 	ldr.w	r3, [r5], #4
 8006144:	4798      	blx	r3
 8006146:	3601      	adds	r6, #1
 8006148:	e7ee      	b.n	8006128 <__libc_init_array+0xc>
 800614a:	f855 3b04 	ldr.w	r3, [r5], #4
 800614e:	4798      	blx	r3
 8006150:	3601      	adds	r6, #1
 8006152:	e7f2      	b.n	800613a <__libc_init_array+0x1e>
 8006154:	080062d4 	.word	0x080062d4
 8006158:	080062d4 	.word	0x080062d4
 800615c:	080062d4 	.word	0x080062d4
 8006160:	080062d8 	.word	0x080062d8

08006164 <memcmp>:
 8006164:	b510      	push	{r4, lr}
 8006166:	3901      	subs	r1, #1
 8006168:	4402      	add	r2, r0
 800616a:	4290      	cmp	r0, r2
 800616c:	d101      	bne.n	8006172 <memcmp+0xe>
 800616e:	2000      	movs	r0, #0
 8006170:	e005      	b.n	800617e <memcmp+0x1a>
 8006172:	7803      	ldrb	r3, [r0, #0]
 8006174:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006178:	42a3      	cmp	r3, r4
 800617a:	d001      	beq.n	8006180 <memcmp+0x1c>
 800617c:	1b18      	subs	r0, r3, r4
 800617e:	bd10      	pop	{r4, pc}
 8006180:	3001      	adds	r0, #1
 8006182:	e7f2      	b.n	800616a <memcmp+0x6>

08006184 <memcpy>:
 8006184:	440a      	add	r2, r1
 8006186:	4291      	cmp	r1, r2
 8006188:	f100 33ff 	add.w	r3, r0, #4294967295
 800618c:	d100      	bne.n	8006190 <memcpy+0xc>
 800618e:	4770      	bx	lr
 8006190:	b510      	push	{r4, lr}
 8006192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800619a:	4291      	cmp	r1, r2
 800619c:	d1f9      	bne.n	8006192 <memcpy+0xe>
 800619e:	bd10      	pop	{r4, pc}

080061a0 <memset>:
 80061a0:	4402      	add	r2, r0
 80061a2:	4603      	mov	r3, r0
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d100      	bne.n	80061aa <memset+0xa>
 80061a8:	4770      	bx	lr
 80061aa:	f803 1b01 	strb.w	r1, [r3], #1
 80061ae:	e7f9      	b.n	80061a4 <memset+0x4>

080061b0 <_init>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	bf00      	nop
 80061b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b6:	bc08      	pop	{r3}
 80061b8:	469e      	mov	lr, r3
 80061ba:	4770      	bx	lr

080061bc <_fini>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr
